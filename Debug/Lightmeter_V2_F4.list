
Lightmeter_V2_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a454  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f8  0800a5f8  0800a5f8  0001a5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aff0  0800aff0  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800aff0  0800aff0  0001aff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aff8  0800aff8  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aff8  0800aff8  0001aff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800affc  0800affc  0001affc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800b000  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c8  20000240  0800b240  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000908  0800b240  00020908  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015d86  00000000  00000000  000202b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035de  00000000  00000000  00036039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001428  00000000  00000000  00039618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fa7  00000000  00000000  0003aa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019733  00000000  00000000  0003b9e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a428  00000000  00000000  0005511a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095e5e  00000000  00000000  0006f542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006990  00000000  00000000  001053a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0010bd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000240 	.word	0x20000240
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a5dc 	.word	0x0800a5dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000244 	.word	0x20000244
 80001dc:	0800a5dc 	.word	0x0800a5dc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <MX_CRC_Init+0x20>)
 8000efa:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <MX_CRC_Init+0x24>)
 8000efc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_CRC_Init+0x20>)
 8000f00:	f001 fea9 	bl	8002c56 <HAL_CRC_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000f0a:	f000 fe19 	bl	8001b40 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2000025c 	.word	0x2000025c
 8000f18:	40023000 	.word	0x40023000

08000f1c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0b      	ldr	r2, [pc, #44]	; (8000f58 <HAL_CRC_MspInit+0x3c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d10d      	bne.n	8000f4a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_CRC_MspInit+0x40>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a09      	ldr	r2, [pc, #36]	; (8000f5c <HAL_CRC_MspInit+0x40>)
 8000f38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <HAL_CRC_MspInit+0x40>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40023000 	.word	0x40023000
 8000f5c:	40023800 	.word	0x40023800

08000f60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
 8000f64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	4b3f      	ldr	r3, [pc, #252]	; (8001078 <MX_GPIO_Init+0x118>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a3e      	ldr	r2, [pc, #248]	; (8001078 <MX_GPIO_Init+0x118>)
 8000f80:	f043 0304 	orr.w	r3, r3, #4
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b3c      	ldr	r3, [pc, #240]	; (8001078 <MX_GPIO_Init+0x118>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	4b38      	ldr	r3, [pc, #224]	; (8001078 <MX_GPIO_Init+0x118>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a37      	ldr	r2, [pc, #220]	; (8001078 <MX_GPIO_Init+0x118>)
 8000f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b35      	ldr	r3, [pc, #212]	; (8001078 <MX_GPIO_Init+0x118>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	4b31      	ldr	r3, [pc, #196]	; (8001078 <MX_GPIO_Init+0x118>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a30      	ldr	r2, [pc, #192]	; (8001078 <MX_GPIO_Init+0x118>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b2e      	ldr	r3, [pc, #184]	; (8001078 <MX_GPIO_Init+0x118>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <MX_GPIO_Init+0x118>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a29      	ldr	r2, [pc, #164]	; (8001078 <MX_GPIO_Init+0x118>)
 8000fd4:	f043 0302 	orr.w	r3, r3, #2
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b27      	ldr	r3, [pc, #156]	; (8001078 <MX_GPIO_Init+0x118>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	4b23      	ldr	r3, [pc, #140]	; (8001078 <MX_GPIO_Init+0x118>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a22      	ldr	r2, [pc, #136]	; (8001078 <MX_GPIO_Init+0x118>)
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b20      	ldr	r3, [pc, #128]	; (8001078 <MX_GPIO_Init+0x118>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0308 	and.w	r3, r3, #8
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001002:	2200      	movs	r2, #0
 8001004:	f24f 011c 	movw	r1, #61468	; 0xf01c
 8001008:	481c      	ldr	r0, [pc, #112]	; (800107c <MX_GPIO_Init+0x11c>)
 800100a:	f001 ffe7 	bl	8002fdc <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800100e:	2301      	movs	r3, #1
 8001010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001012:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001016:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	4817      	ldr	r0, [pc, #92]	; (8001080 <MX_GPIO_Init+0x120>)
 8001024:	f001 fe56 	bl	8002cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001028:	f24f 031c 	movw	r3, #61468	; 0xf01c
 800102c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	2301      	movs	r3, #1
 8001030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	480e      	ldr	r0, [pc, #56]	; (800107c <MX_GPIO_Init+0x11c>)
 8001042:	f001 fe47 	bl	8002cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001046:	2340      	movs	r3, #64	; 0x40
 8001048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800104a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800104e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001050:	2301      	movs	r3, #1
 8001052:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	4808      	ldr	r0, [pc, #32]	; (800107c <MX_GPIO_Init+0x11c>)
 800105c:	f001 fe3a 	bl	8002cd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2100      	movs	r1, #0
 8001064:	2017      	movs	r0, #23
 8001066:	f001 fdc0 	bl	8002bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800106a:	2017      	movs	r0, #23
 800106c:	f001 fdd9 	bl	8002c22 <HAL_NVIC_EnableIRQ>

}
 8001070:	bf00      	nop
 8001072:	3728      	adds	r7, #40	; 0x28
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40023800 	.word	0x40023800
 800107c:	40020c00 	.word	0x40020c00
 8001080:	40020000 	.word	0x40020000

08001084 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <MX_I2C1_Init+0x50>)
 800108a:	4a13      	ldr	r2, [pc, #76]	; (80010d8 <MX_I2C1_Init+0x54>)
 800108c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_I2C1_Init+0x50>)
 8001090:	4a12      	ldr	r2, [pc, #72]	; (80010dc <MX_I2C1_Init+0x58>)
 8001092:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_I2C1_Init+0x50>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_I2C1_Init+0x50>)
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b4:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010c2:	f001 ffbd 	bl	8003040 <HAL_I2C_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010cc:	f000 fd38 	bl	8001b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000264 	.word	0x20000264
 80010d8:	40005400 	.word	0x40005400
 80010dc:	000186a0 	.word	0x000186a0

080010e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a1d      	ldr	r2, [pc, #116]	; (8001174 <HAL_I2C_MspInit+0x94>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d133      	bne.n	800116a <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <HAL_I2C_MspInit+0x98>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a1b      	ldr	r2, [pc, #108]	; (8001178 <HAL_I2C_MspInit+0x98>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <HAL_I2C_MspInit+0x98>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800111e:	23c0      	movs	r3, #192	; 0xc0
 8001120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001122:	2312      	movs	r3, #18
 8001124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800112e:	2304      	movs	r3, #4
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4619      	mov	r1, r3
 8001138:	4810      	ldr	r0, [pc, #64]	; (800117c <HAL_I2C_MspInit+0x9c>)
 800113a:	f001 fdcb 	bl	8002cd4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <HAL_I2C_MspInit+0x98>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <HAL_I2C_MspInit+0x98>)
 8001148:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800114c:	6413      	str	r3, [r2, #64]	; 0x40
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_I2C_MspInit+0x98>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	2020      	movs	r0, #32
 8001160:	f001 fd43 	bl	8002bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001164:	2020      	movs	r0, #32
 8001166:	f001 fd5c 	bl	8002c22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800116a:	bf00      	nop
 800116c:	3728      	adds	r7, #40	; 0x28
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40005400 	.word	0x40005400
 8001178:	40023800 	.word	0x40023800
 800117c:	40020400 	.word	0x40020400

08001180 <set_initial_veml_params>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_initial_veml_params(veml6030 veml){
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	463b      	mov	r3, r7
 8001188:	e883 0003 	stmia.w	r3, {r0, r1}
	veml6030_init(&veml, &hi2c1, VEML6030_I2C_ADDRESS);
 800118c:	463b      	mov	r3, r7
 800118e:	2210      	movs	r2, #16
 8001190:	490b      	ldr	r1, [pc, #44]	; (80011c0 <set_initial_veml_params+0x40>)
 8001192:	4618      	mov	r0, r3
 8001194:	f001 fb07 	bl	80027a6 <veml6030_init>
	veml6030_power_on(&veml);
 8001198:	463b      	mov	r3, r7
 800119a:	4618      	mov	r0, r3
 800119c:	f001 fb25 	bl	80027ea <veml6030_power_on>
	veml6030_set_als_integration_time(&veml, REG_ALS_CONF_IT25);
 80011a0:	463b      	mov	r3, r7
 80011a2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80011a6:	4618      	mov	r0, r3
 80011a8:	f001 fb38 	bl	800281c <veml6030_set_als_integration_time>
	veml6030_set_als_gain(&veml, REG_ALS_CONF_GAIN_1_8);
 80011ac:	463b      	mov	r3, r7
 80011ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011b2:	4618      	mov	r0, r3
 80011b4:	f001 fb51 	bl	800285a <veml6030_set_als_gain>
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000264 	.word	0x20000264

080011c4 <display_initial_description>:

void display_initial_description(void){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af02      	add	r7, sp, #8
	ssd1306_SetCursor(0, 30);
 80011ca:	211e      	movs	r1, #30
 80011cc:	2000      	movs	r0, #0
 80011ce:	f000 ff55 	bl	800207c <ssd1306_SetCursor>
	ssd1306_WriteString("Aperture:", Font_6x8, White);
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <display_initial_description+0x3c>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	9200      	str	r2, [sp, #0]
 80011d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011da:	480a      	ldr	r0, [pc, #40]	; (8001204 <display_initial_description+0x40>)
 80011dc:	f000 ff28 	bl	8002030 <ssd1306_WriteString>
	ssd1306_SetCursor(60, 30);
 80011e0:	211e      	movs	r1, #30
 80011e2:	203c      	movs	r0, #60	; 0x3c
 80011e4:	f000 ff4a 	bl	800207c <ssd1306_SetCursor>
	ssd1306_WriteString("Exposure:", Font_6x8, White);
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <display_initial_description+0x3c>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	9200      	str	r2, [sp, #0]
 80011ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <display_initial_description+0x44>)
 80011f2:	f000 ff1d 	bl	8002030 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80011f6:	f000 fe0d 	bl	8001e14 <ssd1306_UpdateScreen>
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	0800ac28 	.word	0x0800ac28
 8001204:	0800a5f8 	.word	0x0800a5f8
 8001208:	0800a604 	.word	0x0800a604

0800120c <the_closest_integer_from_list>:

uint16_t the_closest_integer_from_list(uint16_t value, uint16_t *arr, size_t size) {
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	81fb      	strh	r3, [r7, #14]
	uint16_t closest = *arr;  // Initialize with the first element
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	83fb      	strh	r3, [r7, #30]
    uint16_t min_diff = abs(value - *arr);  // Compute the absolute difference
 8001220:	89fb      	ldrh	r3, [r7, #14]
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	8812      	ldrh	r2, [r2, #0]
 8001226:	1a9b      	subs	r3, r3, r2
 8001228:	2b00      	cmp	r3, #0
 800122a:	bfb8      	it	lt
 800122c:	425b      	neglt	r3, r3
 800122e:	83bb      	strh	r3, [r7, #28]

    for (size_t i = 1; i < size; i++) {
 8001230:	2301      	movs	r3, #1
 8001232:	61bb      	str	r3, [r7, #24]
 8001234:	e019      	b.n	800126a <the_closest_integer_from_list+0x5e>
    	uint16_t diff = abs(value - *(arr+i));  // Calculate the difference for the current element
 8001236:	89fb      	ldrh	r3, [r7, #14]
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	0052      	lsls	r2, r2, #1
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	440a      	add	r2, r1
 8001240:	8812      	ldrh	r2, [r2, #0]
 8001242:	1a9b      	subs	r3, r3, r2
 8001244:	2b00      	cmp	r3, #0
 8001246:	bfb8      	it	lt
 8001248:	425b      	neglt	r3, r3
 800124a:	82fb      	strh	r3, [r7, #22]

        if (diff < min_diff) {
 800124c:	8afa      	ldrh	r2, [r7, #22]
 800124e:	8bbb      	ldrh	r3, [r7, #28]
 8001250:	429a      	cmp	r2, r3
 8001252:	d207      	bcs.n	8001264 <the_closest_integer_from_list+0x58>
            min_diff = diff;
 8001254:	8afb      	ldrh	r3, [r7, #22]
 8001256:	83bb      	strh	r3, [r7, #28]
            closest = *(arr+i);  // Update the closest value
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	68ba      	ldr	r2, [r7, #8]
 800125e:	4413      	add	r3, r2
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	83fb      	strh	r3, [r7, #30]
    for (size_t i = 1; i < size; i++) {
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	3301      	adds	r3, #1
 8001268:	61bb      	str	r3, [r7, #24]
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	429a      	cmp	r2, r3
 8001270:	d3e1      	bcc.n	8001236 <the_closest_integer_from_list+0x2a>
        }
    }
    return closest;
 8001272:	8bfb      	ldrh	r3, [r7, #30]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3724      	adds	r7, #36	; 0x24
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <the_closest_double_from_list>:


double the_closest_double_from_list(double value, double *arr, size_t size) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b08c      	sub	sp, #48	; 0x30
 8001284:	af00      	add	r7, sp, #0
 8001286:	ed87 0b02 	vstr	d0, [r7, #8]
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
	double closest = *arr;  // Initialize with the first element
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001294:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double min_diff = fabs(value - *arr);  // Compute the absolute difference
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012a2:	f7fe fff9 	bl	8000298 <__aeabi_dsub>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4611      	mov	r1, r2
 80012ac:	6239      	str	r1, [r7, #32]
 80012ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24

    for (size_t i = 1; i < size; i++) {
 80012b4:	2301      	movs	r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	e028      	b.n	800130c <the_closest_double_from_list+0x8c>
        double diff = fabs(value - *(arr+i));  // Calculate the difference for the current element
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012ca:	f7fe ffe5 	bl	8000298 <__aeabi_dsub>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4611      	mov	r1, r2
 80012d4:	6139      	str	r1, [r7, #16]
 80012d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012da:	617b      	str	r3, [r7, #20]

        if (diff < min_diff) {
 80012dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80012e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012e4:	f7ff fc02 	bl	8000aec <__aeabi_dcmplt>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d00b      	beq.n	8001306 <the_closest_double_from_list+0x86>
            min_diff = diff;
 80012ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012f2:	e9c7 2308 	strd	r2, r3, [r7, #32]
            closest = *(arr+i);  // Update the closest value
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    for (size_t i = 1; i < size; i++) {
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3301      	adds	r3, #1
 800130a:	61fb      	str	r3, [r7, #28]
 800130c:	69fa      	ldr	r2, [r7, #28]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	d3d2      	bcc.n	80012ba <the_closest_double_from_list+0x3a>
        }
    }
    return closest;
 8001314:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001318:	ec43 2b17 	vmov	d7, r2, r3
}
 800131c:	eeb0 0a47 	vmov.f32	s0, s14
 8001320:	eef0 0a67 	vmov.f32	s1, s15
 8001324:	3730      	adds	r7, #48	; 0x30
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	0000      	movs	r0, r0
 800132c:	0000      	movs	r0, r0
	...

08001330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001330:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001334:	b094      	sub	sp, #80	; 0x50
 8001336:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	uint16_t als = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800133e:	f001 fae3 	bl	8002908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001342:	f000 fa43 	bl	80017cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001346:	f7ff fe0b 	bl	8000f60 <MX_GPIO_Init>
  MX_I2C1_Init();
 800134a:	f7ff fe9b 	bl	8001084 <MX_I2C1_Init>
  MX_SPI2_Init();
 800134e:	f000 fbfd 	bl	8001b4c <MX_SPI2_Init>
  MX_TIM2_Init();
 8001352:	f001 f8c5 	bl	80024e0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001356:	f001 f963 	bl	8002620 <MX_USART2_UART_Init>
  MX_CRC_Init();
 800135a:	f7ff fdcb 	bl	8000ef4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 800135e:	213c      	movs	r1, #60	; 0x3c
 8001360:	48d7      	ldr	r0, [pc, #860]	; (80016c0 <main+0x390>)
 8001362:	f004 faaf 	bl	80058c4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8001366:	213c      	movs	r1, #60	; 0x3c
 8001368:	48d5      	ldr	r0, [pc, #852]	; (80016c0 <main+0x390>)
 800136a:	f004 f8eb 	bl	8005544 <HAL_TIM_IC_Start_IT>
	ssd1306_Init();
 800136e:	f000 fccf 	bl	8001d10 <ssd1306_Init>
	display_initial_description();
 8001372:	f7ff ff27 	bl	80011c4 <display_initial_description>
	veml6030 veml;
	set_initial_veml_params(veml);
 8001376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800137a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800137e:	f7ff feff 	bl	8001180 <set_initial_veml_params>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		als = veml6030_read_als(&veml);
 8001382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001386:	4618      	mov	r0, r3
 8001388:	f001 fa86 	bl	8002898 <veml6030_read_als>
 800138c:	4603      	mov	r3, r0
 800138e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		uint32_t lux_als = (uint32_t)RESOLUTION*als;
 8001392:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	643b      	str	r3, [r7, #64]	; 0x40
		uint32_t lux_als_correction =  (uint32_t)((6.0135e-13*lux_als*lux_als*lux_als*lux_als)-(9.3924e-9*lux_als*lux_als*lux_als)+(8.1488e-5*lux_als*lux_als)+1.0023*lux_als);
 800139a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800139c:	f7ff f8ba 	bl	8000514 <__aeabi_ui2d>
 80013a0:	a3bb      	add	r3, pc, #748	; (adr r3, 8001690 <main+0x360>)
 80013a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a6:	f7ff f92f 	bl	8000608 <__aeabi_dmul>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4614      	mov	r4, r2
 80013b0:	461d      	mov	r5, r3
 80013b2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80013b4:	f7ff f8ae 	bl	8000514 <__aeabi_ui2d>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4620      	mov	r0, r4
 80013be:	4629      	mov	r1, r5
 80013c0:	f7ff f922 	bl	8000608 <__aeabi_dmul>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4614      	mov	r4, r2
 80013ca:	461d      	mov	r5, r3
 80013cc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80013ce:	f7ff f8a1 	bl	8000514 <__aeabi_ui2d>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4620      	mov	r0, r4
 80013d8:	4629      	mov	r1, r5
 80013da:	f7ff f915 	bl	8000608 <__aeabi_dmul>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4614      	mov	r4, r2
 80013e4:	461d      	mov	r5, r3
 80013e6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80013e8:	f7ff f894 	bl	8000514 <__aeabi_ui2d>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4620      	mov	r0, r4
 80013f2:	4629      	mov	r1, r5
 80013f4:	f7ff f908 	bl	8000608 <__aeabi_dmul>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4614      	mov	r4, r2
 80013fe:	461d      	mov	r5, r3
 8001400:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001402:	f7ff f887 	bl	8000514 <__aeabi_ui2d>
 8001406:	a3a4      	add	r3, pc, #656	; (adr r3, 8001698 <main+0x368>)
 8001408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140c:	f7ff f8fc 	bl	8000608 <__aeabi_dmul>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4690      	mov	r8, r2
 8001416:	4699      	mov	r9, r3
 8001418:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800141a:	f7ff f87b 	bl	8000514 <__aeabi_ui2d>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4640      	mov	r0, r8
 8001424:	4649      	mov	r1, r9
 8001426:	f7ff f8ef 	bl	8000608 <__aeabi_dmul>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4690      	mov	r8, r2
 8001430:	4699      	mov	r9, r3
 8001432:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001434:	f7ff f86e 	bl	8000514 <__aeabi_ui2d>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4640      	mov	r0, r8
 800143e:	4649      	mov	r1, r9
 8001440:	f7ff f8e2 	bl	8000608 <__aeabi_dmul>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4620      	mov	r0, r4
 800144a:	4629      	mov	r1, r5
 800144c:	f7fe ff24 	bl	8000298 <__aeabi_dsub>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4614      	mov	r4, r2
 8001456:	461d      	mov	r5, r3
 8001458:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800145a:	f7ff f85b 	bl	8000514 <__aeabi_ui2d>
 800145e:	a390      	add	r3, pc, #576	; (adr r3, 80016a0 <main+0x370>)
 8001460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001464:	f7ff f8d0 	bl	8000608 <__aeabi_dmul>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4690      	mov	r8, r2
 800146e:	4699      	mov	r9, r3
 8001470:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001472:	f7ff f84f 	bl	8000514 <__aeabi_ui2d>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4640      	mov	r0, r8
 800147c:	4649      	mov	r1, r9
 800147e:	f7ff f8c3 	bl	8000608 <__aeabi_dmul>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4620      	mov	r0, r4
 8001488:	4629      	mov	r1, r5
 800148a:	f7fe ff07 	bl	800029c <__adddf3>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4614      	mov	r4, r2
 8001494:	461d      	mov	r5, r3
 8001496:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001498:	f7ff f83c 	bl	8000514 <__aeabi_ui2d>
 800149c:	a382      	add	r3, pc, #520	; (adr r3, 80016a8 <main+0x378>)
 800149e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a2:	f7ff f8b1 	bl	8000608 <__aeabi_dmul>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4620      	mov	r0, r4
 80014ac:	4629      	mov	r1, r5
 80014ae:	f7fe fef5 	bl	800029c <__adddf3>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4610      	mov	r0, r2
 80014b8:	4619      	mov	r1, r3
 80014ba:	f7ff fb7d 	bl	8000bb8 <__aeabi_d2uiz>
 80014be:	4603      	mov	r3, r0
 80014c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		EV = (uint8_t)(log10(lux_als_correction/2.5)/0.3);
 80014c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80014c4:	f7ff f826 	bl	8000514 <__aeabi_ui2d>
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	4b7d      	ldr	r3, [pc, #500]	; (80016c4 <main+0x394>)
 80014ce:	f7ff f9c5 	bl	800085c <__aeabi_ddiv>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	ec43 2b17 	vmov	d7, r2, r3
 80014da:	eeb0 0a47 	vmov.f32	s0, s14
 80014de:	eef0 0a67 	vmov.f32	s1, s15
 80014e2:	f007 fe85 	bl	80091f0 <log10>
 80014e6:	ec51 0b10 	vmov	r0, r1, d0
 80014ea:	a371      	add	r3, pc, #452	; (adr r3, 80016b0 <main+0x380>)
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	f7ff f9b4 	bl	800085c <__aeabi_ddiv>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff fb5c 	bl	8000bb8 <__aeabi_d2uiz>
 8001500:	4603      	mov	r3, r0
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b70      	ldr	r3, [pc, #448]	; (80016c8 <main+0x398>)
 8001506:	701a      	strb	r2, [r3, #0]

		if (state == 0){
 8001508:	4b70      	ldr	r3, [pc, #448]	; (80016cc <main+0x39c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d13c      	bne.n	800158c <main+0x25c>
			exposure_time = (uint16_t)(1.0/((aperture_f*aperture_f)/(pow(2, EV))));
 8001512:	4b6f      	ldr	r3, [pc, #444]	; (80016d0 <main+0x3a0>)
 8001514:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001518:	4b6d      	ldr	r3, [pc, #436]	; (80016d0 <main+0x3a0>)
 800151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151e:	f7ff f873 	bl	8000608 <__aeabi_dmul>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4614      	mov	r4, r2
 8001528:	461d      	mov	r5, r3
 800152a:	4b67      	ldr	r3, [pc, #412]	; (80016c8 <main+0x398>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7fe fff0 	bl	8000514 <__aeabi_ui2d>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	ec43 2b11 	vmov	d1, r2, r3
 800153c:	ed9f 0b5e 	vldr	d0, [pc, #376]	; 80016b8 <main+0x388>
 8001540:	f007 fe94 	bl	800926c <pow>
 8001544:	ec53 2b10 	vmov	r2, r3, d0
 8001548:	4620      	mov	r0, r4
 800154a:	4629      	mov	r1, r5
 800154c:	f7ff f986 	bl	800085c <__aeabi_ddiv>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	f04f 0000 	mov.w	r0, #0
 8001558:	495e      	ldr	r1, [pc, #376]	; (80016d4 <main+0x3a4>)
 800155a:	f7ff f97f 	bl	800085c <__aeabi_ddiv>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff fb27 	bl	8000bb8 <__aeabi_d2uiz>
 800156a:	4603      	mov	r3, r0
 800156c:	b29a      	uxth	r2, r3
 800156e:	4b5a      	ldr	r3, [pc, #360]	; (80016d8 <main+0x3a8>)
 8001570:	801a      	strh	r2, [r3, #0]
			size_t time_list_size = APERTURE_TIME_TABLE_SIZE;
 8001572:	2307      	movs	r3, #7
 8001574:	63bb      	str	r3, [r7, #56]	; 0x38
			exposure_time = the_closest_integer_from_list(exposure_time, exposure_times_list, time_list_size);
 8001576:	4b58      	ldr	r3, [pc, #352]	; (80016d8 <main+0x3a8>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800157c:	4957      	ldr	r1, [pc, #348]	; (80016dc <main+0x3ac>)
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fe44 	bl	800120c <the_closest_integer_from_list>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	4b53      	ldr	r3, [pc, #332]	; (80016d8 <main+0x3a8>)
 800158a:	801a      	strh	r2, [r3, #0]
		}
		if (state == 1){
 800158c:	4b4f      	ldr	r3, [pc, #316]	; (80016cc <main+0x39c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b01      	cmp	r3, #1
 8001594:	d145      	bne.n	8001622 <main+0x2f2>
			aperture_f = sqrt(pow(2,EV)*(1.0/exposure_time));
 8001596:	4b4c      	ldr	r3, [pc, #304]	; (80016c8 <main+0x398>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe ffba 	bl	8000514 <__aeabi_ui2d>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	ec43 2b11 	vmov	d1, r2, r3
 80015a8:	ed9f 0b43 	vldr	d0, [pc, #268]	; 80016b8 <main+0x388>
 80015ac:	f007 fe5e 	bl	800926c <pow>
 80015b0:	ec55 4b10 	vmov	r4, r5, d0
 80015b4:	4b48      	ldr	r3, [pc, #288]	; (80016d8 <main+0x3a8>)
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe ffbb 	bl	8000534 <__aeabi_i2d>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	f04f 0000 	mov.w	r0, #0
 80015c6:	4943      	ldr	r1, [pc, #268]	; (80016d4 <main+0x3a4>)
 80015c8:	f7ff f948 	bl	800085c <__aeabi_ddiv>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4620      	mov	r0, r4
 80015d2:	4629      	mov	r1, r5
 80015d4:	f7ff f818 	bl	8000608 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	ec43 2b17 	vmov	d7, r2, r3
 80015e0:	eeb0 0a47 	vmov.f32	s0, s14
 80015e4:	eef0 0a67 	vmov.f32	s1, s15
 80015e8:	f007 feb0 	bl	800934c <sqrt>
 80015ec:	eeb0 7a40 	vmov.f32	s14, s0
 80015f0:	eef0 7a60 	vmov.f32	s15, s1
 80015f4:	4b36      	ldr	r3, [pc, #216]	; (80016d0 <main+0x3a0>)
 80015f6:	ed83 7b00 	vstr	d7, [r3]
			size_t f_list_size = APERTURE_F_TABLE_SIZE;
 80015fa:	2307      	movs	r3, #7
 80015fc:	637b      	str	r3, [r7, #52]	; 0x34
			aperture_f = the_closest_double_from_list(aperture_f, apertures_f_list, f_list_size);
 80015fe:	4b34      	ldr	r3, [pc, #208]	; (80016d0 <main+0x3a0>)
 8001600:	ed93 7b00 	vldr	d7, [r3]
 8001604:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001606:	4836      	ldr	r0, [pc, #216]	; (80016e0 <main+0x3b0>)
 8001608:	eeb0 0a47 	vmov.f32	s0, s14
 800160c:	eef0 0a67 	vmov.f32	s1, s15
 8001610:	f7ff fe36 	bl	8001280 <the_closest_double_from_list>
 8001614:	eeb0 7a40 	vmov.f32	s14, s0
 8001618:	eef0 7a60 	vmov.f32	s15, s1
 800161c:	4b2c      	ldr	r3, [pc, #176]	; (80016d0 <main+0x3a0>)
 800161e:	ed83 7b00 	vstr	d7, [r3]
		}
		if (state == 2){
 8001622:	4b2a      	ldr	r3, [pc, #168]	; (80016cc <main+0x39c>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d16a      	bne.n	8001702 <main+0x3d2>
			exposure_time = (uint16_t)(1.0/((aperture_f*aperture_f)/(pow(2, EV))));
 800162c:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <main+0x3a0>)
 800162e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001632:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <main+0x3a0>)
 8001634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001638:	f7fe ffe6 	bl	8000608 <__aeabi_dmul>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4614      	mov	r4, r2
 8001642:	461d      	mov	r5, r3
 8001644:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <main+0x398>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe ff63 	bl	8000514 <__aeabi_ui2d>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	ec43 2b11 	vmov	d1, r2, r3
 8001656:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80016b8 <main+0x388>
 800165a:	f007 fe07 	bl	800926c <pow>
 800165e:	ec53 2b10 	vmov	r2, r3, d0
 8001662:	4620      	mov	r0, r4
 8001664:	4629      	mov	r1, r5
 8001666:	f7ff f8f9 	bl	800085c <__aeabi_ddiv>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	f04f 0000 	mov.w	r0, #0
 8001672:	4918      	ldr	r1, [pc, #96]	; (80016d4 <main+0x3a4>)
 8001674:	f7ff f8f2 	bl	800085c <__aeabi_ddiv>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4610      	mov	r0, r2
 800167e:	4619      	mov	r1, r3
 8001680:	f7ff fa9a 	bl	8000bb8 <__aeabi_d2uiz>
 8001684:	4603      	mov	r3, r0
 8001686:	b29a      	uxth	r2, r3
 8001688:	e02c      	b.n	80016e4 <main+0x3b4>
 800168a:	bf00      	nop
 800168c:	f3af 8000 	nop.w
 8001690:	b18f283b 	.word	0xb18f283b
 8001694:	3d65287a 	.word	0x3d65287a
 8001698:	c91ef46e 	.word	0xc91ef46e
 800169c:	3e442b86 	.word	0x3e442b86
 80016a0:	2e18cab0 	.word	0x2e18cab0
 80016a4:	3f155c91 	.word	0x3f155c91
 80016a8:	b98c7e28 	.word	0xb98c7e28
 80016ac:	3ff0096b 	.word	0x3ff0096b
 80016b0:	33333333 	.word	0x33333333
 80016b4:	3fd33333 	.word	0x3fd33333
 80016b8:	00000000 	.word	0x00000000
 80016bc:	40000000 	.word	0x40000000
 80016c0:	20000728 	.word	0x20000728
 80016c4:	40040000 	.word	0x40040000
 80016c8:	200002c0 	.word	0x200002c0
 80016cc:	200002b8 	.word	0x200002b8
 80016d0:	20000050 	.word	0x20000050
 80016d4:	3ff00000 	.word	0x3ff00000
 80016d8:	20000058 	.word	0x20000058
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000010 	.word	0x20000010
 80016e4:	4b30      	ldr	r3, [pc, #192]	; (80017a8 <main+0x478>)
 80016e6:	801a      	strh	r2, [r3, #0]
			size_t time_list_size = APERTURE_TIME_TABLE_SIZE;
 80016e8:	2307      	movs	r3, #7
 80016ea:	633b      	str	r3, [r7, #48]	; 0x30
			exposure_time = the_closest_integer_from_list(exposure_time, exposure_times_list, time_list_size);
 80016ec:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <main+0x478>)
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016f2:	492e      	ldr	r1, [pc, #184]	; (80017ac <main+0x47c>)
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fd89 	bl	800120c <the_closest_integer_from_list>
 80016fa:	4603      	mov	r3, r0
 80016fc:	461a      	mov	r2, r3
 80016fe:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <main+0x478>)
 8001700:	801a      	strh	r2, [r3, #0]
		}

		char lux_screen[11];
		char EV_screen[6];

		sprintf(lux_screen,"LUX:%06d", lux_als_correction);
 8001702:	f107 031c 	add.w	r3, r7, #28
 8001706:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001708:	4929      	ldr	r1, [pc, #164]	; (80017b0 <main+0x480>)
 800170a:	4618      	mov	r0, r3
 800170c:	f005 fc10 	bl	8006f30 <siprintf>
		sprintf(EV_screen,"EV:%02d", EV);
 8001710:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <main+0x484>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4927      	ldr	r1, [pc, #156]	; (80017b8 <main+0x488>)
 800171c:	4618      	mov	r0, r3
 800171e:	f005 fc07 	bl	8006f30 <siprintf>
		ssd1306_SetCursor(0, 10);
 8001722:	210a      	movs	r1, #10
 8001724:	2000      	movs	r0, #0
 8001726:	f000 fca9 	bl	800207c <ssd1306_SetCursor>
		ssd1306_WriteString(EV_screen, Font_6x8, White);
 800172a:	4b24      	ldr	r3, [pc, #144]	; (80017bc <main+0x48c>)
 800172c:	f107 0014 	add.w	r0, r7, #20
 8001730:	2201      	movs	r2, #1
 8001732:	9200      	str	r2, [sp, #0]
 8001734:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001736:	f000 fc7b 	bl	8002030 <ssd1306_WriteString>
		ssd1306_SetCursor(60, 10);
 800173a:	210a      	movs	r1, #10
 800173c:	203c      	movs	r0, #60	; 0x3c
 800173e:	f000 fc9d 	bl	800207c <ssd1306_SetCursor>
		ssd1306_WriteString(lux_screen, Font_6x8, White);
 8001742:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <main+0x48c>)
 8001744:	f107 001c 	add.w	r0, r7, #28
 8001748:	2201      	movs	r2, #1
 800174a:	9200      	str	r2, [sp, #0]
 800174c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800174e:	f000 fc6f 	bl	8002030 <ssd1306_WriteString>

		char aperture_screen[8];
		char time_screen[9];
		sprintf(aperture_screen,"f/%.1f", aperture_f);
 8001752:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <main+0x490>)
 8001754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001758:	f107 000c 	add.w	r0, r7, #12
 800175c:	4919      	ldr	r1, [pc, #100]	; (80017c4 <main+0x494>)
 800175e:	f005 fbe7 	bl	8006f30 <siprintf>
		sprintf(time_screen,"1/%3d [s]", exposure_time);
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <main+0x478>)
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	463b      	mov	r3, r7
 800176a:	4917      	ldr	r1, [pc, #92]	; (80017c8 <main+0x498>)
 800176c:	4618      	mov	r0, r3
 800176e:	f005 fbdf 	bl	8006f30 <siprintf>
		ssd1306_SetCursor(10, 50);
 8001772:	2132      	movs	r1, #50	; 0x32
 8001774:	200a      	movs	r0, #10
 8001776:	f000 fc81 	bl	800207c <ssd1306_SetCursor>
		ssd1306_WriteString(aperture_screen, Font_6x8, White);
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <main+0x48c>)
 800177c:	f107 000c 	add.w	r0, r7, #12
 8001780:	2201      	movs	r2, #1
 8001782:	9200      	str	r2, [sp, #0]
 8001784:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001786:	f000 fc53 	bl	8002030 <ssd1306_WriteString>
		ssd1306_SetCursor(70, 50);
 800178a:	2132      	movs	r1, #50	; 0x32
 800178c:	2046      	movs	r0, #70	; 0x46
 800178e:	f000 fc75 	bl	800207c <ssd1306_SetCursor>
		ssd1306_WriteString(time_screen, Font_6x8, White);
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <main+0x48c>)
 8001794:	4638      	mov	r0, r7
 8001796:	2201      	movs	r2, #1
 8001798:	9200      	str	r2, [sp, #0]
 800179a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800179c:	f000 fc48 	bl	8002030 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80017a0:	f000 fb38 	bl	8001e14 <ssd1306_UpdateScreen>
	{
 80017a4:	e5ed      	b.n	8001382 <main+0x52>
 80017a6:	bf00      	nop
 80017a8:	20000058 	.word	0x20000058
 80017ac:	20000000 	.word	0x20000000
 80017b0:	0800a610 	.word	0x0800a610
 80017b4:	200002c0 	.word	0x200002c0
 80017b8:	0800a61c 	.word	0x0800a61c
 80017bc:	0800ac28 	.word	0x0800ac28
 80017c0:	20000050 	.word	0x20000050
 80017c4:	0800a624 	.word	0x0800a624
 80017c8:	0800a62c 	.word	0x0800a62c

080017cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b094      	sub	sp, #80	; 0x50
 80017d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d2:	f107 0320 	add.w	r3, r7, #32
 80017d6:	2230      	movs	r2, #48	; 0x30
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f005 fc0b 	bl	8006ff6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	4b28      	ldr	r3, [pc, #160]	; (8001898 <SystemClock_Config+0xcc>)
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	4a27      	ldr	r2, [pc, #156]	; (8001898 <SystemClock_Config+0xcc>)
 80017fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001800:	4b25      	ldr	r3, [pc, #148]	; (8001898 <SystemClock_Config+0xcc>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800180c:	2300      	movs	r3, #0
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	4b22      	ldr	r3, [pc, #136]	; (800189c <SystemClock_Config+0xd0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a21      	ldr	r2, [pc, #132]	; (800189c <SystemClock_Config+0xd0>)
 8001816:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <SystemClock_Config+0xd0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001828:	2302      	movs	r3, #2
 800182a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800182c:	2301      	movs	r3, #1
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001830:	2310      	movs	r3, #16
 8001832:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001834:	2302      	movs	r3, #2
 8001836:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001838:	2300      	movs	r3, #0
 800183a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800183c:	2308      	movs	r3, #8
 800183e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001840:	23c0      	movs	r3, #192	; 0xc0
 8001842:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001844:	2304      	movs	r3, #4
 8001846:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001848:	2308      	movs	r3, #8
 800184a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800184c:	f107 0320 	add.w	r3, r7, #32
 8001850:	4618      	mov	r0, r3
 8001852:	f002 ff35 	bl	80046c0 <HAL_RCC_OscConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800185c:	f000 f970 	bl	8001b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001860:	230f      	movs	r3, #15
 8001862:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001864:	2302      	movs	r3, #2
 8001866:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800186c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001870:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001876:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	2103      	movs	r1, #3
 800187e:	4618      	mov	r0, r3
 8001880:	f003 f996 	bl	8004bb0 <HAL_RCC_ClockConfig>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800188a:	f000 f959 	bl	8001b40 <Error_Handler>
  }
}
 800188e:	bf00      	nop
 8001890:	3750      	adds	r7, #80	; 0x50
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800
 800189c:	40007000 	.word	0x40007000

080018a0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	4603      	mov	r3, r0
 80018a8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_6){
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	2b40      	cmp	r3, #64	; 0x40
 80018ae:	d141      	bne.n	8001934 <HAL_GPIO_EXTI_Callback+0x94>
		state = (state+1)%SETTINGS_NUMBER;
 80018b0:	4b22      	ldr	r3, [pc, #136]	; (800193c <HAL_GPIO_EXTI_Callback+0x9c>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	3301      	adds	r3, #1
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	bfb8      	it	lt
 80018c0:	425b      	neglt	r3, r3
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	4b1d      	ldr	r3, [pc, #116]	; (800193c <HAL_GPIO_EXTI_Callback+0x9c>)
 80018c6:	701a      	strb	r2, [r3, #0]
		if(state == 0){
 80018c8:	4b1c      	ldr	r3, [pc, #112]	; (800193c <HAL_GPIO_EXTI_Callback+0x9c>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d118      	bne.n	8001904 <HAL_GPIO_EXTI_Callback+0x64>
			ssd1306_DrawRectangle(exposure_coordinates.x1, exposure_coordinates.y1, exposure_coordinates.x2, exposure_coordinates.y2, Black);
 80018d2:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <HAL_GPIO_EXTI_Callback+0xa0>)
 80018d4:	7818      	ldrb	r0, [r3, #0]
 80018d6:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <HAL_GPIO_EXTI_Callback+0xa0>)
 80018d8:	7899      	ldrb	r1, [r3, #2]
 80018da:	4b19      	ldr	r3, [pc, #100]	; (8001940 <HAL_GPIO_EXTI_Callback+0xa0>)
 80018dc:	785a      	ldrb	r2, [r3, #1]
 80018de:	4b18      	ldr	r3, [pc, #96]	; (8001940 <HAL_GPIO_EXTI_Callback+0xa0>)
 80018e0:	78db      	ldrb	r3, [r3, #3]
 80018e2:	2400      	movs	r4, #0
 80018e4:	9400      	str	r4, [sp, #0]
 80018e6:	f000 fc4d 	bl	8002184 <ssd1306_DrawRectangle>
			ssd1306_DrawRectangle(aperture_coordinates.x1, aperture_coordinates.y1, aperture_coordinates.x2, aperture_coordinates.y2, White);
 80018ea:	4b16      	ldr	r3, [pc, #88]	; (8001944 <HAL_GPIO_EXTI_Callback+0xa4>)
 80018ec:	7818      	ldrb	r0, [r3, #0]
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <HAL_GPIO_EXTI_Callback+0xa4>)
 80018f0:	7899      	ldrb	r1, [r3, #2]
 80018f2:	4b14      	ldr	r3, [pc, #80]	; (8001944 <HAL_GPIO_EXTI_Callback+0xa4>)
 80018f4:	785a      	ldrb	r2, [r3, #1]
 80018f6:	4b13      	ldr	r3, [pc, #76]	; (8001944 <HAL_GPIO_EXTI_Callback+0xa4>)
 80018f8:	78db      	ldrb	r3, [r3, #3]
 80018fa:	2401      	movs	r4, #1
 80018fc:	9400      	str	r4, [sp, #0]
 80018fe:	f000 fc41 	bl	8002184 <ssd1306_DrawRectangle>
			ssd1306_DrawRectangle(aperture_coordinates.x1, aperture_coordinates.y1, aperture_coordinates.x2, aperture_coordinates.y2, Black);
			ssd1306_DrawRectangle(exposure_coordinates.x1, exposure_coordinates.y1, exposure_coordinates.x2, exposure_coordinates.y2, White);
		}
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
	}
}
 8001902:	e017      	b.n	8001934 <HAL_GPIO_EXTI_Callback+0x94>
			ssd1306_DrawRectangle(aperture_coordinates.x1, aperture_coordinates.y1, aperture_coordinates.x2, aperture_coordinates.y2, Black);
 8001904:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001906:	7818      	ldrb	r0, [r3, #0]
 8001908:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <HAL_GPIO_EXTI_Callback+0xa4>)
 800190a:	7899      	ldrb	r1, [r3, #2]
 800190c:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <HAL_GPIO_EXTI_Callback+0xa4>)
 800190e:	785a      	ldrb	r2, [r3, #1]
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001912:	78db      	ldrb	r3, [r3, #3]
 8001914:	2400      	movs	r4, #0
 8001916:	9400      	str	r4, [sp, #0]
 8001918:	f000 fc34 	bl	8002184 <ssd1306_DrawRectangle>
			ssd1306_DrawRectangle(exposure_coordinates.x1, exposure_coordinates.y1, exposure_coordinates.x2, exposure_coordinates.y2, White);
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_GPIO_EXTI_Callback+0xa0>)
 800191e:	7818      	ldrb	r0, [r3, #0]
 8001920:	4b07      	ldr	r3, [pc, #28]	; (8001940 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001922:	7899      	ldrb	r1, [r3, #2]
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001926:	785a      	ldrb	r2, [r3, #1]
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_GPIO_EXTI_Callback+0xa0>)
 800192a:	78db      	ldrb	r3, [r3, #3]
 800192c:	2401      	movs	r4, #1
 800192e:	9400      	str	r4, [sp, #0]
 8001930:	f000 fc28 	bl	8002184 <ssd1306_DrawRectangle>
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bd90      	pop	{r4, r7, pc}
 800193c:	200002b8 	.word	0x200002b8
 8001940:	2000004c 	.word	0x2000004c
 8001944:	20000048 	.word	0x20000048

08001948 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001948:	b5b0      	push	{r4, r5, r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	if(htim==&htim2){
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a6f      	ldr	r2, [pc, #444]	; (8001b10 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8001954:	4293      	cmp	r3, r2
 8001956:	f040 80d2 	bne.w	8001afe <HAL_TIM_IC_CaptureCallback+0x1b6>

		switch (HAL_TIM_GetActiveChannel(&htim2)){
 800195a:	486d      	ldr	r0, [pc, #436]	; (8001b10 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 800195c:	f004 f9bc 	bl	8005cd8 <HAL_TIM_GetActiveChannel>
 8001960:	4603      	mov	r3, r0
 8001962:	2b01      	cmp	r3, #1
 8001964:	d002      	beq.n	800196c <HAL_TIM_IC_CaptureCallback+0x24>
 8001966:	2b02      	cmp	r3, #2
 8001968:	d008      	beq.n	800197c <HAL_TIM_IC_CaptureCallback+0x34>

		case HAL_TIM_ACTIVE_CHANNEL_2:
			counter = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
			break;
		default:
			break;
 800196a:	e00f      	b.n	800198c <HAL_TIM_IC_CaptureCallback+0x44>
			counter = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 800196c:	2100      	movs	r1, #0
 800196e:	4868      	ldr	r0, [pc, #416]	; (8001b10 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8001970:	f004 f946 	bl	8005c00 <HAL_TIM_ReadCapturedValue>
 8001974:	4603      	mov	r3, r0
 8001976:	4a67      	ldr	r2, [pc, #412]	; (8001b14 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8001978:	6013      	str	r3, [r2, #0]
			break;
 800197a:	e007      	b.n	800198c <HAL_TIM_IC_CaptureCallback+0x44>
			counter = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 800197c:	2104      	movs	r1, #4
 800197e:	4864      	ldr	r0, [pc, #400]	; (8001b10 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8001980:	f004 f93e 	bl	8005c00 <HAL_TIM_ReadCapturedValue>
 8001984:	4603      	mov	r3, r0
 8001986:	4a63      	ldr	r2, [pc, #396]	; (8001b14 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8001988:	6013      	str	r3, [r2, #0]
			break;
 800198a:	bf00      	nop
		}
		if(state==0){
 800198c:	4b62      	ldr	r3, [pc, #392]	; (8001b18 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d155      	bne.n	8001a42 <HAL_TIM_IC_CaptureCallback+0xfa>
			//change aperture -> recalculate aperture time
			aperture_f_list_index = counter%APERTURE_F_TABLE_SIZE;
 8001996:	4b5f      	ldr	r3, [pc, #380]	; (8001b14 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4b60      	ldr	r3, [pc, #384]	; (8001b1c <HAL_TIM_IC_CaptureCallback+0x1d4>)
 800199c:	fba3 1302 	umull	r1, r3, r3, r2
 80019a0:	1ad1      	subs	r1, r2, r3
 80019a2:	0849      	lsrs	r1, r1, #1
 80019a4:	440b      	add	r3, r1
 80019a6:	0899      	lsrs	r1, r3, #2
 80019a8:	460b      	mov	r3, r1
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	1a5b      	subs	r3, r3, r1
 80019ae:	1ad1      	subs	r1, r2, r3
 80019b0:	b2ca      	uxtb	r2, r1
 80019b2:	4b5b      	ldr	r3, [pc, #364]	; (8001b20 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 80019b4:	701a      	strb	r2, [r3, #0]
			aperture_f = apertures_f_list[aperture_f_list_index];
 80019b6:	4b5a      	ldr	r3, [pc, #360]	; (8001b20 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	4a5a      	ldr	r2, [pc, #360]	; (8001b24 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	4413      	add	r3, r2
 80019c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c4:	4958      	ldr	r1, [pc, #352]	; (8001b28 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 80019c6:	e9c1 2300 	strd	r2, r3, [r1]
			exposure_time = (uint16_t)(1.0/((aperture_f*aperture_f)/(pow(2, EV))));
 80019ca:	4b57      	ldr	r3, [pc, #348]	; (8001b28 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 80019cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019d0:	4b55      	ldr	r3, [pc, #340]	; (8001b28 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 80019d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d6:	f7fe fe17 	bl	8000608 <__aeabi_dmul>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4614      	mov	r4, r2
 80019e0:	461d      	mov	r5, r3
 80019e2:	4b52      	ldr	r3, [pc, #328]	; (8001b2c <HAL_TIM_IC_CaptureCallback+0x1e4>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fd94 	bl	8000514 <__aeabi_ui2d>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	ec43 2b11 	vmov	d1, r2, r3
 80019f4:	ed9f 0b44 	vldr	d0, [pc, #272]	; 8001b08 <HAL_TIM_IC_CaptureCallback+0x1c0>
 80019f8:	f007 fc38 	bl	800926c <pow>
 80019fc:	ec53 2b10 	vmov	r2, r3, d0
 8001a00:	4620      	mov	r0, r4
 8001a02:	4629      	mov	r1, r5
 8001a04:	f7fe ff2a 	bl	800085c <__aeabi_ddiv>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	f04f 0000 	mov.w	r0, #0
 8001a10:	4947      	ldr	r1, [pc, #284]	; (8001b30 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 8001a12:	f7fe ff23 	bl	800085c <__aeabi_ddiv>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f7ff f8cb 	bl	8000bb8 <__aeabi_d2uiz>
 8001a22:	4603      	mov	r3, r0
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	4b43      	ldr	r3, [pc, #268]	; (8001b34 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 8001a28:	801a      	strh	r2, [r3, #0]
			exposure_time = the_closest_integer_from_list(exposure_time, exposure_times_list, APERTURE_TIME_TABLE_SIZE);
 8001a2a:	4b42      	ldr	r3, [pc, #264]	; (8001b34 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	2207      	movs	r2, #7
 8001a30:	4941      	ldr	r1, [pc, #260]	; (8001b38 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fbea 	bl	800120c <the_closest_integer_from_list>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	4b3d      	ldr	r3, [pc, #244]	; (8001b34 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 8001a3e:	801a      	strh	r2, [r3, #0]
			exposure_time = exposure_times_list[exposure_time_list_index];
			aperture_f = sqrt(pow(2,EV)*(1/exposure_time));
			aperture_f = the_closest_double_from_list(aperture_f, apertures_f_list, APERTURE_F_TABLE_SIZE);
		}
	}
}
 8001a40:	e05d      	b.n	8001afe <HAL_TIM_IC_CaptureCallback+0x1b6>
		else if(state==1){
 8001a42:	4b35      	ldr	r3, [pc, #212]	; (8001b18 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d158      	bne.n	8001afe <HAL_TIM_IC_CaptureCallback+0x1b6>
			exposure_time_list_index = counter%APERTURE_TIME_TABLE_SIZE;
 8001a4c:	4b31      	ldr	r3, [pc, #196]	; (8001b14 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b32      	ldr	r3, [pc, #200]	; (8001b1c <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8001a52:	fba3 1302 	umull	r1, r3, r3, r2
 8001a56:	1ad1      	subs	r1, r2, r3
 8001a58:	0849      	lsrs	r1, r1, #1
 8001a5a:	440b      	add	r3, r1
 8001a5c:	0899      	lsrs	r1, r3, #2
 8001a5e:	460b      	mov	r3, r1
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	1a5b      	subs	r3, r3, r1
 8001a64:	1ad1      	subs	r1, r2, r3
 8001a66:	b2ca      	uxtb	r2, r1
 8001a68:	4b34      	ldr	r3, [pc, #208]	; (8001b3c <HAL_TIM_IC_CaptureCallback+0x1f4>)
 8001a6a:	701a      	strb	r2, [r3, #0]
			exposure_time = exposure_times_list[exposure_time_list_index];
 8001a6c:	4b33      	ldr	r3, [pc, #204]	; (8001b3c <HAL_TIM_IC_CaptureCallback+0x1f4>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b31      	ldr	r3, [pc, #196]	; (8001b38 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8001a74:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001a78:	4b2e      	ldr	r3, [pc, #184]	; (8001b34 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 8001a7a:	801a      	strh	r2, [r3, #0]
			aperture_f = sqrt(pow(2,EV)*(1/exposure_time));
 8001a7c:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <HAL_TIM_IC_CaptureCallback+0x1e4>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fd47 	bl	8000514 <__aeabi_ui2d>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	ec43 2b11 	vmov	d1, r2, r3
 8001a8e:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8001b08 <HAL_TIM_IC_CaptureCallback+0x1c0>
 8001a92:	f007 fbeb 	bl	800926c <pow>
 8001a96:	ec55 4b10 	vmov	r4, r5, d0
 8001a9a:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	fb93 f3f2 	sdiv	r3, r3, r2
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fd44 	bl	8000534 <__aeabi_i2d>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	4629      	mov	r1, r5
 8001ab4:	f7fe fda8 	bl	8000608 <__aeabi_dmul>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	ec43 2b17 	vmov	d7, r2, r3
 8001ac0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ac4:	eef0 0a67 	vmov.f32	s1, s15
 8001ac8:	f007 fc40 	bl	800934c <sqrt>
 8001acc:	eeb0 7a40 	vmov.f32	s14, s0
 8001ad0:	eef0 7a60 	vmov.f32	s15, s1
 8001ad4:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8001ad6:	ed83 7b00 	vstr	d7, [r3]
			aperture_f = the_closest_double_from_list(aperture_f, apertures_f_list, APERTURE_F_TABLE_SIZE);
 8001ada:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8001adc:	ed93 7b00 	vldr	d7, [r3]
 8001ae0:	2107      	movs	r1, #7
 8001ae2:	4810      	ldr	r0, [pc, #64]	; (8001b24 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8001ae4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ae8:	eef0 0a67 	vmov.f32	s1, s15
 8001aec:	f7ff fbc8 	bl	8001280 <the_closest_double_from_list>
 8001af0:	eeb0 7a40 	vmov.f32	s14, s0
 8001af4:	eef0 7a60 	vmov.f32	s15, s1
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8001afa:	ed83 7b00 	vstr	d7, [r3]
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bdb0      	pop	{r4, r5, r7, pc}
 8001b06:	bf00      	nop
 8001b08:	00000000 	.word	0x00000000
 8001b0c:	40000000 	.word	0x40000000
 8001b10:	20000728 	.word	0x20000728
 8001b14:	200002bc 	.word	0x200002bc
 8001b18:	200002b8 	.word	0x200002b8
 8001b1c:	24924925 	.word	0x24924925
 8001b20:	200002c1 	.word	0x200002c1
 8001b24:	20000010 	.word	0x20000010
 8001b28:	20000050 	.word	0x20000050
 8001b2c:	200002c0 	.word	0x200002c0
 8001b30:	3ff00000 	.word	0x3ff00000
 8001b34:	20000058 	.word	0x20000058
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	2000005a 	.word	0x2000005a

08001b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b44:	b672      	cpsid	i
}
 8001b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001b48:	e7fe      	b.n	8001b48 <Error_Handler+0x8>
	...

08001b4c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001b50:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <MX_SPI2_Init+0x64>)
 8001b52:	4a18      	ldr	r2, [pc, #96]	; (8001bb4 <MX_SPI2_Init+0x68>)
 8001b54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b56:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <MX_SPI2_Init+0x64>)
 8001b58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b5e:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <MX_SPI2_Init+0x64>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <MX_SPI2_Init+0x64>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <MX_SPI2_Init+0x64>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <MX_SPI2_Init+0x64>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b76:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <MX_SPI2_Init+0x64>)
 8001b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b7c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b7e:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <MX_SPI2_Init+0x64>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b84:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <MX_SPI2_Init+0x64>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <MX_SPI2_Init+0x64>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b90:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <MX_SPI2_Init+0x64>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <MX_SPI2_Init+0x64>)
 8001b98:	220a      	movs	r2, #10
 8001b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b9c:	4804      	ldr	r0, [pc, #16]	; (8001bb0 <MX_SPI2_Init+0x64>)
 8001b9e:	f003 fa27 	bl	8004ff0 <HAL_SPI_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ba8:	f7ff ffca 	bl	8001b40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	200002c4 	.word	0x200002c4
 8001bb4:	40003800 	.word	0x40003800

08001bb8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	; 0x28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a19      	ldr	r2, [pc, #100]	; (8001c3c <HAL_SPI_MspInit+0x84>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d12c      	bne.n	8001c34 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <HAL_SPI_MspInit+0x88>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	4a17      	ldr	r2, [pc, #92]	; (8001c40 <HAL_SPI_MspInit+0x88>)
 8001be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <HAL_SPI_MspInit+0x88>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <HAL_SPI_MspInit+0x88>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a10      	ldr	r2, [pc, #64]	; (8001c40 <HAL_SPI_MspInit+0x88>)
 8001c00:	f043 0302 	orr.w	r3, r3, #2
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <HAL_SPI_MspInit+0x88>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001c12:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c20:	2303      	movs	r3, #3
 8001c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c24:	2305      	movs	r3, #5
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4805      	ldr	r0, [pc, #20]	; (8001c44 <HAL_SPI_MspInit+0x8c>)
 8001c30:	f001 f850 	bl	8002cd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001c34:	bf00      	nop
 8001c36:	3728      	adds	r7, #40	; 0x28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40003800 	.word	0x40003800
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40020400 	.word	0x40020400

08001c48 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	2110      	movs	r1, #16
 8001c50:	480a      	ldr	r0, [pc, #40]	; (8001c7c <ssd1306_Reset+0x34>)
 8001c52:	f001 f9c3 	bl	8002fdc <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2104      	movs	r1, #4
 8001c5a:	4808      	ldr	r0, [pc, #32]	; (8001c7c <ssd1306_Reset+0x34>)
 8001c5c:	f001 f9be 	bl	8002fdc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001c60:	200a      	movs	r0, #10
 8001c62:	f000 fec3 	bl	80029ec <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8001c66:	2201      	movs	r2, #1
 8001c68:	2104      	movs	r1, #4
 8001c6a:	4804      	ldr	r0, [pc, #16]	; (8001c7c <ssd1306_Reset+0x34>)
 8001c6c:	f001 f9b6 	bl	8002fdc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001c70:	200a      	movs	r0, #10
 8001c72:	f000 febb 	bl	80029ec <HAL_Delay>
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40020c00 	.word	0x40020c00

08001c80 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2110      	movs	r1, #16
 8001c8e:	480c      	ldr	r0, [pc, #48]	; (8001cc0 <ssd1306_WriteCommand+0x40>)
 8001c90:	f001 f9a4 	bl	8002fdc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8001c94:	2200      	movs	r2, #0
 8001c96:	2108      	movs	r1, #8
 8001c98:	4809      	ldr	r0, [pc, #36]	; (8001cc0 <ssd1306_WriteCommand+0x40>)
 8001c9a:	f001 f99f 	bl	8002fdc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8001c9e:	1df9      	adds	r1, r7, #7
 8001ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	4807      	ldr	r0, [pc, #28]	; (8001cc4 <ssd1306_WriteCommand+0x44>)
 8001ca8:	f003 fa2b 	bl	8005102 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001cac:	2201      	movs	r2, #1
 8001cae:	2110      	movs	r1, #16
 8001cb0:	4803      	ldr	r0, [pc, #12]	; (8001cc0 <ssd1306_WriteCommand+0x40>)
 8001cb2:	f001 f993 	bl	8002fdc <HAL_GPIO_WritePin>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40020c00 	.word	0x40020c00
 8001cc4:	200002c4 	.word	0x200002c4

08001cc8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2110      	movs	r1, #16
 8001cd6:	480c      	ldr	r0, [pc, #48]	; (8001d08 <ssd1306_WriteData+0x40>)
 8001cd8:	f001 f980 	bl	8002fdc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8001cdc:	2201      	movs	r2, #1
 8001cde:	2108      	movs	r1, #8
 8001ce0:	4809      	ldr	r0, [pc, #36]	; (8001d08 <ssd1306_WriteData+0x40>)
 8001ce2:	f001 f97b 	bl	8002fdc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	4806      	ldr	r0, [pc, #24]	; (8001d0c <ssd1306_WriteData+0x44>)
 8001cf2:	f003 fa06 	bl	8005102 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	2110      	movs	r1, #16
 8001cfa:	4803      	ldr	r0, [pc, #12]	; (8001d08 <ssd1306_WriteData+0x40>)
 8001cfc:	f001 f96e 	bl	8002fdc <HAL_GPIO_WritePin>
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40020c00 	.word	0x40020c00
 8001d0c:	200002c4 	.word	0x200002c4

08001d10 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001d14:	f7ff ff98 	bl	8001c48 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001d18:	2064      	movs	r0, #100	; 0x64
 8001d1a:	f000 fe67 	bl	80029ec <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f000 fa7a 	bl	8002218 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001d24:	2020      	movs	r0, #32
 8001d26:	f7ff ffab 	bl	8001c80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f7ff ffa8 	bl	8001c80 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001d30:	20b0      	movs	r0, #176	; 0xb0
 8001d32:	f7ff ffa5 	bl	8001c80 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001d36:	20c8      	movs	r0, #200	; 0xc8
 8001d38:	f7ff ffa2 	bl	8001c80 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f7ff ff9f 	bl	8001c80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001d42:	2010      	movs	r0, #16
 8001d44:	f7ff ff9c 	bl	8001c80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001d48:	2040      	movs	r0, #64	; 0x40
 8001d4a:	f7ff ff99 	bl	8001c80 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001d4e:	20ff      	movs	r0, #255	; 0xff
 8001d50:	f000 fa4f 	bl	80021f2 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001d54:	20a1      	movs	r0, #161	; 0xa1
 8001d56:	f7ff ff93 	bl	8001c80 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001d5a:	20a6      	movs	r0, #166	; 0xa6
 8001d5c:	f7ff ff90 	bl	8001c80 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001d60:	20a8      	movs	r0, #168	; 0xa8
 8001d62:	f7ff ff8d 	bl	8001c80 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001d66:	203f      	movs	r0, #63	; 0x3f
 8001d68:	f7ff ff8a 	bl	8001c80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001d6c:	20a4      	movs	r0, #164	; 0xa4
 8001d6e:	f7ff ff87 	bl	8001c80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001d72:	20d3      	movs	r0, #211	; 0xd3
 8001d74:	f7ff ff84 	bl	8001c80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f7ff ff81 	bl	8001c80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001d7e:	20d5      	movs	r0, #213	; 0xd5
 8001d80:	f7ff ff7e 	bl	8001c80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001d84:	20f0      	movs	r0, #240	; 0xf0
 8001d86:	f7ff ff7b 	bl	8001c80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001d8a:	20d9      	movs	r0, #217	; 0xd9
 8001d8c:	f7ff ff78 	bl	8001c80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001d90:	2022      	movs	r0, #34	; 0x22
 8001d92:	f7ff ff75 	bl	8001c80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001d96:	20da      	movs	r0, #218	; 0xda
 8001d98:	f7ff ff72 	bl	8001c80 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001d9c:	2012      	movs	r0, #18
 8001d9e:	f7ff ff6f 	bl	8001c80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001da2:	20db      	movs	r0, #219	; 0xdb
 8001da4:	f7ff ff6c 	bl	8001c80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001da8:	2020      	movs	r0, #32
 8001daa:	f7ff ff69 	bl	8001c80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001dae:	208d      	movs	r0, #141	; 0x8d
 8001db0:	f7ff ff66 	bl	8001c80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001db4:	2014      	movs	r0, #20
 8001db6:	f7ff ff63 	bl	8001c80 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001dba:	2001      	movs	r0, #1
 8001dbc:	f000 fa2c 	bl	8002218 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f000 f80f 	bl	8001de4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001dc6:	f000 f825 	bl	8001e14 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001dca:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <ssd1306_Init+0xd0>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001dd0:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <ssd1306_Init+0xd0>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001dd6:	4b02      	ldr	r3, [pc, #8]	; (8001de0 <ssd1306_Init+0xd0>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	711a      	strb	r2, [r3, #4]
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	2000071c 	.word	0x2000071c

08001de4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <ssd1306_Fill+0x14>
 8001df4:	2300      	movs	r3, #0
 8001df6:	e000      	b.n	8001dfa <ssd1306_Fill+0x16>
 8001df8:	23ff      	movs	r3, #255	; 0xff
 8001dfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4803      	ldr	r0, [pc, #12]	; (8001e10 <ssd1306_Fill+0x2c>)
 8001e02:	f005 f8f8 	bl	8006ff6 <memset>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	2000031c 	.word	0x2000031c

08001e14 <ssd1306_UpdateScreen>:
//
//  * 32px   ==  4 pages
//  * 64px   ==  8 pages
//  * 128px  ==  16 pages

void ssd1306_UpdateScreen(void) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	71fb      	strb	r3, [r7, #7]
 8001e1e:	e016      	b.n	8001e4e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	3b50      	subs	r3, #80	; 0x50
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ff2a 	bl	8001c80 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f7ff ff27 	bl	8001c80 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001e32:	2010      	movs	r0, #16
 8001e34:	f7ff ff24 	bl	8001c80 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	01db      	lsls	r3, r3, #7
 8001e3c:	4a08      	ldr	r2, [pc, #32]	; (8001e60 <ssd1306_UpdateScreen+0x4c>)
 8001e3e:	4413      	add	r3, r2
 8001e40:	2180      	movs	r1, #128	; 0x80
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff ff40 	bl	8001cc8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	71fb      	strb	r3, [r7, #7]
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	2b07      	cmp	r3, #7
 8001e52:	d9e5      	bls.n	8001e20 <ssd1306_UpdateScreen+0xc>
    }
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	2000031c 	.word	0x2000031c

08001e64 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	71bb      	strb	r3, [r7, #6]
 8001e72:	4613      	mov	r3, r2
 8001e74:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	db3d      	blt.n	8001efa <ssd1306_DrawPixel+0x96>
 8001e7e:	79bb      	ldrb	r3, [r7, #6]
 8001e80:	2b3f      	cmp	r3, #63	; 0x3f
 8001e82:	d83a      	bhi.n	8001efa <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001e84:	797b      	ldrb	r3, [r7, #5]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d11a      	bne.n	8001ec0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001e8a:	79fa      	ldrb	r2, [r7, #7]
 8001e8c:	79bb      	ldrb	r3, [r7, #6]
 8001e8e:	08db      	lsrs	r3, r3, #3
 8001e90:	b2d8      	uxtb	r0, r3
 8001e92:	4603      	mov	r3, r0
 8001e94:	01db      	lsls	r3, r3, #7
 8001e96:	4413      	add	r3, r2
 8001e98:	4a1b      	ldr	r2, [pc, #108]	; (8001f08 <ssd1306_DrawPixel+0xa4>)
 8001e9a:	5cd3      	ldrb	r3, [r2, r3]
 8001e9c:	b25a      	sxtb	r2, r3
 8001e9e:	79bb      	ldrb	r3, [r7, #6]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	b25b      	sxtb	r3, r3
 8001eac:	4313      	orrs	r3, r2
 8001eae:	b259      	sxtb	r1, r3
 8001eb0:	79fa      	ldrb	r2, [r7, #7]
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	01db      	lsls	r3, r3, #7
 8001eb6:	4413      	add	r3, r2
 8001eb8:	b2c9      	uxtb	r1, r1
 8001eba:	4a13      	ldr	r2, [pc, #76]	; (8001f08 <ssd1306_DrawPixel+0xa4>)
 8001ebc:	54d1      	strb	r1, [r2, r3]
 8001ebe:	e01d      	b.n	8001efc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ec0:	79fa      	ldrb	r2, [r7, #7]
 8001ec2:	79bb      	ldrb	r3, [r7, #6]
 8001ec4:	08db      	lsrs	r3, r3, #3
 8001ec6:	b2d8      	uxtb	r0, r3
 8001ec8:	4603      	mov	r3, r0
 8001eca:	01db      	lsls	r3, r3, #7
 8001ecc:	4413      	add	r3, r2
 8001ece:	4a0e      	ldr	r2, [pc, #56]	; (8001f08 <ssd1306_DrawPixel+0xa4>)
 8001ed0:	5cd3      	ldrb	r3, [r2, r3]
 8001ed2:	b25a      	sxtb	r2, r3
 8001ed4:	79bb      	ldrb	r3, [r7, #6]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	2101      	movs	r1, #1
 8001edc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee0:	b25b      	sxtb	r3, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	b25b      	sxtb	r3, r3
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	b259      	sxtb	r1, r3
 8001eea:	79fa      	ldrb	r2, [r7, #7]
 8001eec:	4603      	mov	r3, r0
 8001eee:	01db      	lsls	r3, r3, #7
 8001ef0:	4413      	add	r3, r2
 8001ef2:	b2c9      	uxtb	r1, r1
 8001ef4:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <ssd1306_DrawPixel+0xa4>)
 8001ef6:	54d1      	strb	r1, [r2, r3]
 8001ef8:	e000      	b.n	8001efc <ssd1306_DrawPixel+0x98>
        return;
 8001efa:	bf00      	nop
    }
}
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	2000031c 	.word	0x2000031c

08001f0c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001f0c:	b590      	push	{r4, r7, lr}
 8001f0e:	b089      	sub	sp, #36	; 0x24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4604      	mov	r4, r0
 8001f14:	4638      	mov	r0, r7
 8001f16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001f1a:	4623      	mov	r3, r4
 8001f1c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	2b1f      	cmp	r3, #31
 8001f22:	d902      	bls.n	8001f2a <ssd1306_WriteChar+0x1e>
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	2b7e      	cmp	r3, #126	; 0x7e
 8001f28:	d901      	bls.n	8001f2e <ssd1306_WriteChar+0x22>
        return 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e079      	b.n	8002022 <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001f2e:	4b3f      	ldr	r3, [pc, #252]	; (800202c <ssd1306_WriteChar+0x120>)
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	783b      	ldrb	r3, [r7, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	2b80      	cmp	r3, #128	; 0x80
 8001f3a:	dc06      	bgt.n	8001f4a <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001f3c:	4b3b      	ldr	r3, [pc, #236]	; (800202c <ssd1306_WriteChar+0x120>)
 8001f3e:	885b      	ldrh	r3, [r3, #2]
 8001f40:	461a      	mov	r2, r3
 8001f42:	787b      	ldrb	r3, [r7, #1]
 8001f44:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001f46:	2b40      	cmp	r3, #64	; 0x40
 8001f48:	dd01      	ble.n	8001f4e <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	e069      	b.n	8002022 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
 8001f52:	e04e      	b.n	8001ff2 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	3b20      	subs	r3, #32
 8001f5a:	7879      	ldrb	r1, [r7, #1]
 8001f5c:	fb01 f303 	mul.w	r3, r1, r3
 8001f60:	4619      	mov	r1, r3
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	440b      	add	r3, r1
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61bb      	str	r3, [r7, #24]
 8001f72:	e036      	b.n	8001fe2 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d013      	beq.n	8001fac <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001f84:	4b29      	ldr	r3, [pc, #164]	; (800202c <ssd1306_WriteChar+0x120>)
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	b2d8      	uxtb	r0, r3
 8001f92:	4b26      	ldr	r3, [pc, #152]	; (800202c <ssd1306_WriteChar+0x120>)
 8001f94:	885b      	ldrh	r3, [r3, #2]
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f7ff ff5d 	bl	8001e64 <ssd1306_DrawPixel>
 8001faa:	e017      	b.n	8001fdc <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001fac:	4b1f      	ldr	r3, [pc, #124]	; (800202c <ssd1306_WriteChar+0x120>)
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	b2d8      	uxtb	r0, r3
 8001fba:	4b1c      	ldr	r3, [pc, #112]	; (800202c <ssd1306_WriteChar+0x120>)
 8001fbc:	885b      	ldrh	r3, [r3, #2]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	b2d9      	uxtb	r1, r3
 8001fc8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf0c      	ite	eq
 8001fd0:	2301      	moveq	r3, #1
 8001fd2:	2300      	movne	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	f7ff ff44 	bl	8001e64 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	61bb      	str	r3, [r7, #24]
 8001fe2:	783b      	ldrb	r3, [r7, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d3c3      	bcc.n	8001f74 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	787b      	ldrb	r3, [r7, #1]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d3ab      	bcc.n	8001f54 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <ssd1306_WriteChar+0x120>)
 8001ffe:	881a      	ldrh	r2, [r3, #0]
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d006      	beq.n	8002014 <ssd1306_WriteChar+0x108>
 8002006:	68b9      	ldr	r1, [r7, #8]
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	3b20      	subs	r3, #32
 800200c:	440b      	add	r3, r1
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	b29b      	uxth	r3, r3
 8002012:	e001      	b.n	8002018 <ssd1306_WriteChar+0x10c>
 8002014:	783b      	ldrb	r3, [r7, #0]
 8002016:	b29b      	uxth	r3, r3
 8002018:	4413      	add	r3, r2
 800201a:	b29a      	uxth	r2, r3
 800201c:	4b03      	ldr	r3, [pc, #12]	; (800202c <ssd1306_WriteChar+0x120>)
 800201e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002020:	7bfb      	ldrb	r3, [r7, #15]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3724      	adds	r7, #36	; 0x24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd90      	pop	{r4, r7, pc}
 800202a:	bf00      	nop
 800202c:	2000071c 	.word	0x2000071c

08002030 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af02      	add	r7, sp, #8
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	4638      	mov	r0, r7
 800203a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800203e:	e013      	b.n	8002068 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	7818      	ldrb	r0, [r3, #0]
 8002044:	7e3b      	ldrb	r3, [r7, #24]
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	463b      	mov	r3, r7
 800204a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800204c:	f7ff ff5e 	bl	8001f0c <ssd1306_WriteChar>
 8002050:	4603      	mov	r3, r0
 8002052:	461a      	mov	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	429a      	cmp	r2, r3
 800205a:	d002      	beq.n	8002062 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	e008      	b.n	8002074 <ssd1306_WriteString+0x44>
        }
        str++;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	3301      	adds	r3, #1
 8002066:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1e7      	bne.n	8002040 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	781b      	ldrb	r3, [r3, #0]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	460a      	mov	r2, r1
 8002086:	71fb      	strb	r3, [r7, #7]
 8002088:	4613      	mov	r3, r2
 800208a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	b29a      	uxth	r2, r3
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <ssd1306_SetCursor+0x2c>)
 8002092:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002094:	79bb      	ldrb	r3, [r7, #6]
 8002096:	b29a      	uxth	r2, r3
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <ssd1306_SetCursor+0x2c>)
 800209a:	805a      	strh	r2, [r3, #2]
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	2000071c 	.word	0x2000071c

080020ac <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80020ac:	b590      	push	{r4, r7, lr}
 80020ae:	b089      	sub	sp, #36	; 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4604      	mov	r4, r0
 80020b4:	4608      	mov	r0, r1
 80020b6:	4611      	mov	r1, r2
 80020b8:	461a      	mov	r2, r3
 80020ba:	4623      	mov	r3, r4
 80020bc:	71fb      	strb	r3, [r7, #7]
 80020be:	4603      	mov	r3, r0
 80020c0:	71bb      	strb	r3, [r7, #6]
 80020c2:	460b      	mov	r3, r1
 80020c4:	717b      	strb	r3, [r7, #5]
 80020c6:	4613      	mov	r3, r2
 80020c8:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80020ca:	797a      	ldrb	r2, [r7, #5]
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bfb8      	it	lt
 80020d4:	425b      	neglt	r3, r3
 80020d6:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80020d8:	793a      	ldrb	r2, [r7, #4]
 80020da:	79bb      	ldrb	r3, [r7, #6]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bfb8      	it	lt
 80020e2:	425b      	neglt	r3, r3
 80020e4:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80020e6:	79fa      	ldrb	r2, [r7, #7]
 80020e8:	797b      	ldrb	r3, [r7, #5]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d201      	bcs.n	80020f2 <ssd1306_Line+0x46>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e001      	b.n	80020f6 <ssd1306_Line+0x4a>
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295
 80020f6:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80020f8:	79ba      	ldrb	r2, [r7, #6]
 80020fa:	793b      	ldrb	r3, [r7, #4]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d201      	bcs.n	8002104 <ssd1306_Line+0x58>
 8002100:	2301      	movs	r3, #1
 8002102:	e001      	b.n	8002108 <ssd1306_Line+0x5c>
 8002104:	f04f 33ff 	mov.w	r3, #4294967295
 8002108:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8002112:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002116:	7939      	ldrb	r1, [r7, #4]
 8002118:	797b      	ldrb	r3, [r7, #5]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fea2 	bl	8001e64 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002120:	e024      	b.n	800216c <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8002122:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002126:	79b9      	ldrb	r1, [r7, #6]
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fe9a 	bl	8001e64 <ssd1306_DrawPixel>
        error2 = error * 2;
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	425b      	negs	r3, r3
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	429a      	cmp	r2, r3
 800213e:	dd08      	ble.n	8002152 <ssd1306_Line+0xa6>
            error -= deltaY;
 8002140:	69fa      	ldr	r2, [r7, #28]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	b2da      	uxtb	r2, r3
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	4413      	add	r3, r2
 8002150:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	429a      	cmp	r2, r3
 8002158:	da08      	bge.n	800216c <ssd1306_Line+0xc0>
            error += deltaX;
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	4413      	add	r3, r2
 8002160:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	b2da      	uxtb	r2, r3
 8002166:	79bb      	ldrb	r3, [r7, #6]
 8002168:	4413      	add	r3, r2
 800216a:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 800216c:	79fa      	ldrb	r2, [r7, #7]
 800216e:	797b      	ldrb	r3, [r7, #5]
 8002170:	429a      	cmp	r2, r3
 8002172:	d1d6      	bne.n	8002122 <ssd1306_Line+0x76>
 8002174:	79ba      	ldrb	r2, [r7, #6]
 8002176:	793b      	ldrb	r3, [r7, #4]
 8002178:	429a      	cmp	r2, r3
 800217a:	d1d2      	bne.n	8002122 <ssd1306_Line+0x76>
        }
    }
    return;
 800217c:	bf00      	nop
}
 800217e:	3724      	adds	r7, #36	; 0x24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd90      	pop	{r4, r7, pc}

08002184 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b085      	sub	sp, #20
 8002188:	af02      	add	r7, sp, #8
 800218a:	4604      	mov	r4, r0
 800218c:	4608      	mov	r0, r1
 800218e:	4611      	mov	r1, r2
 8002190:	461a      	mov	r2, r3
 8002192:	4623      	mov	r3, r4
 8002194:	71fb      	strb	r3, [r7, #7]
 8002196:	4603      	mov	r3, r0
 8002198:	71bb      	strb	r3, [r7, #6]
 800219a:	460b      	mov	r3, r1
 800219c:	717b      	strb	r3, [r7, #5]
 800219e:	4613      	mov	r3, r2
 80021a0:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 80021a2:	79bc      	ldrb	r4, [r7, #6]
 80021a4:	797a      	ldrb	r2, [r7, #5]
 80021a6:	79b9      	ldrb	r1, [r7, #6]
 80021a8:	79f8      	ldrb	r0, [r7, #7]
 80021aa:	7e3b      	ldrb	r3, [r7, #24]
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	4623      	mov	r3, r4
 80021b0:	f7ff ff7c 	bl	80020ac <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 80021b4:	793c      	ldrb	r4, [r7, #4]
 80021b6:	797a      	ldrb	r2, [r7, #5]
 80021b8:	79b9      	ldrb	r1, [r7, #6]
 80021ba:	7978      	ldrb	r0, [r7, #5]
 80021bc:	7e3b      	ldrb	r3, [r7, #24]
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	4623      	mov	r3, r4
 80021c2:	f7ff ff73 	bl	80020ac <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80021c6:	793c      	ldrb	r4, [r7, #4]
 80021c8:	79fa      	ldrb	r2, [r7, #7]
 80021ca:	7939      	ldrb	r1, [r7, #4]
 80021cc:	7978      	ldrb	r0, [r7, #5]
 80021ce:	7e3b      	ldrb	r3, [r7, #24]
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	4623      	mov	r3, r4
 80021d4:	f7ff ff6a 	bl	80020ac <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80021d8:	79bc      	ldrb	r4, [r7, #6]
 80021da:	79fa      	ldrb	r2, [r7, #7]
 80021dc:	7939      	ldrb	r1, [r7, #4]
 80021de:	79f8      	ldrb	r0, [r7, #7]
 80021e0:	7e3b      	ldrb	r3, [r7, #24]
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	4623      	mov	r3, r4
 80021e6:	f7ff ff61 	bl	80020ac <ssd1306_Line>

    return;
 80021ea:	bf00      	nop
}
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd90      	pop	{r4, r7, pc}

080021f2 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b084      	sub	sp, #16
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	4603      	mov	r3, r0
 80021fa:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80021fc:	2381      	movs	r3, #129	; 0x81
 80021fe:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002200:	7bfb      	ldrb	r3, [r7, #15]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fd3c 	bl	8001c80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fd38 	bl	8001c80 <ssd1306_WriteCommand>
}
 8002210:	bf00      	nop
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002228:	23af      	movs	r3, #175	; 0xaf
 800222a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <ssd1306_SetDisplayOn+0x38>)
 800222e:	2201      	movs	r2, #1
 8002230:	715a      	strb	r2, [r3, #5]
 8002232:	e004      	b.n	800223e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002234:	23ae      	movs	r3, #174	; 0xae
 8002236:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <ssd1306_SetDisplayOn+0x38>)
 800223a:	2200      	movs	r2, #0
 800223c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fd1d 	bl	8001c80 <ssd1306_WriteCommand>
}
 8002246:	bf00      	nop
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	2000071c 	.word	0x2000071c

08002254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	607b      	str	r3, [r7, #4]
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_MspInit+0x4c>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	4a0f      	ldr	r2, [pc, #60]	; (80022a0 <HAL_MspInit+0x4c>)
 8002264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002268:	6453      	str	r3, [r2, #68]	; 0x44
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <HAL_MspInit+0x4c>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002272:	607b      	str	r3, [r7, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	603b      	str	r3, [r7, #0]
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <HAL_MspInit+0x4c>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	4a08      	ldr	r2, [pc, #32]	; (80022a0 <HAL_MspInit+0x4c>)
 8002280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002284:	6413      	str	r3, [r2, #64]	; 0x40
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_MspInit+0x4c>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002292:	2007      	movs	r0, #7
 8002294:	f000 fc9e 	bl	8002bd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40023800 	.word	0x40023800

080022a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022a8:	e7fe      	b.n	80022a8 <NMI_Handler+0x4>

080022aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ae:	e7fe      	b.n	80022ae <HardFault_Handler+0x4>

080022b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b4:	e7fe      	b.n	80022b4 <MemManage_Handler+0x4>

080022b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ba:	e7fe      	b.n	80022ba <BusFault_Handler+0x4>

080022bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c0:	e7fe      	b.n	80022c0 <UsageFault_Handler+0x4>

080022c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022f0:	f000 fb5c 	bl	80029ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022f4:	bf00      	nop
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80022fc:	2040      	movs	r0, #64	; 0x40
 80022fe:	f000 fe87 	bl	8003010 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800230c:	4802      	ldr	r0, [pc, #8]	; (8002318 <TIM2_IRQHandler+0x10>)
 800230e:	f003 fb87 	bl	8005a20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000728 	.word	0x20000728

0800231c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002320:	4802      	ldr	r0, [pc, #8]	; (800232c <I2C1_ER_IRQHandler+0x10>)
 8002322:	f001 fb17 	bl	8003954 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000264 	.word	0x20000264

08002330 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return 1;
 8002334:	2301      	movs	r3, #1
}
 8002336:	4618      	mov	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <_kill>:

int _kill(int pid, int sig)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800234a:	f004 fea7 	bl	800709c <__errno>
 800234e:	4603      	mov	r3, r0
 8002350:	2216      	movs	r2, #22
 8002352:	601a      	str	r2, [r3, #0]
  return -1;
 8002354:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <_exit>:

void _exit (int status)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002368:	f04f 31ff 	mov.w	r1, #4294967295
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff ffe7 	bl	8002340 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002372:	e7fe      	b.n	8002372 <_exit+0x12>

08002374 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	e00a      	b.n	800239c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002386:	f3af 8000 	nop.w
 800238a:	4601      	mov	r1, r0
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	60ba      	str	r2, [r7, #8]
 8002392:	b2ca      	uxtb	r2, r1
 8002394:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	3301      	adds	r3, #1
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	dbf0      	blt.n	8002386 <_read+0x12>
  }

  return len;
 80023a4:	687b      	ldr	r3, [r7, #4]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	60f8      	str	r0, [r7, #12]
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	e009      	b.n	80023d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	60ba      	str	r2, [r7, #8]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	3301      	adds	r3, #1
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	429a      	cmp	r2, r3
 80023da:	dbf1      	blt.n	80023c0 <_write+0x12>
  }
  return len;
 80023dc:	687b      	ldr	r3, [r7, #4]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <_close>:

int _close(int file)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800240e:	605a      	str	r2, [r3, #4]
  return 0;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <_isatty>:

int _isatty(int file)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002426:	2301      	movs	r3, #1
}
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002458:	4a14      	ldr	r2, [pc, #80]	; (80024ac <_sbrk+0x5c>)
 800245a:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <_sbrk+0x60>)
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002464:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <_sbrk+0x64>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d102      	bne.n	8002472 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800246c:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <_sbrk+0x64>)
 800246e:	4a12      	ldr	r2, [pc, #72]	; (80024b8 <_sbrk+0x68>)
 8002470:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002472:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <_sbrk+0x64>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	429a      	cmp	r2, r3
 800247e:	d207      	bcs.n	8002490 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002480:	f004 fe0c 	bl	800709c <__errno>
 8002484:	4603      	mov	r3, r0
 8002486:	220c      	movs	r2, #12
 8002488:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800248a:	f04f 33ff 	mov.w	r3, #4294967295
 800248e:	e009      	b.n	80024a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002490:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <_sbrk+0x64>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002496:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <_sbrk+0x64>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	4a05      	ldr	r2, [pc, #20]	; (80024b4 <_sbrk+0x64>)
 80024a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024a2:	68fb      	ldr	r3, [r7, #12]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20020000 	.word	0x20020000
 80024b0:	00000400 	.word	0x00000400
 80024b4:	20000724 	.word	0x20000724
 80024b8:	20000908 	.word	0x20000908

080024bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <SystemInit+0x20>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c6:	4a05      	ldr	r2, [pc, #20]	; (80024dc <SystemInit+0x20>)
 80024c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08c      	sub	sp, #48	; 0x30
 80024e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024e6:	f107 030c 	add.w	r3, r7, #12
 80024ea:	2224      	movs	r2, #36	; 0x24
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f004 fd81 	bl	8006ff6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f4:	1d3b      	adds	r3, r7, #4
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024fc:	4b20      	ldr	r3, [pc, #128]	; (8002580 <MX_TIM2_Init+0xa0>)
 80024fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002502:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002504:	4b1e      	ldr	r3, [pc, #120]	; (8002580 <MX_TIM2_Init+0xa0>)
 8002506:	2200      	movs	r2, #0
 8002508:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800250a:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <MX_TIM2_Init+0xa0>)
 800250c:	2200      	movs	r2, #0
 800250e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 8002510:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <MX_TIM2_Init+0xa0>)
 8002512:	2213      	movs	r2, #19
 8002514:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002516:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <MX_TIM2_Init+0xa0>)
 8002518:	2200      	movs	r2, #0
 800251a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251c:	4b18      	ldr	r3, [pc, #96]	; (8002580 <MX_TIM2_Init+0xa0>)
 800251e:	2200      	movs	r2, #0
 8002520:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002522:	2301      	movs	r3, #1
 8002524:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800252a:	2301      	movs	r3, #1
 800252c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002536:	2300      	movs	r3, #0
 8002538:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800253a:	2301      	movs	r3, #1
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800253e:	2300      	movs	r3, #0
 8002540:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002546:	f107 030c 	add.w	r3, r7, #12
 800254a:	4619      	mov	r1, r3
 800254c:	480c      	ldr	r0, [pc, #48]	; (8002580 <MX_TIM2_Init+0xa0>)
 800254e:	f003 f913 	bl	8005778 <HAL_TIM_Encoder_Init>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002558:	f7ff faf2 	bl	8001b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800255c:	2300      	movs	r3, #0
 800255e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002560:	2300      	movs	r3, #0
 8002562:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002564:	1d3b      	adds	r3, r7, #4
 8002566:	4619      	mov	r1, r3
 8002568:	4805      	ldr	r0, [pc, #20]	; (8002580 <MX_TIM2_Init+0xa0>)
 800256a:	f003 fc73 	bl	8005e54 <HAL_TIMEx_MasterConfigSynchronization>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002574:	f7ff fae4 	bl	8001b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002578:	bf00      	nop
 800257a:	3730      	adds	r7, #48	; 0x30
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20000728 	.word	0x20000728

08002584 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08a      	sub	sp, #40	; 0x28
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a4:	d134      	bne.n	8002610 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <HAL_TIM_Encoder_MspInit+0x94>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	4a1a      	ldr	r2, [pc, #104]	; (8002618 <HAL_TIM_Encoder_MspInit+0x94>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6413      	str	r3, [r2, #64]	; 0x40
 80025b6:	4b18      	ldr	r3, [pc, #96]	; (8002618 <HAL_TIM_Encoder_MspInit+0x94>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	4b14      	ldr	r3, [pc, #80]	; (8002618 <HAL_TIM_Encoder_MspInit+0x94>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	4a13      	ldr	r2, [pc, #76]	; (8002618 <HAL_TIM_Encoder_MspInit+0x94>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6313      	str	r3, [r2, #48]	; 0x30
 80025d2:	4b11      	ldr	r3, [pc, #68]	; (8002618 <HAL_TIM_Encoder_MspInit+0x94>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80025de:	f248 0302 	movw	r3, #32770	; 0x8002
 80025e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e4:	2302      	movs	r3, #2
 80025e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ec:	2300      	movs	r3, #0
 80025ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025f0:	2301      	movs	r3, #1
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f4:	f107 0314 	add.w	r3, r7, #20
 80025f8:	4619      	mov	r1, r3
 80025fa:	4808      	ldr	r0, [pc, #32]	; (800261c <HAL_TIM_Encoder_MspInit+0x98>)
 80025fc:	f000 fb6a 	bl	8002cd4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002600:	2200      	movs	r2, #0
 8002602:	2100      	movs	r1, #0
 8002604:	201c      	movs	r0, #28
 8002606:	f000 faf0 	bl	8002bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800260a:	201c      	movs	r0, #28
 800260c:	f000 fb09 	bl	8002c22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002610:	bf00      	nop
 8002612:	3728      	adds	r7, #40	; 0x28
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40023800 	.word	0x40023800
 800261c:	40020000 	.word	0x40020000

08002620 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002624:	4b11      	ldr	r3, [pc, #68]	; (800266c <MX_USART2_UART_Init+0x4c>)
 8002626:	4a12      	ldr	r2, [pc, #72]	; (8002670 <MX_USART2_UART_Init+0x50>)
 8002628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <MX_USART2_UART_Init+0x4c>)
 800262c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <MX_USART2_UART_Init+0x4c>)
 8002634:	2200      	movs	r2, #0
 8002636:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <MX_USART2_UART_Init+0x4c>)
 800263a:	2200      	movs	r2, #0
 800263c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800263e:	4b0b      	ldr	r3, [pc, #44]	; (800266c <MX_USART2_UART_Init+0x4c>)
 8002640:	2200      	movs	r2, #0
 8002642:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002644:	4b09      	ldr	r3, [pc, #36]	; (800266c <MX_USART2_UART_Init+0x4c>)
 8002646:	220c      	movs	r2, #12
 8002648:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800264a:	4b08      	ldr	r3, [pc, #32]	; (800266c <MX_USART2_UART_Init+0x4c>)
 800264c:	2200      	movs	r2, #0
 800264e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <MX_USART2_UART_Init+0x4c>)
 8002652:	2200      	movs	r2, #0
 8002654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002656:	4805      	ldr	r0, [pc, #20]	; (800266c <MX_USART2_UART_Init+0x4c>)
 8002658:	f003 fc7e 	bl	8005f58 <HAL_UART_Init>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002662:	f7ff fa6d 	bl	8001b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000770 	.word	0x20000770
 8002670:	40004400 	.word	0x40004400

08002674 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	; 0x28
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	f107 0314 	add.w	r3, r7, #20
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a19      	ldr	r2, [pc, #100]	; (80026f8 <HAL_UART_MspInit+0x84>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d12b      	bne.n	80026ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	4b18      	ldr	r3, [pc, #96]	; (80026fc <HAL_UART_MspInit+0x88>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	4a17      	ldr	r2, [pc, #92]	; (80026fc <HAL_UART_MspInit+0x88>)
 80026a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a4:	6413      	str	r3, [r2, #64]	; 0x40
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <HAL_UART_MspInit+0x88>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	4b11      	ldr	r3, [pc, #68]	; (80026fc <HAL_UART_MspInit+0x88>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	4a10      	ldr	r2, [pc, #64]	; (80026fc <HAL_UART_MspInit+0x88>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6313      	str	r3, [r2, #48]	; 0x30
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <HAL_UART_MspInit+0x88>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026ce:	230c      	movs	r3, #12
 80026d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026da:	2303      	movs	r3, #3
 80026dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026de:	2307      	movs	r3, #7
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e2:	f107 0314 	add.w	r3, r7, #20
 80026e6:	4619      	mov	r1, r3
 80026e8:	4805      	ldr	r0, [pc, #20]	; (8002700 <HAL_UART_MspInit+0x8c>)
 80026ea:	f000 faf3 	bl	8002cd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80026ee:	bf00      	nop
 80026f0:	3728      	adds	r7, #40	; 0x28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40004400 	.word	0x40004400
 80026fc:	40023800 	.word	0x40023800
 8002700:	40020000 	.word	0x40020000

08002704 <_write_register>:
#define REG_POWER_SAVING_PSM_3  (0x02 << 1)
#define REG_POWER_SAVING_PSM_4  (0x03 << 1)
#define REG_POWER_SAVING_ENABLE  0x01

static uint32_t _write_register(veml6030 *veml, uint8_t reg, uint16_t value)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af02      	add	r7, sp, #8
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	70fb      	strb	r3, [r7, #3]
 8002710:	4613      	mov	r3, r2
 8002712:	803b      	strh	r3, [r7, #0]
  uint8_t payload[3] = {reg, value & 0xff, value >> 8};
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	733b      	strb	r3, [r7, #12]
 8002718:	883b      	ldrh	r3, [r7, #0]
 800271a:	b2db      	uxtb	r3, r3
 800271c:	737b      	strb	r3, [r7, #13]
 800271e:	883b      	ldrh	r3, [r7, #0]
 8002720:	0a1b      	lsrs	r3, r3, #8
 8002722:	b29b      	uxth	r3, r3
 8002724:	b2db      	uxtb	r3, r3
 8002726:	73bb      	strb	r3, [r7, #14]

  return HAL_I2C_Master_Transmit(veml->i2c, veml->write_addr, &payload[0], 3, 500);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	795b      	ldrb	r3, [r3, #5]
 8002730:	b299      	uxth	r1, r3
 8002732:	f107 020c 	add.w	r2, r7, #12
 8002736:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	2303      	movs	r3, #3
 800273e:	f000 fdd9 	bl	80032f4 <HAL_I2C_Master_Transmit>
 8002742:	4603      	mov	r3, r0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <_read_register>:

static uint16_t _read_register(veml6030 *veml, uint8_t reg)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af04      	add	r7, sp, #16
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	70fb      	strb	r3, [r7, #3]
  uint8_t payload[2] = {0};
 8002758:	2300      	movs	r3, #0
 800275a:	813b      	strh	r3, [r7, #8]

  int err = HAL_I2C_Mem_Read(veml->i2c, veml->write_addr, reg, 1, &payload[0], 2, 500);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6818      	ldr	r0, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	795b      	ldrb	r3, [r3, #5]
 8002764:	b299      	uxth	r1, r3
 8002766:	78fb      	ldrb	r3, [r7, #3]
 8002768:	b29a      	uxth	r2, r3
 800276a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800276e:	9302      	str	r3, [sp, #8]
 8002770:	2302      	movs	r3, #2
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	f107 0308 	add.w	r3, r7, #8
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	2301      	movs	r3, #1
 800277c:	f000 feb8 	bl	80034f0 <HAL_I2C_Mem_Read>
 8002780:	4603      	mov	r3, r0
 8002782:	60fb      	str	r3, [r7, #12]
  if (err != HAL_OK) {
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <_read_register+0x42>
    return 0;
 800278a:	2300      	movs	r3, #0
 800278c:	e007      	b.n	800279e <_read_register+0x52>
  }
  return (payload[1] << 8) | payload[0];
 800278e:	7a7b      	ldrb	r3, [r7, #9]
 8002790:	021b      	lsls	r3, r3, #8
 8002792:	b21a      	sxth	r2, r3
 8002794:	7a3b      	ldrb	r3, [r7, #8]
 8002796:	b21b      	sxth	r3, r3
 8002798:	4313      	orrs	r3, r2
 800279a:	b21b      	sxth	r3, r3
 800279c:	b29b      	uxth	r3, r3
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <veml6030_init>:

uint32_t veml6030_init(veml6030 *veml, I2C_HandleTypeDef *i2c, uint8_t addr)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b084      	sub	sp, #16
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	4613      	mov	r3, r2
 80027b2:	71fb      	strb	r3, [r7, #7]
  veml->read_addr  = (addr << 1) | 0x01;
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	b25b      	sxtb	r3, r3
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	b25b      	sxtb	r3, r3
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	711a      	strb	r2, [r3, #4]
  veml->write_addr = (addr << 1);
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	715a      	strb	r2, [r3, #5]
  veml->i2c        = i2c;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	601a      	str	r2, [r3, #0]

  // Reset VEML configuration (in order to check device)
  return _write_register(veml, REG_ALS_CONF, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2100      	movs	r1, #0
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f7ff ff92 	bl	8002704 <_write_register>
 80027e0:	4603      	mov	r3, r0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <veml6030_power_on>:

uint32_t veml6030_power_on(veml6030 *veml)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  // Get current config and clear shutdown bit
  uint16_t config = _read_register(veml, REG_ALS_CONF);
 80027f2:	2100      	movs	r1, #0
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff ffa9 	bl	800274c <_read_register>
 80027fa:	4603      	mov	r3, r0
 80027fc:	81fb      	strh	r3, [r7, #14]
  config &= ~REG_ALS_CONF_SHUTDOWN;
 80027fe:	89fb      	ldrh	r3, [r7, #14]
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	81fb      	strh	r3, [r7, #14]

  return _write_register(veml, REG_ALS_CONF, config);
 8002806:	89fb      	ldrh	r3, [r7, #14]
 8002808:	461a      	mov	r2, r3
 800280a:	2100      	movs	r1, #0
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ff79 	bl	8002704 <_write_register>
 8002812:	4603      	mov	r3, r0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <veml6030_set_als_integration_time>:

  return _write_register(veml, REG_ALS_CONF, config);
}

uint32_t veml6030_set_als_integration_time(veml6030 *veml, uint16_t it)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	807b      	strh	r3, [r7, #2]
  uint16_t config = _read_register(veml, REG_ALS_CONF);
 8002828:	2100      	movs	r1, #0
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff ff8e 	bl	800274c <_read_register>
 8002830:	4603      	mov	r3, r0
 8002832:	81fb      	strh	r3, [r7, #14]
  config &= ~REG_ALS_CONF_IT_CLEAR;
 8002834:	89fb      	ldrh	r3, [r7, #14]
 8002836:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
 800283a:	81fb      	strh	r3, [r7, #14]
  config |= it;
 800283c:	89fa      	ldrh	r2, [r7, #14]
 800283e:	887b      	ldrh	r3, [r7, #2]
 8002840:	4313      	orrs	r3, r2
 8002842:	81fb      	strh	r3, [r7, #14]
  return _write_register(veml, REG_ALS_CONF, config);
 8002844:	89fb      	ldrh	r3, [r7, #14]
 8002846:	461a      	mov	r2, r3
 8002848:	2100      	movs	r1, #0
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff ff5a 	bl	8002704 <_write_register>
 8002850:	4603      	mov	r3, r0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <veml6030_set_als_gain>:
  return (config & REG_ALS_CONF_IT_CLEAR) >> 6;
//  return config;
}

uint32_t veml6030_set_als_gain(veml6030 *veml, uint16_t gain)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b084      	sub	sp, #16
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	460b      	mov	r3, r1
 8002864:	807b      	strh	r3, [r7, #2]
  uint16_t config = _read_register(veml, REG_ALS_CONF);
 8002866:	2100      	movs	r1, #0
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff ff6f 	bl	800274c <_read_register>
 800286e:	4603      	mov	r3, r0
 8002870:	81fb      	strh	r3, [r7, #14]
  // Clear all gain bits
  config &= ~REG_ALS_CONF_GAIN_1_4;
 8002872:	89fb      	ldrh	r3, [r7, #14]
 8002874:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002878:	81fb      	strh	r3, [r7, #14]
  config |= gain;
 800287a:	89fa      	ldrh	r2, [r7, #14]
 800287c:	887b      	ldrh	r3, [r7, #2]
 800287e:	4313      	orrs	r3, r2
 8002880:	81fb      	strh	r3, [r7, #14]
  return _write_register(veml, REG_ALS_CONF, config);
 8002882:	89fb      	ldrh	r3, [r7, #14]
 8002884:	461a      	mov	r2, r3
 8002886:	2100      	movs	r1, #0
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff ff3b 	bl	8002704 <_write_register>
 800288e:	4603      	mov	r3, r0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <veml6030_read_als>:
  uint16_t config = _read_register(veml, REG_ALS_CONF);
  return (config & REG_ALS_CONF_GAIN_1_4) >> 11;
}

uint16_t veml6030_read_als(veml6030 *veml)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  return _read_register(veml, REG_ALS);
 80028a0:	2104      	movs	r1, #4
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff ff52 	bl	800274c <_read_register>
 80028a8:	4603      	mov	r3, r0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80028b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028b8:	f7ff fe00 	bl	80024bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028bc:	480c      	ldr	r0, [pc, #48]	; (80028f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028be:	490d      	ldr	r1, [pc, #52]	; (80028f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028c0:	4a0d      	ldr	r2, [pc, #52]	; (80028f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028c4:	e002      	b.n	80028cc <LoopCopyDataInit>

080028c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ca:	3304      	adds	r3, #4

080028cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028d0:	d3f9      	bcc.n	80028c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028d2:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028d4:	4c0a      	ldr	r4, [pc, #40]	; (8002900 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028d8:	e001      	b.n	80028de <LoopFillZerobss>

080028da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028dc:	3204      	adds	r2, #4

080028de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028e0:	d3fb      	bcc.n	80028da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028e2:	f004 fbe1 	bl	80070a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028e6:	f7fe fd23 	bl	8001330 <main>
  bx  lr    
 80028ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80028ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028f4:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 80028f8:	0800b000 	.word	0x0800b000
  ldr r2, =_sbss
 80028fc:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8002900:	20000908 	.word	0x20000908

08002904 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002904:	e7fe      	b.n	8002904 <ADC_IRQHandler>
	...

08002908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800290c:	4b0e      	ldr	r3, [pc, #56]	; (8002948 <HAL_Init+0x40>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0d      	ldr	r2, [pc, #52]	; (8002948 <HAL_Init+0x40>)
 8002912:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002916:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <HAL_Init+0x40>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <HAL_Init+0x40>)
 800291e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002922:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002924:	4b08      	ldr	r3, [pc, #32]	; (8002948 <HAL_Init+0x40>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a07      	ldr	r2, [pc, #28]	; (8002948 <HAL_Init+0x40>)
 800292a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002930:	2003      	movs	r0, #3
 8002932:	f000 f94f 	bl	8002bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002936:	2000      	movs	r0, #0
 8002938:	f000 f808 	bl	800294c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800293c:	f7ff fc8a 	bl	8002254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40023c00 	.word	0x40023c00

0800294c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002954:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_InitTick+0x54>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <HAL_InitTick+0x58>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	4619      	mov	r1, r3
 800295e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002962:	fbb3 f3f1 	udiv	r3, r3, r1
 8002966:	fbb2 f3f3 	udiv	r3, r2, r3
 800296a:	4618      	mov	r0, r3
 800296c:	f000 f967 	bl	8002c3e <HAL_SYSTICK_Config>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e00e      	b.n	8002998 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b0f      	cmp	r3, #15
 800297e:	d80a      	bhi.n	8002996 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002980:	2200      	movs	r2, #0
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	f04f 30ff 	mov.w	r0, #4294967295
 8002988:	f000 f92f 	bl	8002bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800298c:	4a06      	ldr	r2, [pc, #24]	; (80029a8 <HAL_InitTick+0x5c>)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
 8002994:	e000      	b.n	8002998 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
}
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	2000005c 	.word	0x2000005c
 80029a4:	20000064 	.word	0x20000064
 80029a8:	20000060 	.word	0x20000060

080029ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_IncTick+0x20>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	461a      	mov	r2, r3
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_IncTick+0x24>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4413      	add	r3, r2
 80029bc:	4a04      	ldr	r2, [pc, #16]	; (80029d0 <HAL_IncTick+0x24>)
 80029be:	6013      	str	r3, [r2, #0]
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000064 	.word	0x20000064
 80029d0:	200007b8 	.word	0x200007b8

080029d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return uwTick;
 80029d8:	4b03      	ldr	r3, [pc, #12]	; (80029e8 <HAL_GetTick+0x14>)
 80029da:	681b      	ldr	r3, [r3, #0]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	200007b8 	.word	0x200007b8

080029ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029f4:	f7ff ffee 	bl	80029d4 <HAL_GetTick>
 80029f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a04:	d005      	beq.n	8002a12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a06:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <HAL_Delay+0x44>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4413      	add	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a12:	bf00      	nop
 8002a14:	f7ff ffde 	bl	80029d4 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d8f7      	bhi.n	8002a14 <HAL_Delay+0x28>
  {
  }
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000064 	.word	0x20000064

08002a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a44:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <__NVIC_SetPriorityGrouping+0x44>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a50:	4013      	ands	r3, r2
 8002a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a66:	4a04      	ldr	r2, [pc, #16]	; (8002a78 <__NVIC_SetPriorityGrouping+0x44>)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	60d3      	str	r3, [r2, #12]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a80:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <__NVIC_GetPriorityGrouping+0x18>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	0a1b      	lsrs	r3, r3, #8
 8002a86:	f003 0307 	and.w	r3, r3, #7
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	db0b      	blt.n	8002ac2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	f003 021f 	and.w	r2, r3, #31
 8002ab0:	4907      	ldr	r1, [pc, #28]	; (8002ad0 <__NVIC_EnableIRQ+0x38>)
 8002ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	2001      	movs	r0, #1
 8002aba:	fa00 f202 	lsl.w	r2, r0, r2
 8002abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	e000e100 	.word	0xe000e100

08002ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	6039      	str	r1, [r7, #0]
 8002ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	db0a      	blt.n	8002afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	490c      	ldr	r1, [pc, #48]	; (8002b20 <__NVIC_SetPriority+0x4c>)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	0112      	lsls	r2, r2, #4
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	440b      	add	r3, r1
 8002af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002afc:	e00a      	b.n	8002b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	4908      	ldr	r1, [pc, #32]	; (8002b24 <__NVIC_SetPriority+0x50>)
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	3b04      	subs	r3, #4
 8002b0c:	0112      	lsls	r2, r2, #4
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	440b      	add	r3, r1
 8002b12:	761a      	strb	r2, [r3, #24]
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	e000e100 	.word	0xe000e100
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b089      	sub	sp, #36	; 0x24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f1c3 0307 	rsb	r3, r3, #7
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	bf28      	it	cs
 8002b46:	2304      	movcs	r3, #4
 8002b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	2b06      	cmp	r3, #6
 8002b50:	d902      	bls.n	8002b58 <NVIC_EncodePriority+0x30>
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3b03      	subs	r3, #3
 8002b56:	e000      	b.n	8002b5a <NVIC_EncodePriority+0x32>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43da      	mvns	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b70:	f04f 31ff 	mov.w	r1, #4294967295
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7a:	43d9      	mvns	r1, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b80:	4313      	orrs	r3, r2
         );
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3724      	adds	r7, #36	; 0x24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
	...

08002b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ba0:	d301      	bcc.n	8002ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e00f      	b.n	8002bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <SysTick_Config+0x40>)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bae:	210f      	movs	r1, #15
 8002bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb4:	f7ff ff8e 	bl	8002ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <SysTick_Config+0x40>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bbe:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <SysTick_Config+0x40>)
 8002bc0:	2207      	movs	r2, #7
 8002bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	e000e010 	.word	0xe000e010

08002bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff ff29 	bl	8002a34 <__NVIC_SetPriorityGrouping>
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b086      	sub	sp, #24
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
 8002bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bfc:	f7ff ff3e 	bl	8002a7c <__NVIC_GetPriorityGrouping>
 8002c00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	6978      	ldr	r0, [r7, #20]
 8002c08:	f7ff ff8e 	bl	8002b28 <NVIC_EncodePriority>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff ff5d 	bl	8002ad4 <__NVIC_SetPriority>
}
 8002c1a:	bf00      	nop
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	4603      	mov	r3, r0
 8002c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff ff31 	bl	8002a98 <__NVIC_EnableIRQ>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff ffa2 	bl	8002b90 <SysTick_Config>
 8002c4c:	4603      	mov	r3, r0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e00e      	b.n	8002c86 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	795b      	ldrb	r3, [r3, #5]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d105      	bne.n	8002c7e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7fe f94f 	bl	8000f1c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d004      	beq.n	8002cac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2280      	movs	r2, #128	; 0x80
 8002ca6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e00c      	b.n	8002cc6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2205      	movs	r2, #5
 8002cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0201 	bic.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
	...

08002cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b089      	sub	sp, #36	; 0x24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	e159      	b.n	8002fa4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	4013      	ands	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	f040 8148 	bne.w	8002f9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d005      	beq.n	8002d26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d130      	bne.n	8002d88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	2203      	movs	r2, #3
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	f003 0201 	and.w	r2, r3, #1
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 0303 	and.w	r3, r3, #3
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d017      	beq.n	8002dc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	2203      	movs	r2, #3
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d123      	bne.n	8002e18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	08da      	lsrs	r2, r3, #3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3208      	adds	r2, #8
 8002dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	220f      	movs	r2, #15
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	08da      	lsrs	r2, r3, #3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3208      	adds	r2, #8
 8002e12:	69b9      	ldr	r1, [r7, #24]
 8002e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	2203      	movs	r2, #3
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 0203 	and.w	r2, r3, #3
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 80a2 	beq.w	8002f9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	4b57      	ldr	r3, [pc, #348]	; (8002fbc <HAL_GPIO_Init+0x2e8>)
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	4a56      	ldr	r2, [pc, #344]	; (8002fbc <HAL_GPIO_Init+0x2e8>)
 8002e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e68:	6453      	str	r3, [r2, #68]	; 0x44
 8002e6a:	4b54      	ldr	r3, [pc, #336]	; (8002fbc <HAL_GPIO_Init+0x2e8>)
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e76:	4a52      	ldr	r2, [pc, #328]	; (8002fc0 <HAL_GPIO_Init+0x2ec>)
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	089b      	lsrs	r3, r3, #2
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	220f      	movs	r2, #15
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43db      	mvns	r3, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a49      	ldr	r2, [pc, #292]	; (8002fc4 <HAL_GPIO_Init+0x2f0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d019      	beq.n	8002ed6 <HAL_GPIO_Init+0x202>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a48      	ldr	r2, [pc, #288]	; (8002fc8 <HAL_GPIO_Init+0x2f4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d013      	beq.n	8002ed2 <HAL_GPIO_Init+0x1fe>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a47      	ldr	r2, [pc, #284]	; (8002fcc <HAL_GPIO_Init+0x2f8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00d      	beq.n	8002ece <HAL_GPIO_Init+0x1fa>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a46      	ldr	r2, [pc, #280]	; (8002fd0 <HAL_GPIO_Init+0x2fc>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d007      	beq.n	8002eca <HAL_GPIO_Init+0x1f6>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a45      	ldr	r2, [pc, #276]	; (8002fd4 <HAL_GPIO_Init+0x300>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d101      	bne.n	8002ec6 <HAL_GPIO_Init+0x1f2>
 8002ec2:	2304      	movs	r3, #4
 8002ec4:	e008      	b.n	8002ed8 <HAL_GPIO_Init+0x204>
 8002ec6:	2307      	movs	r3, #7
 8002ec8:	e006      	b.n	8002ed8 <HAL_GPIO_Init+0x204>
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e004      	b.n	8002ed8 <HAL_GPIO_Init+0x204>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e002      	b.n	8002ed8 <HAL_GPIO_Init+0x204>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <HAL_GPIO_Init+0x204>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	69fa      	ldr	r2, [r7, #28]
 8002eda:	f002 0203 	and.w	r2, r2, #3
 8002ede:	0092      	lsls	r2, r2, #2
 8002ee0:	4093      	lsls	r3, r2
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ee8:	4935      	ldr	r1, [pc, #212]	; (8002fc0 <HAL_GPIO_Init+0x2ec>)
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	089b      	lsrs	r3, r3, #2
 8002eee:	3302      	adds	r3, #2
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ef6:	4b38      	ldr	r3, [pc, #224]	; (8002fd8 <HAL_GPIO_Init+0x304>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	43db      	mvns	r3, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4013      	ands	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f1a:	4a2f      	ldr	r2, [pc, #188]	; (8002fd8 <HAL_GPIO_Init+0x304>)
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f20:	4b2d      	ldr	r3, [pc, #180]	; (8002fd8 <HAL_GPIO_Init+0x304>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f44:	4a24      	ldr	r2, [pc, #144]	; (8002fd8 <HAL_GPIO_Init+0x304>)
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f4a:	4b23      	ldr	r3, [pc, #140]	; (8002fd8 <HAL_GPIO_Init+0x304>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	43db      	mvns	r3, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4013      	ands	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f6e:	4a1a      	ldr	r2, [pc, #104]	; (8002fd8 <HAL_GPIO_Init+0x304>)
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f74:	4b18      	ldr	r3, [pc, #96]	; (8002fd8 <HAL_GPIO_Init+0x304>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4013      	ands	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f98:	4a0f      	ldr	r2, [pc, #60]	; (8002fd8 <HAL_GPIO_Init+0x304>)
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	61fb      	str	r3, [r7, #28]
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	2b0f      	cmp	r3, #15
 8002fa8:	f67f aea2 	bls.w	8002cf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fac:	bf00      	nop
 8002fae:	bf00      	nop
 8002fb0:	3724      	adds	r7, #36	; 0x24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	40013800 	.word	0x40013800
 8002fc4:	40020000 	.word	0x40020000
 8002fc8:	40020400 	.word	0x40020400
 8002fcc:	40020800 	.word	0x40020800
 8002fd0:	40020c00 	.word	0x40020c00
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40013c00 	.word	0x40013c00

08002fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	807b      	strh	r3, [r7, #2]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fec:	787b      	ldrb	r3, [r7, #1]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ff2:	887a      	ldrh	r2, [r7, #2]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ff8:	e003      	b.n	8003002 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ffa:	887b      	ldrh	r3, [r7, #2]
 8002ffc:	041a      	lsls	r2, r3, #16
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	619a      	str	r2, [r3, #24]
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
	...

08003010 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800301a:	4b08      	ldr	r3, [pc, #32]	; (800303c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	4013      	ands	r3, r2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d006      	beq.n	8003034 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003026:	4a05      	ldr	r2, [pc, #20]	; (800303c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003028:	88fb      	ldrh	r3, [r7, #6]
 800302a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800302c:	88fb      	ldrh	r3, [r7, #6]
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe fc36 	bl	80018a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40013c00 	.word	0x40013c00

08003040 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e12b      	b.n	80032aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7fe f83a 	bl	80010e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2224      	movs	r2, #36	; 0x24
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0201 	bic.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003092:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030a4:	f001 ff7c 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 80030a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4a81      	ldr	r2, [pc, #516]	; (80032b4 <HAL_I2C_Init+0x274>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d807      	bhi.n	80030c4 <HAL_I2C_Init+0x84>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4a80      	ldr	r2, [pc, #512]	; (80032b8 <HAL_I2C_Init+0x278>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	bf94      	ite	ls
 80030bc:	2301      	movls	r3, #1
 80030be:	2300      	movhi	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	e006      	b.n	80030d2 <HAL_I2C_Init+0x92>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4a7d      	ldr	r2, [pc, #500]	; (80032bc <HAL_I2C_Init+0x27c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	bf94      	ite	ls
 80030cc:	2301      	movls	r3, #1
 80030ce:	2300      	movhi	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e0e7      	b.n	80032aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4a78      	ldr	r2, [pc, #480]	; (80032c0 <HAL_I2C_Init+0x280>)
 80030de:	fba2 2303 	umull	r2, r3, r2, r3
 80030e2:	0c9b      	lsrs	r3, r3, #18
 80030e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	4a6a      	ldr	r2, [pc, #424]	; (80032b4 <HAL_I2C_Init+0x274>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d802      	bhi.n	8003114 <HAL_I2C_Init+0xd4>
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	3301      	adds	r3, #1
 8003112:	e009      	b.n	8003128 <HAL_I2C_Init+0xe8>
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800311a:	fb02 f303 	mul.w	r3, r2, r3
 800311e:	4a69      	ldr	r2, [pc, #420]	; (80032c4 <HAL_I2C_Init+0x284>)
 8003120:	fba2 2303 	umull	r2, r3, r2, r3
 8003124:	099b      	lsrs	r3, r3, #6
 8003126:	3301      	adds	r3, #1
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	430b      	orrs	r3, r1
 800312e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800313a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	495c      	ldr	r1, [pc, #368]	; (80032b4 <HAL_I2C_Init+0x274>)
 8003144:	428b      	cmp	r3, r1
 8003146:	d819      	bhi.n	800317c <HAL_I2C_Init+0x13c>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1e59      	subs	r1, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	fbb1 f3f3 	udiv	r3, r1, r3
 8003156:	1c59      	adds	r1, r3, #1
 8003158:	f640 73fc 	movw	r3, #4092	; 0xffc
 800315c:	400b      	ands	r3, r1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <HAL_I2C_Init+0x138>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1e59      	subs	r1, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003170:	3301      	adds	r3, #1
 8003172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003176:	e051      	b.n	800321c <HAL_I2C_Init+0x1dc>
 8003178:	2304      	movs	r3, #4
 800317a:	e04f      	b.n	800321c <HAL_I2C_Init+0x1dc>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d111      	bne.n	80031a8 <HAL_I2C_Init+0x168>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	1e58      	subs	r0, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	440b      	add	r3, r1
 8003192:	fbb0 f3f3 	udiv	r3, r0, r3
 8003196:	3301      	adds	r3, #1
 8003198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319c:	2b00      	cmp	r3, #0
 800319e:	bf0c      	ite	eq
 80031a0:	2301      	moveq	r3, #1
 80031a2:	2300      	movne	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	e012      	b.n	80031ce <HAL_I2C_Init+0x18e>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	1e58      	subs	r0, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6859      	ldr	r1, [r3, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	0099      	lsls	r1, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80031be:	3301      	adds	r3, #1
 80031c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_I2C_Init+0x196>
 80031d2:	2301      	movs	r3, #1
 80031d4:	e022      	b.n	800321c <HAL_I2C_Init+0x1dc>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10e      	bne.n	80031fc <HAL_I2C_Init+0x1bc>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1e58      	subs	r0, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6859      	ldr	r1, [r3, #4]
 80031e6:	460b      	mov	r3, r1
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	440b      	add	r3, r1
 80031ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80031f0:	3301      	adds	r3, #1
 80031f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031fa:	e00f      	b.n	800321c <HAL_I2C_Init+0x1dc>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	1e58      	subs	r0, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6859      	ldr	r1, [r3, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	0099      	lsls	r1, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003212:	3301      	adds	r3, #1
 8003214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003218:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	6809      	ldr	r1, [r1, #0]
 8003220:	4313      	orrs	r3, r2
 8003222:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69da      	ldr	r2, [r3, #28]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800324a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6911      	ldr	r1, [r2, #16]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	68d2      	ldr	r2, [r2, #12]
 8003256:	4311      	orrs	r1, r2
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6812      	ldr	r2, [r2, #0]
 800325c:	430b      	orrs	r3, r1
 800325e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695a      	ldr	r2, [r3, #20]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	000186a0 	.word	0x000186a0
 80032b8:	001e847f 	.word	0x001e847f
 80032bc:	003d08ff 	.word	0x003d08ff
 80032c0:	431bde83 	.word	0x431bde83
 80032c4:	10624dd3 	.word	0x10624dd3

080032c8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032da:	2b80      	cmp	r3, #128	; 0x80
 80032dc:	d103      	bne.n	80032e6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2200      	movs	r2, #0
 80032e4:	611a      	str	r2, [r3, #16]
  }
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
	...

080032f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	607a      	str	r2, [r7, #4]
 80032fe:	461a      	mov	r2, r3
 8003300:	460b      	mov	r3, r1
 8003302:	817b      	strh	r3, [r7, #10]
 8003304:	4613      	mov	r3, r2
 8003306:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003308:	f7ff fb64 	bl	80029d4 <HAL_GetTick>
 800330c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b20      	cmp	r3, #32
 8003318:	f040 80e0 	bne.w	80034dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	2319      	movs	r3, #25
 8003322:	2201      	movs	r2, #1
 8003324:	4970      	ldr	r1, [pc, #448]	; (80034e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 ff94 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003332:	2302      	movs	r3, #2
 8003334:	e0d3      	b.n	80034de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <HAL_I2C_Master_Transmit+0x50>
 8003340:	2302      	movs	r3, #2
 8003342:	e0cc      	b.n	80034de <HAL_I2C_Master_Transmit+0x1ea>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b01      	cmp	r3, #1
 8003358:	d007      	beq.n	800336a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0201 	orr.w	r2, r2, #1
 8003368:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003378:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2221      	movs	r2, #33	; 0x21
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2210      	movs	r2, #16
 8003386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	893a      	ldrh	r2, [r7, #8]
 800339a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4a50      	ldr	r2, [pc, #320]	; (80034ec <HAL_I2C_Master_Transmit+0x1f8>)
 80033aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033ac:	8979      	ldrh	r1, [r7, #10]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	6a3a      	ldr	r2, [r7, #32]
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 fd3c 	bl	8003e30 <I2C_MasterRequestWrite>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e08d      	b.n	80034de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	613b      	str	r3, [r7, #16]
 80033d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033d8:	e066      	b.n	80034a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	6a39      	ldr	r1, [r7, #32]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f001 f852 	bl	8004488 <I2C_WaitOnTXEFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00d      	beq.n	8003406 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d107      	bne.n	8003402 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003400:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e06b      	b.n	80034de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	781a      	ldrb	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003420:	b29b      	uxth	r3, r3
 8003422:	3b01      	subs	r3, #1
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b04      	cmp	r3, #4
 8003442:	d11b      	bne.n	800347c <HAL_I2C_Master_Transmit+0x188>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003448:	2b00      	cmp	r3, #0
 800344a:	d017      	beq.n	800347c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	781a      	ldrb	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	6a39      	ldr	r1, [r7, #32]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f001 f849 	bl	8004518 <I2C_WaitOnBTFFlagUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00d      	beq.n	80034a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	2b04      	cmp	r3, #4
 8003492:	d107      	bne.n	80034a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e01a      	b.n	80034de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d194      	bne.n	80033da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	e000      	b.n	80034de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034dc:	2302      	movs	r3, #2
  }
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	00100002 	.word	0x00100002
 80034ec:	ffff0000 	.word	0xffff0000

080034f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08c      	sub	sp, #48	; 0x30
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	4608      	mov	r0, r1
 80034fa:	4611      	mov	r1, r2
 80034fc:	461a      	mov	r2, r3
 80034fe:	4603      	mov	r3, r0
 8003500:	817b      	strh	r3, [r7, #10]
 8003502:	460b      	mov	r3, r1
 8003504:	813b      	strh	r3, [r7, #8]
 8003506:	4613      	mov	r3, r2
 8003508:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800350a:	f7ff fa63 	bl	80029d4 <HAL_GetTick>
 800350e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b20      	cmp	r3, #32
 800351a:	f040 8214 	bne.w	8003946 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	2319      	movs	r3, #25
 8003524:	2201      	movs	r2, #1
 8003526:	497b      	ldr	r1, [pc, #492]	; (8003714 <HAL_I2C_Mem_Read+0x224>)
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 fe93 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003534:	2302      	movs	r3, #2
 8003536:	e207      	b.n	8003948 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800353e:	2b01      	cmp	r3, #1
 8003540:	d101      	bne.n	8003546 <HAL_I2C_Mem_Read+0x56>
 8003542:	2302      	movs	r3, #2
 8003544:	e200      	b.n	8003948 <HAL_I2C_Mem_Read+0x458>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b01      	cmp	r3, #1
 800355a:	d007      	beq.n	800356c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800357a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2222      	movs	r2, #34	; 0x22
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2240      	movs	r2, #64	; 0x40
 8003588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003596:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800359c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4a5b      	ldr	r2, [pc, #364]	; (8003718 <HAL_I2C_Mem_Read+0x228>)
 80035ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035ae:	88f8      	ldrh	r0, [r7, #6]
 80035b0:	893a      	ldrh	r2, [r7, #8]
 80035b2:	8979      	ldrh	r1, [r7, #10]
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	9301      	str	r3, [sp, #4]
 80035b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	4603      	mov	r3, r0
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 fcb8 	bl	8003f34 <I2C_RequestMemoryRead>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e1bc      	b.n	8003948 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d113      	bne.n	80035fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d6:	2300      	movs	r3, #0
 80035d8:	623b      	str	r3, [r7, #32]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	623b      	str	r3, [r7, #32]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	623b      	str	r3, [r7, #32]
 80035ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	e190      	b.n	8003920 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003602:	2b01      	cmp	r3, #1
 8003604:	d11b      	bne.n	800363e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003614:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003616:	2300      	movs	r3, #0
 8003618:	61fb      	str	r3, [r7, #28]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	61fb      	str	r3, [r7, #28]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	e170      	b.n	8003920 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003642:	2b02      	cmp	r3, #2
 8003644:	d11b      	bne.n	800367e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003654:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003664:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003666:	2300      	movs	r3, #0
 8003668:	61bb      	str	r3, [r7, #24]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	61bb      	str	r3, [r7, #24]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	61bb      	str	r3, [r7, #24]
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	e150      	b.n	8003920 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003694:	e144      	b.n	8003920 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369a:	2b03      	cmp	r3, #3
 800369c:	f200 80f1 	bhi.w	8003882 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d123      	bne.n	80036f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 ff7b 	bl	80045a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e145      	b.n	8003948 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691a      	ldr	r2, [r3, #16]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036ee:	e117      	b.n	8003920 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d14e      	bne.n	8003796 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fe:	2200      	movs	r2, #0
 8003700:	4906      	ldr	r1, [pc, #24]	; (800371c <HAL_I2C_Mem_Read+0x22c>)
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 fda6 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d008      	beq.n	8003720 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e11a      	b.n	8003948 <HAL_I2C_Mem_Read+0x458>
 8003712:	bf00      	nop
 8003714:	00100002 	.word	0x00100002
 8003718:	ffff0000 	.word	0xffff0000
 800371c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800372e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691a      	ldr	r2, [r3, #16]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374c:	3b01      	subs	r3, #1
 800374e:	b29a      	uxth	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003758:	b29b      	uxth	r3, r3
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378a:	b29b      	uxth	r3, r3
 800378c:	3b01      	subs	r3, #1
 800378e:	b29a      	uxth	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003794:	e0c4      	b.n	8003920 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379c:	2200      	movs	r2, #0
 800379e:	496c      	ldr	r1, [pc, #432]	; (8003950 <HAL_I2C_Mem_Read+0x460>)
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 fd57 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0cb      	b.n	8003948 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691a      	ldr	r2, [r3, #16]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	1c5a      	adds	r2, r3, #1
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f8:	2200      	movs	r2, #0
 80037fa:	4955      	ldr	r1, [pc, #340]	; (8003950 <HAL_I2C_Mem_Read+0x460>)
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 fd29 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e09d      	b.n	8003948 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800381a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691a      	ldr	r2, [r3, #16]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003844:	b29b      	uxth	r3, r3
 8003846:	3b01      	subs	r3, #1
 8003848:	b29a      	uxth	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003880:	e04e      	b.n	8003920 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003884:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 fe8e 	bl	80045a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e058      	b.n	8003948 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	691a      	ldr	r2, [r3, #16]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d124      	bne.n	8003920 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d107      	bne.n	80038ee <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ec:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003924:	2b00      	cmp	r3, #0
 8003926:	f47f aeb6 	bne.w	8003696 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	e000      	b.n	8003948 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003946:	2302      	movs	r3, #2
  }
}
 8003948:	4618      	mov	r0, r3
 800394a:	3728      	adds	r7, #40	; 0x28
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	00010004 	.word	0x00010004

08003954 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08a      	sub	sp, #40	; 0x28
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800396c:	2300      	movs	r3, #0
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003976:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00d      	beq.n	800399e <HAL_I2C_ER_IRQHandler+0x4a>
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800399c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00d      	beq.n	80039c4 <HAL_I2C_ER_IRQHandler+0x70>
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d008      	beq.n	80039c4 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	f043 0302 	orr.w	r3, r3, #2
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80039c2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d03e      	beq.n	8003a4c <HAL_I2C_ER_IRQHandler+0xf8>
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d039      	beq.n	8003a4c <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80039d8:	7efb      	ldrb	r3, [r7, #27]
 80039da:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ea:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f0:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80039f2:	7ebb      	ldrb	r3, [r7, #26]
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	d112      	bne.n	8003a1e <HAL_I2C_ER_IRQHandler+0xca>
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10f      	bne.n	8003a1e <HAL_I2C_ER_IRQHandler+0xca>
 80039fe:	7cfb      	ldrb	r3, [r7, #19]
 8003a00:	2b21      	cmp	r3, #33	; 0x21
 8003a02:	d008      	beq.n	8003a16 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003a04:	7cfb      	ldrb	r3, [r7, #19]
 8003a06:	2b29      	cmp	r3, #41	; 0x29
 8003a08:	d005      	beq.n	8003a16 <HAL_I2C_ER_IRQHandler+0xc2>
 8003a0a:	7cfb      	ldrb	r3, [r7, #19]
 8003a0c:	2b28      	cmp	r3, #40	; 0x28
 8003a0e:	d106      	bne.n	8003a1e <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b21      	cmp	r3, #33	; 0x21
 8003a14:	d103      	bne.n	8003a1e <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f864 	bl	8003ae4 <I2C_Slave_AF>
 8003a1c:	e016      	b.n	8003a4c <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a26:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	f043 0304 	orr.w	r3, r3, #4
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003a30:	7efb      	ldrb	r3, [r7, #27]
 8003a32:	2b10      	cmp	r3, #16
 8003a34:	d002      	beq.n	8003a3c <HAL_I2C_ER_IRQHandler+0xe8>
 8003a36:	7efb      	ldrb	r3, [r7, #27]
 8003a38:	2b40      	cmp	r3, #64	; 0x40
 8003a3a:	d107      	bne.n	8003a4c <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a4a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00d      	beq.n	8003a72 <HAL_I2C_ER_IRQHandler+0x11e>
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	f043 0308 	orr.w	r3, r3, #8
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003a70:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d008      	beq.n	8003a8a <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f8a1 	bl	8003bcc <I2C_ITError>
  }
}
 8003a8a:	bf00      	nop
 8003a8c:	3728      	adds	r7, #40	; 0x28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
	...

08003ae4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d002      	beq.n	8003b06 <I2C_Slave_AF+0x22>
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b20      	cmp	r3, #32
 8003b04:	d129      	bne.n	8003b5a <I2C_Slave_AF+0x76>
 8003b06:	7bfb      	ldrb	r3, [r7, #15]
 8003b08:	2b28      	cmp	r3, #40	; 0x28
 8003b0a:	d126      	bne.n	8003b5a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a2e      	ldr	r2, [pc, #184]	; (8003bc8 <I2C_Slave_AF+0xe4>)
 8003b10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b20:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b2a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff ffa7 	bl	8003aa6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003b58:	e031      	b.n	8003bbe <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	2b21      	cmp	r3, #33	; 0x21
 8003b5e:	d129      	bne.n	8003bb4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a19      	ldr	r2, [pc, #100]	; (8003bc8 <I2C_Slave_AF+0xe4>)
 8003b64:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2221      	movs	r2, #33	; 0x21
 8003b6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b8a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b94:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7ff fb8e 	bl	80032c8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7ff ff70 	bl	8003a92 <HAL_I2C_SlaveTxCpltCallback>
}
 8003bb2:	e004      	b.n	8003bbe <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bbc:	615a      	str	r2, [r3, #20]
}
 8003bbe:	bf00      	nop
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	ffff0000 	.word	0xffff0000

08003bcc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bda:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003be2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003be4:	7bbb      	ldrb	r3, [r7, #14]
 8003be6:	2b10      	cmp	r3, #16
 8003be8:	d002      	beq.n	8003bf0 <I2C_ITError+0x24>
 8003bea:	7bbb      	ldrb	r3, [r7, #14]
 8003bec:	2b40      	cmp	r3, #64	; 0x40
 8003bee:	d10a      	bne.n	8003c06 <I2C_ITError+0x3a>
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
 8003bf2:	2b22      	cmp	r3, #34	; 0x22
 8003bf4:	d107      	bne.n	8003c06 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c04:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
 8003c08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c0c:	2b28      	cmp	r3, #40	; 0x28
 8003c0e:	d107      	bne.n	8003c20 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2228      	movs	r2, #40	; 0x28
 8003c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c1e:	e015      	b.n	8003c4c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c2e:	d00a      	beq.n	8003c46 <I2C_ITError+0x7a>
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
 8003c32:	2b60      	cmp	r3, #96	; 0x60
 8003c34:	d007      	beq.n	8003c46 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c5a:	d162      	bne.n	8003d22 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c6a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d020      	beq.n	8003cbc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c7e:	4a6a      	ldr	r2, [pc, #424]	; (8003e28 <I2C_ITError+0x25c>)
 8003c80:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff f801 	bl	8002c8e <HAL_DMA_Abort_IT>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 8089 	beq.w	8003da6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0201 	bic.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	4798      	blx	r3
 8003cba:	e074      	b.n	8003da6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc0:	4a59      	ldr	r2, [pc, #356]	; (8003e28 <I2C_ITError+0x25c>)
 8003cc2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fe ffe0 	bl	8002c8e <HAL_DMA_Abort_IT>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d068      	beq.n	8003da6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cde:	2b40      	cmp	r3, #64	; 0x40
 8003ce0:	d10b      	bne.n	8003cfa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	1c5a      	adds	r2, r3, #1
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0201 	bic.w	r2, r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	4798      	blx	r3
 8003d20:	e041      	b.n	8003da6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b60      	cmp	r3, #96	; 0x60
 8003d2c:	d125      	bne.n	8003d7a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d46:	2b40      	cmp	r3, #64	; 0x40
 8003d48:	d10b      	bne.n	8003d62 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	691a      	ldr	r2, [r3, #16]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0201 	bic.w	r2, r2, #1
 8003d70:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff feab 	bl	8003ace <HAL_I2C_AbortCpltCallback>
 8003d78:	e015      	b.n	8003da6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d84:	2b40      	cmp	r3, #64	; 0x40
 8003d86:	d10b      	bne.n	8003da0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff fe8a 	bl	8003aba <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10e      	bne.n	8003dd4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d109      	bne.n	8003dd4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d104      	bne.n	8003dd4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d007      	beq.n	8003de4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003de2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dea:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d113      	bne.n	8003e20 <I2C_ITError+0x254>
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
 8003dfa:	2b28      	cmp	r3, #40	; 0x28
 8003dfc:	d110      	bne.n	8003e20 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a0a      	ldr	r2, [pc, #40]	; (8003e2c <I2C_ITError+0x260>)
 8003e02:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7ff fe43 	bl	8003aa6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e20:	bf00      	nop
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	08004105 	.word	0x08004105
 8003e2c:	ffff0000 	.word	0xffff0000

08003e30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	607a      	str	r2, [r7, #4]
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d006      	beq.n	8003e5a <I2C_MasterRequestWrite+0x2a>
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d003      	beq.n	8003e5a <I2C_MasterRequestWrite+0x2a>
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e58:	d108      	bne.n	8003e6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	e00b      	b.n	8003e84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e70:	2b12      	cmp	r3, #18
 8003e72:	d107      	bne.n	8003e84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f9df 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00d      	beq.n	8003eb8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eaa:	d103      	bne.n	8003eb4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e035      	b.n	8003f24 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ec0:	d108      	bne.n	8003ed4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ec2:	897b      	ldrh	r3, [r7, #10]
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ed0:	611a      	str	r2, [r3, #16]
 8003ed2:	e01b      	b.n	8003f0c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ed4:	897b      	ldrh	r3, [r7, #10]
 8003ed6:	11db      	asrs	r3, r3, #7
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	f003 0306 	and.w	r3, r3, #6
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	f063 030f 	orn	r3, r3, #15
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	490e      	ldr	r1, [pc, #56]	; (8003f2c <I2C_MasterRequestWrite+0xfc>)
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 fa28 	bl	8004348 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e010      	b.n	8003f24 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f02:	897b      	ldrh	r3, [r7, #10]
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	4907      	ldr	r1, [pc, #28]	; (8003f30 <I2C_MasterRequestWrite+0x100>)
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 fa18 	bl	8004348 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	00010008 	.word	0x00010008
 8003f30:	00010002 	.word	0x00010002

08003f34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b088      	sub	sp, #32
 8003f38:	af02      	add	r7, sp, #8
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	4608      	mov	r0, r1
 8003f3e:	4611      	mov	r1, r2
 8003f40:	461a      	mov	r2, r3
 8003f42:	4603      	mov	r3, r0
 8003f44:	817b      	strh	r3, [r7, #10]
 8003f46:	460b      	mov	r3, r1
 8003f48:	813b      	strh	r3, [r7, #8]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 f96a 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00d      	beq.n	8003fa2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f94:	d103      	bne.n	8003f9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e0aa      	b.n	80040f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fa2:	897b      	ldrh	r3, [r7, #10]
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	6a3a      	ldr	r2, [r7, #32]
 8003fb6:	4952      	ldr	r1, [pc, #328]	; (8004100 <I2C_RequestMemoryRead+0x1cc>)
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 f9c5 	bl	8004348 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e097      	b.n	80040f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc8:	2300      	movs	r3, #0
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	617b      	str	r3, [r7, #20]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe0:	6a39      	ldr	r1, [r7, #32]
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 fa50 	bl	8004488 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00d      	beq.n	800400a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d107      	bne.n	8004006 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004004:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e076      	b.n	80040f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800400a:	88fb      	ldrh	r3, [r7, #6]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d105      	bne.n	800401c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004010:	893b      	ldrh	r3, [r7, #8]
 8004012:	b2da      	uxtb	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	611a      	str	r2, [r3, #16]
 800401a:	e021      	b.n	8004060 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800401c:	893b      	ldrh	r3, [r7, #8]
 800401e:	0a1b      	lsrs	r3, r3, #8
 8004020:	b29b      	uxth	r3, r3
 8004022:	b2da      	uxtb	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800402a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800402c:	6a39      	ldr	r1, [r7, #32]
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 fa2a 	bl	8004488 <I2C_WaitOnTXEFlagUntilTimeout>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00d      	beq.n	8004056 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	2b04      	cmp	r3, #4
 8004040:	d107      	bne.n	8004052 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004050:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e050      	b.n	80040f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004056:	893b      	ldrh	r3, [r7, #8]
 8004058:	b2da      	uxtb	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004062:	6a39      	ldr	r1, [r7, #32]
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 fa0f 	bl	8004488 <I2C_WaitOnTXEFlagUntilTimeout>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00d      	beq.n	800408c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	2b04      	cmp	r3, #4
 8004076:	d107      	bne.n	8004088 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004086:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e035      	b.n	80040f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800409a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f8d3 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00d      	beq.n	80040d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c2:	d103      	bne.n	80040cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e013      	b.n	80040f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040d0:	897b      	ldrh	r3, [r7, #10]
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	f043 0301 	orr.w	r3, r3, #1
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	6a3a      	ldr	r2, [r7, #32]
 80040e4:	4906      	ldr	r1, [pc, #24]	; (8004100 <I2C_RequestMemoryRead+0x1cc>)
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 f92e 	bl	8004348 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	00010002 	.word	0x00010002

08004104 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004114:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800411e:	4b4b      	ldr	r3, [pc, #300]	; (800424c <I2C_DMAAbort+0x148>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	08db      	lsrs	r3, r3, #3
 8004124:	4a4a      	ldr	r2, [pc, #296]	; (8004250 <I2C_DMAAbort+0x14c>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	0a1a      	lsrs	r2, r3, #8
 800412c:	4613      	mov	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	00da      	lsls	r2, r3, #3
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	f043 0220 	orr.w	r2, r3, #32
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800414a:	e00a      	b.n	8004162 <I2C_DMAAbort+0x5e>
    }
    count--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	3b01      	subs	r3, #1
 8004150:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800415c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004160:	d0ea      	beq.n	8004138 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800416e:	2200      	movs	r2, #0
 8004170:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417e:	2200      	movs	r2, #0
 8004180:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004190:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2200      	movs	r2, #0
 8004196:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a4:	2200      	movs	r2, #0
 80041a6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b4:	2200      	movs	r2, #0
 80041b6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0201 	bic.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b60      	cmp	r3, #96	; 0x60
 80041d2:	d10e      	bne.n	80041f2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2200      	movs	r2, #0
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80041ea:	6978      	ldr	r0, [r7, #20]
 80041ec:	f7ff fc6f 	bl	8003ace <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80041f0:	e027      	b.n	8004242 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041f2:	7cfb      	ldrb	r3, [r7, #19]
 80041f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041f8:	2b28      	cmp	r3, #40	; 0x28
 80041fa:	d117      	bne.n	800422c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800421a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	2200      	movs	r2, #0
 8004220:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2228      	movs	r2, #40	; 0x28
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800422a:	e007      	b.n	800423c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800423c:	6978      	ldr	r0, [r7, #20]
 800423e:	f7ff fc3c 	bl	8003aba <HAL_I2C_ErrorCallback>
}
 8004242:	bf00      	nop
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	2000005c 	.word	0x2000005c
 8004250:	14f8b589 	.word	0x14f8b589

08004254 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	4613      	mov	r3, r2
 8004262:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004264:	e048      	b.n	80042f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426c:	d044      	beq.n	80042f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800426e:	f7fe fbb1 	bl	80029d4 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d302      	bcc.n	8004284 <I2C_WaitOnFlagUntilTimeout+0x30>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d139      	bne.n	80042f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	0c1b      	lsrs	r3, r3, #16
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b01      	cmp	r3, #1
 800428c:	d10d      	bne.n	80042aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	43da      	mvns	r2, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	4013      	ands	r3, r2
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	bf0c      	ite	eq
 80042a0:	2301      	moveq	r3, #1
 80042a2:	2300      	movne	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	461a      	mov	r2, r3
 80042a8:	e00c      	b.n	80042c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	43da      	mvns	r2, r3
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	4013      	ands	r3, r2
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	bf0c      	ite	eq
 80042bc:	2301      	moveq	r3, #1
 80042be:	2300      	movne	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	461a      	mov	r2, r3
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d116      	bne.n	80042f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	f043 0220 	orr.w	r2, r3, #32
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e023      	b.n	8004340 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	0c1b      	lsrs	r3, r3, #16
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d10d      	bne.n	800431e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	43da      	mvns	r2, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	4013      	ands	r3, r2
 800430e:	b29b      	uxth	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	bf0c      	ite	eq
 8004314:	2301      	moveq	r3, #1
 8004316:	2300      	movne	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	461a      	mov	r2, r3
 800431c:	e00c      	b.n	8004338 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	43da      	mvns	r2, r3
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	4013      	ands	r3, r2
 800432a:	b29b      	uxth	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	bf0c      	ite	eq
 8004330:	2301      	moveq	r3, #1
 8004332:	2300      	movne	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	461a      	mov	r2, r3
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	429a      	cmp	r2, r3
 800433c:	d093      	beq.n	8004266 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004356:	e071      	b.n	800443c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004366:	d123      	bne.n	80043b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004376:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004380:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	f043 0204 	orr.w	r2, r3, #4
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e067      	b.n	8004480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b6:	d041      	beq.n	800443c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b8:	f7fe fb0c 	bl	80029d4 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d302      	bcc.n	80043ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d136      	bne.n	800443c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	0c1b      	lsrs	r3, r3, #16
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d10c      	bne.n	80043f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	43da      	mvns	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4013      	ands	r3, r2
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	bf14      	ite	ne
 80043ea:	2301      	movne	r3, #1
 80043ec:	2300      	moveq	r3, #0
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	e00b      	b.n	800440a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	43da      	mvns	r2, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	4013      	ands	r3, r2
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	bf14      	ite	ne
 8004404:	2301      	movne	r3, #1
 8004406:	2300      	moveq	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d016      	beq.n	800443c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2220      	movs	r2, #32
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	f043 0220 	orr.w	r2, r3, #32
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e021      	b.n	8004480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	0c1b      	lsrs	r3, r3, #16
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b01      	cmp	r3, #1
 8004444:	d10c      	bne.n	8004460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	43da      	mvns	r2, r3
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	4013      	ands	r3, r2
 8004452:	b29b      	uxth	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	bf14      	ite	ne
 8004458:	2301      	movne	r3, #1
 800445a:	2300      	moveq	r3, #0
 800445c:	b2db      	uxtb	r3, r3
 800445e:	e00b      	b.n	8004478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	43da      	mvns	r2, r3
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4013      	ands	r3, r2
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	bf14      	ite	ne
 8004472:	2301      	movne	r3, #1
 8004474:	2300      	moveq	r3, #0
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	f47f af6d 	bne.w	8004358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004494:	e034      	b.n	8004500 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 f8e3 	bl	8004662 <I2C_IsAcknowledgeFailed>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e034      	b.n	8004510 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ac:	d028      	beq.n	8004500 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ae:	f7fe fa91 	bl	80029d4 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d302      	bcc.n	80044c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d11d      	bne.n	8004500 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ce:	2b80      	cmp	r3, #128	; 0x80
 80044d0:	d016      	beq.n	8004500 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	f043 0220 	orr.w	r2, r3, #32
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e007      	b.n	8004510 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450a:	2b80      	cmp	r3, #128	; 0x80
 800450c:	d1c3      	bne.n	8004496 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004524:	e034      	b.n	8004590 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 f89b 	bl	8004662 <I2C_IsAcknowledgeFailed>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e034      	b.n	80045a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453c:	d028      	beq.n	8004590 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453e:	f7fe fa49 	bl	80029d4 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	429a      	cmp	r2, r3
 800454c:	d302      	bcc.n	8004554 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d11d      	bne.n	8004590 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b04      	cmp	r3, #4
 8004560:	d016      	beq.n	8004590 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	f043 0220 	orr.w	r2, r3, #32
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e007      	b.n	80045a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	2b04      	cmp	r3, #4
 800459c:	d1c3      	bne.n	8004526 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045b4:	e049      	b.n	800464a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	f003 0310 	and.w	r3, r3, #16
 80045c0:	2b10      	cmp	r3, #16
 80045c2:	d119      	bne.n	80045f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f06f 0210 	mvn.w	r2, #16
 80045cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e030      	b.n	800465a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f8:	f7fe f9ec 	bl	80029d4 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	429a      	cmp	r2, r3
 8004606:	d302      	bcc.n	800460e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d11d      	bne.n	800464a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004618:	2b40      	cmp	r3, #64	; 0x40
 800461a:	d016      	beq.n	800464a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2220      	movs	r2, #32
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	f043 0220 	orr.w	r2, r3, #32
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e007      	b.n	800465a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004654:	2b40      	cmp	r3, #64	; 0x40
 8004656:	d1ae      	bne.n	80045b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004678:	d11b      	bne.n	80046b2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004682:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2220      	movs	r2, #32
 800468e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	f043 0204 	orr.w	r2, r3, #4
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e267      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d075      	beq.n	80047ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046de:	4b88      	ldr	r3, [pc, #544]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 030c 	and.w	r3, r3, #12
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d00c      	beq.n	8004704 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ea:	4b85      	ldr	r3, [pc, #532]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d112      	bne.n	800471c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046f6:	4b82      	ldr	r3, [pc, #520]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004702:	d10b      	bne.n	800471c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004704:	4b7e      	ldr	r3, [pc, #504]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d05b      	beq.n	80047c8 <HAL_RCC_OscConfig+0x108>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d157      	bne.n	80047c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e242      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004724:	d106      	bne.n	8004734 <HAL_RCC_OscConfig+0x74>
 8004726:	4b76      	ldr	r3, [pc, #472]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a75      	ldr	r2, [pc, #468]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 800472c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	e01d      	b.n	8004770 <HAL_RCC_OscConfig+0xb0>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800473c:	d10c      	bne.n	8004758 <HAL_RCC_OscConfig+0x98>
 800473e:	4b70      	ldr	r3, [pc, #448]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a6f      	ldr	r2, [pc, #444]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	4b6d      	ldr	r3, [pc, #436]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a6c      	ldr	r2, [pc, #432]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	e00b      	b.n	8004770 <HAL_RCC_OscConfig+0xb0>
 8004758:	4b69      	ldr	r3, [pc, #420]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a68      	ldr	r2, [pc, #416]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 800475e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	4b66      	ldr	r3, [pc, #408]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a65      	ldr	r2, [pc, #404]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 800476a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800476e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d013      	beq.n	80047a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004778:	f7fe f92c 	bl	80029d4 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004780:	f7fe f928 	bl	80029d4 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b64      	cmp	r3, #100	; 0x64
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e207      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004792:	4b5b      	ldr	r3, [pc, #364]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCC_OscConfig+0xc0>
 800479e:	e014      	b.n	80047ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a0:	f7fe f918 	bl	80029d4 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047a8:	f7fe f914 	bl	80029d4 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b64      	cmp	r3, #100	; 0x64
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e1f3      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ba:	4b51      	ldr	r3, [pc, #324]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f0      	bne.n	80047a8 <HAL_RCC_OscConfig+0xe8>
 80047c6:	e000      	b.n	80047ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d063      	beq.n	800489e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047d6:	4b4a      	ldr	r3, [pc, #296]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 030c 	and.w	r3, r3, #12
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00b      	beq.n	80047fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047e2:	4b47      	ldr	r3, [pc, #284]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047ea:	2b08      	cmp	r3, #8
 80047ec:	d11c      	bne.n	8004828 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ee:	4b44      	ldr	r3, [pc, #272]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d116      	bne.n	8004828 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047fa:	4b41      	ldr	r3, [pc, #260]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d005      	beq.n	8004812 <HAL_RCC_OscConfig+0x152>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d001      	beq.n	8004812 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e1c7      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004812:	4b3b      	ldr	r3, [pc, #236]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	4937      	ldr	r1, [pc, #220]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004822:	4313      	orrs	r3, r2
 8004824:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004826:	e03a      	b.n	800489e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d020      	beq.n	8004872 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004830:	4b34      	ldr	r3, [pc, #208]	; (8004904 <HAL_RCC_OscConfig+0x244>)
 8004832:	2201      	movs	r2, #1
 8004834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004836:	f7fe f8cd 	bl	80029d4 <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800483c:	e008      	b.n	8004850 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800483e:	f7fe f8c9 	bl	80029d4 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e1a8      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004850:	4b2b      	ldr	r3, [pc, #172]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0f0      	beq.n	800483e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800485c:	4b28      	ldr	r3, [pc, #160]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	4925      	ldr	r1, [pc, #148]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 800486c:	4313      	orrs	r3, r2
 800486e:	600b      	str	r3, [r1, #0]
 8004870:	e015      	b.n	800489e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004872:	4b24      	ldr	r3, [pc, #144]	; (8004904 <HAL_RCC_OscConfig+0x244>)
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7fe f8ac 	bl	80029d4 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004880:	f7fe f8a8 	bl	80029d4 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e187      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004892:	4b1b      	ldr	r3, [pc, #108]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f0      	bne.n	8004880 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d036      	beq.n	8004918 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d016      	beq.n	80048e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048b2:	4b15      	ldr	r3, [pc, #84]	; (8004908 <HAL_RCC_OscConfig+0x248>)
 80048b4:	2201      	movs	r2, #1
 80048b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b8:	f7fe f88c 	bl	80029d4 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048c0:	f7fe f888 	bl	80029d4 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e167      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048d2:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 80048d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0f0      	beq.n	80048c0 <HAL_RCC_OscConfig+0x200>
 80048de:	e01b      	b.n	8004918 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048e0:	4b09      	ldr	r3, [pc, #36]	; (8004908 <HAL_RCC_OscConfig+0x248>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048e6:	f7fe f875 	bl	80029d4 <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ec:	e00e      	b.n	800490c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ee:	f7fe f871 	bl	80029d4 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d907      	bls.n	800490c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e150      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
 8004900:	40023800 	.word	0x40023800
 8004904:	42470000 	.word	0x42470000
 8004908:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800490c:	4b88      	ldr	r3, [pc, #544]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 800490e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1ea      	bne.n	80048ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 8097 	beq.w	8004a54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004926:	2300      	movs	r3, #0
 8004928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800492a:	4b81      	ldr	r3, [pc, #516]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10f      	bne.n	8004956 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004936:	2300      	movs	r3, #0
 8004938:	60bb      	str	r3, [r7, #8]
 800493a:	4b7d      	ldr	r3, [pc, #500]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	4a7c      	ldr	r2, [pc, #496]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004944:	6413      	str	r3, [r2, #64]	; 0x40
 8004946:	4b7a      	ldr	r3, [pc, #488]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494e:	60bb      	str	r3, [r7, #8]
 8004950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004952:	2301      	movs	r3, #1
 8004954:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004956:	4b77      	ldr	r3, [pc, #476]	; (8004b34 <HAL_RCC_OscConfig+0x474>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495e:	2b00      	cmp	r3, #0
 8004960:	d118      	bne.n	8004994 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004962:	4b74      	ldr	r3, [pc, #464]	; (8004b34 <HAL_RCC_OscConfig+0x474>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a73      	ldr	r2, [pc, #460]	; (8004b34 <HAL_RCC_OscConfig+0x474>)
 8004968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800496c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800496e:	f7fe f831 	bl	80029d4 <HAL_GetTick>
 8004972:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004974:	e008      	b.n	8004988 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004976:	f7fe f82d 	bl	80029d4 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e10c      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004988:	4b6a      	ldr	r3, [pc, #424]	; (8004b34 <HAL_RCC_OscConfig+0x474>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0f0      	beq.n	8004976 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d106      	bne.n	80049aa <HAL_RCC_OscConfig+0x2ea>
 800499c:	4b64      	ldr	r3, [pc, #400]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 800499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a0:	4a63      	ldr	r2, [pc, #396]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049a2:	f043 0301 	orr.w	r3, r3, #1
 80049a6:	6713      	str	r3, [r2, #112]	; 0x70
 80049a8:	e01c      	b.n	80049e4 <HAL_RCC_OscConfig+0x324>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2b05      	cmp	r3, #5
 80049b0:	d10c      	bne.n	80049cc <HAL_RCC_OscConfig+0x30c>
 80049b2:	4b5f      	ldr	r3, [pc, #380]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b6:	4a5e      	ldr	r2, [pc, #376]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049b8:	f043 0304 	orr.w	r3, r3, #4
 80049bc:	6713      	str	r3, [r2, #112]	; 0x70
 80049be:	4b5c      	ldr	r3, [pc, #368]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c2:	4a5b      	ldr	r2, [pc, #364]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	6713      	str	r3, [r2, #112]	; 0x70
 80049ca:	e00b      	b.n	80049e4 <HAL_RCC_OscConfig+0x324>
 80049cc:	4b58      	ldr	r3, [pc, #352]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d0:	4a57      	ldr	r2, [pc, #348]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049d2:	f023 0301 	bic.w	r3, r3, #1
 80049d6:	6713      	str	r3, [r2, #112]	; 0x70
 80049d8:	4b55      	ldr	r3, [pc, #340]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049dc:	4a54      	ldr	r2, [pc, #336]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049de:	f023 0304 	bic.w	r3, r3, #4
 80049e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d015      	beq.n	8004a18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ec:	f7fd fff2 	bl	80029d4 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049f2:	e00a      	b.n	8004a0a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f4:	f7fd ffee 	bl	80029d4 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e0cb      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a0a:	4b49      	ldr	r3, [pc, #292]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0ee      	beq.n	80049f4 <HAL_RCC_OscConfig+0x334>
 8004a16:	e014      	b.n	8004a42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a18:	f7fd ffdc 	bl	80029d4 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a1e:	e00a      	b.n	8004a36 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a20:	f7fd ffd8 	bl	80029d4 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e0b5      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a36:	4b3e      	ldr	r3, [pc, #248]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1ee      	bne.n	8004a20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a42:	7dfb      	ldrb	r3, [r7, #23]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d105      	bne.n	8004a54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a48:	4b39      	ldr	r3, [pc, #228]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	4a38      	ldr	r2, [pc, #224]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 80a1 	beq.w	8004ba0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a5e:	4b34      	ldr	r3, [pc, #208]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 030c 	and.w	r3, r3, #12
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d05c      	beq.n	8004b24 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d141      	bne.n	8004af6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a72:	4b31      	ldr	r3, [pc, #196]	; (8004b38 <HAL_RCC_OscConfig+0x478>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a78:	f7fd ffac 	bl	80029d4 <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a80:	f7fd ffa8 	bl	80029d4 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e087      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a92:	4b27      	ldr	r3, [pc, #156]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1f0      	bne.n	8004a80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69da      	ldr	r2, [r3, #28]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	019b      	lsls	r3, r3, #6
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab4:	085b      	lsrs	r3, r3, #1
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	041b      	lsls	r3, r3, #16
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	061b      	lsls	r3, r3, #24
 8004ac2:	491b      	ldr	r1, [pc, #108]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ac8:	4b1b      	ldr	r3, [pc, #108]	; (8004b38 <HAL_RCC_OscConfig+0x478>)
 8004aca:	2201      	movs	r2, #1
 8004acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ace:	f7fd ff81 	bl	80029d4 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad6:	f7fd ff7d 	bl	80029d4 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e05c      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae8:	4b11      	ldr	r3, [pc, #68]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0f0      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x416>
 8004af4:	e054      	b.n	8004ba0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004af6:	4b10      	ldr	r3, [pc, #64]	; (8004b38 <HAL_RCC_OscConfig+0x478>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afc:	f7fd ff6a 	bl	80029d4 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b04:	f7fd ff66 	bl	80029d4 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e045      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b16:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1f0      	bne.n	8004b04 <HAL_RCC_OscConfig+0x444>
 8004b22:	e03d      	b.n	8004ba0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d107      	bne.n	8004b3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e038      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
 8004b30:	40023800 	.word	0x40023800
 8004b34:	40007000 	.word	0x40007000
 8004b38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b3c:	4b1b      	ldr	r3, [pc, #108]	; (8004bac <HAL_RCC_OscConfig+0x4ec>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d028      	beq.n	8004b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d121      	bne.n	8004b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d11a      	bne.n	8004b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d111      	bne.n	8004b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b82:	085b      	lsrs	r3, r3, #1
 8004b84:	3b01      	subs	r3, #1
 8004b86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d107      	bne.n	8004b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d001      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e000      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3718      	adds	r7, #24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	40023800 	.word	0x40023800

08004bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e0cc      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bc4:	4b68      	ldr	r3, [pc, #416]	; (8004d68 <HAL_RCC_ClockConfig+0x1b8>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d90c      	bls.n	8004bec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd2:	4b65      	ldr	r3, [pc, #404]	; (8004d68 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bda:	4b63      	ldr	r3, [pc, #396]	; (8004d68 <HAL_RCC_ClockConfig+0x1b8>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d001      	beq.n	8004bec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0b8      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d020      	beq.n	8004c3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d005      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c04:	4b59      	ldr	r3, [pc, #356]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	4a58      	ldr	r2, [pc, #352]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c1c:	4b53      	ldr	r3, [pc, #332]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	4a52      	ldr	r2, [pc, #328]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c28:	4b50      	ldr	r3, [pc, #320]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	494d      	ldr	r1, [pc, #308]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d044      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d107      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c4e:	4b47      	ldr	r3, [pc, #284]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d119      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e07f      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d003      	beq.n	8004c6e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	d107      	bne.n	8004c7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c6e:	4b3f      	ldr	r3, [pc, #252]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d109      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e06f      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c7e:	4b3b      	ldr	r3, [pc, #236]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e067      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c8e:	4b37      	ldr	r3, [pc, #220]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f023 0203 	bic.w	r2, r3, #3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	4934      	ldr	r1, [pc, #208]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ca0:	f7fd fe98 	bl	80029d4 <HAL_GetTick>
 8004ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ca6:	e00a      	b.n	8004cbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca8:	f7fd fe94 	bl	80029d4 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e04f      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cbe:	4b2b      	ldr	r3, [pc, #172]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 020c 	and.w	r2, r3, #12
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d1eb      	bne.n	8004ca8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cd0:	4b25      	ldr	r3, [pc, #148]	; (8004d68 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d20c      	bcs.n	8004cf8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cde:	4b22      	ldr	r3, [pc, #136]	; (8004d68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce6:	4b20      	ldr	r3, [pc, #128]	; (8004d68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d001      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e032      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d008      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d04:	4b19      	ldr	r3, [pc, #100]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	4916      	ldr	r1, [pc, #88]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d009      	beq.n	8004d36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d22:	4b12      	ldr	r3, [pc, #72]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	490e      	ldr	r1, [pc, #56]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d36:	f000 f821 	bl	8004d7c <HAL_RCC_GetSysClockFreq>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	091b      	lsrs	r3, r3, #4
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	490a      	ldr	r1, [pc, #40]	; (8004d70 <HAL_RCC_ClockConfig+0x1c0>)
 8004d48:	5ccb      	ldrb	r3, [r1, r3]
 8004d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d4e:	4a09      	ldr	r2, [pc, #36]	; (8004d74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d52:	4b09      	ldr	r3, [pc, #36]	; (8004d78 <HAL_RCC_ClockConfig+0x1c8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fd fdf8 	bl	800294c <HAL_InitTick>

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40023c00 	.word	0x40023c00
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	0800ac34 	.word	0x0800ac34
 8004d74:	2000005c 	.word	0x2000005c
 8004d78:	20000060 	.word	0x20000060

08004d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d80:	b094      	sub	sp, #80	; 0x50
 8004d82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d94:	4b79      	ldr	r3, [pc, #484]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f003 030c 	and.w	r3, r3, #12
 8004d9c:	2b08      	cmp	r3, #8
 8004d9e:	d00d      	beq.n	8004dbc <HAL_RCC_GetSysClockFreq+0x40>
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	f200 80e1 	bhi.w	8004f68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <HAL_RCC_GetSysClockFreq+0x34>
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d003      	beq.n	8004db6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004dae:	e0db      	b.n	8004f68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004db0:	4b73      	ldr	r3, [pc, #460]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x204>)
 8004db2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004db4:	e0db      	b.n	8004f6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004db6:	4b73      	ldr	r3, [pc, #460]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x208>)
 8004db8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dba:	e0d8      	b.n	8004f6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dbc:	4b6f      	ldr	r3, [pc, #444]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dc4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dc6:	4b6d      	ldr	r3, [pc, #436]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d063      	beq.n	8004e9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dd2:	4b6a      	ldr	r3, [pc, #424]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	099b      	lsrs	r3, r3, #6
 8004dd8:	2200      	movs	r2, #0
 8004dda:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ddc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de4:	633b      	str	r3, [r7, #48]	; 0x30
 8004de6:	2300      	movs	r3, #0
 8004de8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004dee:	4622      	mov	r2, r4
 8004df0:	462b      	mov	r3, r5
 8004df2:	f04f 0000 	mov.w	r0, #0
 8004df6:	f04f 0100 	mov.w	r1, #0
 8004dfa:	0159      	lsls	r1, r3, #5
 8004dfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e00:	0150      	lsls	r0, r2, #5
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	4621      	mov	r1, r4
 8004e08:	1a51      	subs	r1, r2, r1
 8004e0a:	6139      	str	r1, [r7, #16]
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	eb63 0301 	sbc.w	r3, r3, r1
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	f04f 0300 	mov.w	r3, #0
 8004e1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e20:	4659      	mov	r1, fp
 8004e22:	018b      	lsls	r3, r1, #6
 8004e24:	4651      	mov	r1, sl
 8004e26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e2a:	4651      	mov	r1, sl
 8004e2c:	018a      	lsls	r2, r1, #6
 8004e2e:	4651      	mov	r1, sl
 8004e30:	ebb2 0801 	subs.w	r8, r2, r1
 8004e34:	4659      	mov	r1, fp
 8004e36:	eb63 0901 	sbc.w	r9, r3, r1
 8004e3a:	f04f 0200 	mov.w	r2, #0
 8004e3e:	f04f 0300 	mov.w	r3, #0
 8004e42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e4e:	4690      	mov	r8, r2
 8004e50:	4699      	mov	r9, r3
 8004e52:	4623      	mov	r3, r4
 8004e54:	eb18 0303 	adds.w	r3, r8, r3
 8004e58:	60bb      	str	r3, [r7, #8]
 8004e5a:	462b      	mov	r3, r5
 8004e5c:	eb49 0303 	adc.w	r3, r9, r3
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	f04f 0300 	mov.w	r3, #0
 8004e6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e6e:	4629      	mov	r1, r5
 8004e70:	024b      	lsls	r3, r1, #9
 8004e72:	4621      	mov	r1, r4
 8004e74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e78:	4621      	mov	r1, r4
 8004e7a:	024a      	lsls	r2, r1, #9
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	4619      	mov	r1, r3
 8004e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e82:	2200      	movs	r2, #0
 8004e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e8c:	f7fb feb4 	bl	8000bf8 <__aeabi_uldivmod>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	4613      	mov	r3, r2
 8004e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e98:	e058      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e9a:	4b38      	ldr	r3, [pc, #224]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	099b      	lsrs	r3, r3, #6
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	4611      	mov	r1, r2
 8004ea6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004eaa:	623b      	str	r3, [r7, #32]
 8004eac:	2300      	movs	r3, #0
 8004eae:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004eb4:	4642      	mov	r2, r8
 8004eb6:	464b      	mov	r3, r9
 8004eb8:	f04f 0000 	mov.w	r0, #0
 8004ebc:	f04f 0100 	mov.w	r1, #0
 8004ec0:	0159      	lsls	r1, r3, #5
 8004ec2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ec6:	0150      	lsls	r0, r2, #5
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	4641      	mov	r1, r8
 8004ece:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ed2:	4649      	mov	r1, r9
 8004ed4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ee4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ee8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004eec:	ebb2 040a 	subs.w	r4, r2, sl
 8004ef0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	00eb      	lsls	r3, r5, #3
 8004efe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f02:	00e2      	lsls	r2, r4, #3
 8004f04:	4614      	mov	r4, r2
 8004f06:	461d      	mov	r5, r3
 8004f08:	4643      	mov	r3, r8
 8004f0a:	18e3      	adds	r3, r4, r3
 8004f0c:	603b      	str	r3, [r7, #0]
 8004f0e:	464b      	mov	r3, r9
 8004f10:	eb45 0303 	adc.w	r3, r5, r3
 8004f14:	607b      	str	r3, [r7, #4]
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	f04f 0300 	mov.w	r3, #0
 8004f1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f22:	4629      	mov	r1, r5
 8004f24:	028b      	lsls	r3, r1, #10
 8004f26:	4621      	mov	r1, r4
 8004f28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f2c:	4621      	mov	r1, r4
 8004f2e:	028a      	lsls	r2, r1, #10
 8004f30:	4610      	mov	r0, r2
 8004f32:	4619      	mov	r1, r3
 8004f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f36:	2200      	movs	r2, #0
 8004f38:	61bb      	str	r3, [r7, #24]
 8004f3a:	61fa      	str	r2, [r7, #28]
 8004f3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f40:	f7fb fe5a 	bl	8000bf8 <__aeabi_uldivmod>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4613      	mov	r3, r2
 8004f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004f4c:	4b0b      	ldr	r3, [pc, #44]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	0c1b      	lsrs	r3, r3, #16
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	3301      	adds	r3, #1
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004f5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f66:	e002      	b.n	8004f6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f68:	4b05      	ldr	r3, [pc, #20]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3750      	adds	r7, #80	; 0x50
 8004f74:	46bd      	mov	sp, r7
 8004f76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40023800 	.word	0x40023800
 8004f80:	00f42400 	.word	0x00f42400
 8004f84:	007a1200 	.word	0x007a1200

08004f88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f8c:	4b03      	ldr	r3, [pc, #12]	; (8004f9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	2000005c 	.word	0x2000005c

08004fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fa4:	f7ff fff0 	bl	8004f88 <HAL_RCC_GetHCLKFreq>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	4b05      	ldr	r3, [pc, #20]	; (8004fc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	0a9b      	lsrs	r3, r3, #10
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	4903      	ldr	r1, [pc, #12]	; (8004fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fb6:	5ccb      	ldrb	r3, [r1, r3]
 8004fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	0800ac44 	.word	0x0800ac44

08004fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fcc:	f7ff ffdc 	bl	8004f88 <HAL_RCC_GetHCLKFreq>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	4b05      	ldr	r3, [pc, #20]	; (8004fe8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	0b5b      	lsrs	r3, r3, #13
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	4903      	ldr	r1, [pc, #12]	; (8004fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fde:	5ccb      	ldrb	r3, [r1, r3]
 8004fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	0800ac44 	.word	0x0800ac44

08004ff0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e07b      	b.n	80050fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	2b00      	cmp	r3, #0
 8005008:	d108      	bne.n	800501c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005012:	d009      	beq.n	8005028 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	61da      	str	r2, [r3, #28]
 800501a:	e005      	b.n	8005028 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d106      	bne.n	8005048 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7fc fdb8 	bl	8001bb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800505e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005070:	431a      	orrs	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	431a      	orrs	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005098:	431a      	orrs	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050a2:	431a      	orrs	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a1b      	ldr	r3, [r3, #32]
 80050a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ac:	ea42 0103 	orr.w	r1, r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	430a      	orrs	r2, r1
 80050be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	0c1b      	lsrs	r3, r3, #16
 80050c6:	f003 0104 	and.w	r1, r3, #4
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	f003 0210 	and.w	r2, r3, #16
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69da      	ldr	r2, [r3, #28]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b088      	sub	sp, #32
 8005106:	af00      	add	r7, sp, #0
 8005108:	60f8      	str	r0, [r7, #12]
 800510a:	60b9      	str	r1, [r7, #8]
 800510c:	603b      	str	r3, [r7, #0]
 800510e:	4613      	mov	r3, r2
 8005110:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005112:	f7fd fc5f 	bl	80029d4 <HAL_GetTick>
 8005116:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005118:	88fb      	ldrh	r3, [r7, #6]
 800511a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b01      	cmp	r3, #1
 8005126:	d001      	beq.n	800512c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005128:	2302      	movs	r3, #2
 800512a:	e12a      	b.n	8005382 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d002      	beq.n	8005138 <HAL_SPI_Transmit+0x36>
 8005132:	88fb      	ldrh	r3, [r7, #6]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d101      	bne.n	800513c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e122      	b.n	8005382 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005142:	2b01      	cmp	r3, #1
 8005144:	d101      	bne.n	800514a <HAL_SPI_Transmit+0x48>
 8005146:	2302      	movs	r3, #2
 8005148:	e11b      	b.n	8005382 <HAL_SPI_Transmit+0x280>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2203      	movs	r2, #3
 8005156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	88fa      	ldrh	r2, [r7, #6]
 800516a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	88fa      	ldrh	r2, [r7, #6]
 8005170:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005198:	d10f      	bne.n	80051ba <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c4:	2b40      	cmp	r3, #64	; 0x40
 80051c6:	d007      	beq.n	80051d8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051e0:	d152      	bne.n	8005288 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <HAL_SPI_Transmit+0xee>
 80051ea:	8b7b      	ldrh	r3, [r7, #26]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d145      	bne.n	800527c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f4:	881a      	ldrh	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005200:	1c9a      	adds	r2, r3, #2
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005214:	e032      	b.n	800527c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b02      	cmp	r3, #2
 8005222:	d112      	bne.n	800524a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005228:	881a      	ldrh	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005234:	1c9a      	adds	r2, r3, #2
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800523e:	b29b      	uxth	r3, r3
 8005240:	3b01      	subs	r3, #1
 8005242:	b29a      	uxth	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	86da      	strh	r2, [r3, #54]	; 0x36
 8005248:	e018      	b.n	800527c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800524a:	f7fd fbc3 	bl	80029d4 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d803      	bhi.n	8005262 <HAL_SPI_Transmit+0x160>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005260:	d102      	bne.n	8005268 <HAL_SPI_Transmit+0x166>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d109      	bne.n	800527c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e082      	b.n	8005382 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005280:	b29b      	uxth	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1c7      	bne.n	8005216 <HAL_SPI_Transmit+0x114>
 8005286:	e053      	b.n	8005330 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <HAL_SPI_Transmit+0x194>
 8005290:	8b7b      	ldrh	r3, [r7, #26]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d147      	bne.n	8005326 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	330c      	adds	r3, #12
 80052a0:	7812      	ldrb	r2, [r2, #0]
 80052a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	3b01      	subs	r3, #1
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80052bc:	e033      	b.n	8005326 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d113      	bne.n	80052f4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	330c      	adds	r3, #12
 80052d6:	7812      	ldrb	r2, [r2, #0]
 80052d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80052f2:	e018      	b.n	8005326 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052f4:	f7fd fb6e 	bl	80029d4 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	429a      	cmp	r2, r3
 8005302:	d803      	bhi.n	800530c <HAL_SPI_Transmit+0x20a>
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530a:	d102      	bne.n	8005312 <HAL_SPI_Transmit+0x210>
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d109      	bne.n	8005326 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e02d      	b.n	8005382 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800532a:	b29b      	uxth	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1c6      	bne.n	80052be <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005330:	69fa      	ldr	r2, [r7, #28]
 8005332:	6839      	ldr	r1, [r7, #0]
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 f8b1 	bl	800549c <SPI_EndRxTxTransaction>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d002      	beq.n	8005346 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2220      	movs	r2, #32
 8005344:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10a      	bne.n	8005364 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800534e:	2300      	movs	r3, #0
 8005350:	617b      	str	r3, [r7, #20]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	617b      	str	r3, [r7, #20]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	617b      	str	r3, [r7, #20]
 8005362:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e000      	b.n	8005382 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005380:	2300      	movs	r3, #0
  }
}
 8005382:	4618      	mov	r0, r3
 8005384:	3720      	adds	r7, #32
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
	...

0800538c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	603b      	str	r3, [r7, #0]
 8005398:	4613      	mov	r3, r2
 800539a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800539c:	f7fd fb1a 	bl	80029d4 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a4:	1a9b      	subs	r3, r3, r2
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	4413      	add	r3, r2
 80053aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053ac:	f7fd fb12 	bl	80029d4 <HAL_GetTick>
 80053b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053b2:	4b39      	ldr	r3, [pc, #228]	; (8005498 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	015b      	lsls	r3, r3, #5
 80053b8:	0d1b      	lsrs	r3, r3, #20
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	fb02 f303 	mul.w	r3, r2, r3
 80053c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053c2:	e054      	b.n	800546e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ca:	d050      	beq.n	800546e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053cc:	f7fd fb02 	bl	80029d4 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	69fa      	ldr	r2, [r7, #28]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d902      	bls.n	80053e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d13d      	bne.n	800545e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053fa:	d111      	bne.n	8005420 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005404:	d004      	beq.n	8005410 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540e:	d107      	bne.n	8005420 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800541e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005428:	d10f      	bne.n	800544a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005448:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e017      	b.n	800548e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	3b01      	subs	r3, #1
 800546c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	4013      	ands	r3, r2
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	429a      	cmp	r2, r3
 800547c:	bf0c      	ite	eq
 800547e:	2301      	moveq	r3, #1
 8005480:	2300      	movne	r3, #0
 8005482:	b2db      	uxtb	r3, r3
 8005484:	461a      	mov	r2, r3
 8005486:	79fb      	ldrb	r3, [r7, #7]
 8005488:	429a      	cmp	r2, r3
 800548a:	d19b      	bne.n	80053c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3720      	adds	r7, #32
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	2000005c 	.word	0x2000005c

0800549c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b088      	sub	sp, #32
 80054a0:	af02      	add	r7, sp, #8
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2201      	movs	r2, #1
 80054b0:	2102      	movs	r1, #2
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f7ff ff6a 	bl	800538c <SPI_WaitFlagStateUntilTimeout>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d007      	beq.n	80054ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c2:	f043 0220 	orr.w	r2, r3, #32
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e032      	b.n	8005534 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80054ce:	4b1b      	ldr	r3, [pc, #108]	; (800553c <SPI_EndRxTxTransaction+0xa0>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a1b      	ldr	r2, [pc, #108]	; (8005540 <SPI_EndRxTxTransaction+0xa4>)
 80054d4:	fba2 2303 	umull	r2, r3, r2, r3
 80054d8:	0d5b      	lsrs	r3, r3, #21
 80054da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054de:	fb02 f303 	mul.w	r3, r2, r3
 80054e2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054ec:	d112      	bne.n	8005514 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	2200      	movs	r2, #0
 80054f6:	2180      	movs	r1, #128	; 0x80
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f7ff ff47 	bl	800538c <SPI_WaitFlagStateUntilTimeout>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d016      	beq.n	8005532 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005508:	f043 0220 	orr.w	r2, r3, #32
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e00f      	b.n	8005534 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00a      	beq.n	8005530 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	3b01      	subs	r3, #1
 800551e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552a:	2b80      	cmp	r3, #128	; 0x80
 800552c:	d0f2      	beq.n	8005514 <SPI_EndRxTxTransaction+0x78>
 800552e:	e000      	b.n	8005532 <SPI_EndRxTxTransaction+0x96>
        break;
 8005530:	bf00      	nop
  }

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3718      	adds	r7, #24
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	2000005c 	.word	0x2000005c
 8005540:	165e9f81 	.word	0x165e9f81

08005544 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800554e:	2300      	movs	r3, #0
 8005550:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d104      	bne.n	8005562 <HAL_TIM_IC_Start_IT+0x1e>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800555e:	b2db      	uxtb	r3, r3
 8005560:	e013      	b.n	800558a <HAL_TIM_IC_Start_IT+0x46>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b04      	cmp	r3, #4
 8005566:	d104      	bne.n	8005572 <HAL_TIM_IC_Start_IT+0x2e>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800556e:	b2db      	uxtb	r3, r3
 8005570:	e00b      	b.n	800558a <HAL_TIM_IC_Start_IT+0x46>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b08      	cmp	r3, #8
 8005576:	d104      	bne.n	8005582 <HAL_TIM_IC_Start_IT+0x3e>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800557e:	b2db      	uxtb	r3, r3
 8005580:	e003      	b.n	800558a <HAL_TIM_IC_Start_IT+0x46>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005588:	b2db      	uxtb	r3, r3
 800558a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d104      	bne.n	800559c <HAL_TIM_IC_Start_IT+0x58>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005598:	b2db      	uxtb	r3, r3
 800559a:	e013      	b.n	80055c4 <HAL_TIM_IC_Start_IT+0x80>
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2b04      	cmp	r3, #4
 80055a0:	d104      	bne.n	80055ac <HAL_TIM_IC_Start_IT+0x68>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	e00b      	b.n	80055c4 <HAL_TIM_IC_Start_IT+0x80>
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	2b08      	cmp	r3, #8
 80055b0:	d104      	bne.n	80055bc <HAL_TIM_IC_Start_IT+0x78>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	e003      	b.n	80055c4 <HAL_TIM_IC_Start_IT+0x80>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80055c6:	7bbb      	ldrb	r3, [r7, #14]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d102      	bne.n	80055d2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80055cc:	7b7b      	ldrb	r3, [r7, #13]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d001      	beq.n	80055d6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e0c2      	b.n	800575c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d104      	bne.n	80055e6 <HAL_TIM_IC_Start_IT+0xa2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055e4:	e013      	b.n	800560e <HAL_TIM_IC_Start_IT+0xca>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d104      	bne.n	80055f6 <HAL_TIM_IC_Start_IT+0xb2>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055f4:	e00b      	b.n	800560e <HAL_TIM_IC_Start_IT+0xca>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d104      	bne.n	8005606 <HAL_TIM_IC_Start_IT+0xc2>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005604:	e003      	b.n	800560e <HAL_TIM_IC_Start_IT+0xca>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2202      	movs	r2, #2
 800560a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d104      	bne.n	800561e <HAL_TIM_IC_Start_IT+0xda>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800561c:	e013      	b.n	8005646 <HAL_TIM_IC_Start_IT+0x102>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b04      	cmp	r3, #4
 8005622:	d104      	bne.n	800562e <HAL_TIM_IC_Start_IT+0xea>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800562c:	e00b      	b.n	8005646 <HAL_TIM_IC_Start_IT+0x102>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b08      	cmp	r3, #8
 8005632:	d104      	bne.n	800563e <HAL_TIM_IC_Start_IT+0xfa>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2202      	movs	r2, #2
 8005638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800563c:	e003      	b.n	8005646 <HAL_TIM_IC_Start_IT+0x102>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2202      	movs	r2, #2
 8005642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b0c      	cmp	r3, #12
 800564a:	d841      	bhi.n	80056d0 <HAL_TIM_IC_Start_IT+0x18c>
 800564c:	a201      	add	r2, pc, #4	; (adr r2, 8005654 <HAL_TIM_IC_Start_IT+0x110>)
 800564e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005652:	bf00      	nop
 8005654:	08005689 	.word	0x08005689
 8005658:	080056d1 	.word	0x080056d1
 800565c:	080056d1 	.word	0x080056d1
 8005660:	080056d1 	.word	0x080056d1
 8005664:	0800569b 	.word	0x0800569b
 8005668:	080056d1 	.word	0x080056d1
 800566c:	080056d1 	.word	0x080056d1
 8005670:	080056d1 	.word	0x080056d1
 8005674:	080056ad 	.word	0x080056ad
 8005678:	080056d1 	.word	0x080056d1
 800567c:	080056d1 	.word	0x080056d1
 8005680:	080056d1 	.word	0x080056d1
 8005684:	080056bf 	.word	0x080056bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0202 	orr.w	r2, r2, #2
 8005696:	60da      	str	r2, [r3, #12]
      break;
 8005698:	e01d      	b.n	80056d6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68da      	ldr	r2, [r3, #12]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f042 0204 	orr.w	r2, r2, #4
 80056a8:	60da      	str	r2, [r3, #12]
      break;
 80056aa:	e014      	b.n	80056d6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68da      	ldr	r2, [r3, #12]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0208 	orr.w	r2, r2, #8
 80056ba:	60da      	str	r2, [r3, #12]
      break;
 80056bc:	e00b      	b.n	80056d6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68da      	ldr	r2, [r3, #12]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f042 0210 	orr.w	r2, r2, #16
 80056cc:	60da      	str	r2, [r3, #12]
      break;
 80056ce:	e002      	b.n	80056d6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	73fb      	strb	r3, [r7, #15]
      break;
 80056d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d13e      	bne.n	800575a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2201      	movs	r2, #1
 80056e2:	6839      	ldr	r1, [r7, #0]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fb8f 	bl	8005e08 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a1d      	ldr	r2, [pc, #116]	; (8005764 <HAL_TIM_IC_Start_IT+0x220>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d018      	beq.n	8005726 <HAL_TIM_IC_Start_IT+0x1e2>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fc:	d013      	beq.n	8005726 <HAL_TIM_IC_Start_IT+0x1e2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a19      	ldr	r2, [pc, #100]	; (8005768 <HAL_TIM_IC_Start_IT+0x224>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d00e      	beq.n	8005726 <HAL_TIM_IC_Start_IT+0x1e2>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a17      	ldr	r2, [pc, #92]	; (800576c <HAL_TIM_IC_Start_IT+0x228>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d009      	beq.n	8005726 <HAL_TIM_IC_Start_IT+0x1e2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a16      	ldr	r2, [pc, #88]	; (8005770 <HAL_TIM_IC_Start_IT+0x22c>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d004      	beq.n	8005726 <HAL_TIM_IC_Start_IT+0x1e2>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a14      	ldr	r2, [pc, #80]	; (8005774 <HAL_TIM_IC_Start_IT+0x230>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d111      	bne.n	800574a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f003 0307 	and.w	r3, r3, #7
 8005730:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2b06      	cmp	r3, #6
 8005736:	d010      	beq.n	800575a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0201 	orr.w	r2, r2, #1
 8005746:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005748:	e007      	b.n	800575a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f042 0201 	orr.w	r2, r2, #1
 8005758:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800575a:	7bfb      	ldrb	r3, [r7, #15]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	40010000 	.word	0x40010000
 8005768:	40000400 	.word	0x40000400
 800576c:	40000800 	.word	0x40000800
 8005770:	40000c00 	.word	0x40000c00
 8005774:	40014000 	.word	0x40014000

08005778 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e097      	b.n	80058bc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d106      	bne.n	80057a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7fc feef 	bl	8002584 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2202      	movs	r2, #2
 80057aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6812      	ldr	r2, [r2, #0]
 80057b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057bc:	f023 0307 	bic.w	r3, r3, #7
 80057c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	3304      	adds	r3, #4
 80057ca:	4619      	mov	r1, r3
 80057cc:	4610      	mov	r0, r2
 80057ce:	f000 fa8f 	bl	8005cf0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057fa:	f023 0303 	bic.w	r3, r3, #3
 80057fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	021b      	lsls	r3, r3, #8
 800580a:	4313      	orrs	r3, r2
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4313      	orrs	r3, r2
 8005810:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005818:	f023 030c 	bic.w	r3, r3, #12
 800581c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005824:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005828:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	021b      	lsls	r3, r3, #8
 8005834:	4313      	orrs	r3, r2
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	4313      	orrs	r3, r2
 800583a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	011a      	lsls	r2, r3, #4
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	031b      	lsls	r3, r3, #12
 8005848:	4313      	orrs	r3, r2
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005856:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800585e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	011b      	lsls	r3, r3, #4
 800586a:	4313      	orrs	r3, r2
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3718      	adds	r7, #24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80058ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d110      	bne.n	8005916 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d102      	bne.n	8005900 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80058fa:	7b7b      	ldrb	r3, [r7, #13]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d001      	beq.n	8005904 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e089      	b.n	8005a18 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005914:	e031      	b.n	800597a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b04      	cmp	r3, #4
 800591a:	d110      	bne.n	800593e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800591c:	7bbb      	ldrb	r3, [r7, #14]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d102      	bne.n	8005928 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005922:	7b3b      	ldrb	r3, [r7, #12]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d001      	beq.n	800592c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e075      	b.n	8005a18 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800593c:	e01d      	b.n	800597a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800593e:	7bfb      	ldrb	r3, [r7, #15]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d108      	bne.n	8005956 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005944:	7bbb      	ldrb	r3, [r7, #14]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d105      	bne.n	8005956 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800594a:	7b7b      	ldrb	r3, [r7, #13]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d102      	bne.n	8005956 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005950:	7b3b      	ldrb	r3, [r7, #12]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d001      	beq.n	800595a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e05e      	b.n	8005a18 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2202      	movs	r2, #2
 800595e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2202      	movs	r2, #2
 8005966:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2202      	movs	r2, #2
 800596e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2202      	movs	r2, #2
 8005976:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2b04      	cmp	r3, #4
 8005984:	d010      	beq.n	80059a8 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005986:	e01f      	b.n	80059c8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2201      	movs	r2, #1
 800598e:	2100      	movs	r1, #0
 8005990:	4618      	mov	r0, r3
 8005992:	f000 fa39 	bl	8005e08 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0202 	orr.w	r2, r2, #2
 80059a4:	60da      	str	r2, [r3, #12]
      break;
 80059a6:	e02e      	b.n	8005a06 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2201      	movs	r2, #1
 80059ae:	2104      	movs	r1, #4
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 fa29 	bl	8005e08 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f042 0204 	orr.w	r2, r2, #4
 80059c4:	60da      	str	r2, [r3, #12]
      break;
 80059c6:	e01e      	b.n	8005a06 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2201      	movs	r2, #1
 80059ce:	2100      	movs	r1, #0
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 fa19 	bl	8005e08 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2201      	movs	r2, #1
 80059dc:	2104      	movs	r1, #4
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fa12 	bl	8005e08 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0202 	orr.w	r2, r2, #2
 80059f2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0204 	orr.w	r2, r2, #4
 8005a02:	60da      	str	r2, [r3, #12]
      break;
 8005a04:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f042 0201 	orr.w	r2, r2, #1
 8005a14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d020      	beq.n	8005a84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01b      	beq.n	8005a84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f06f 0202 	mvn.w	r2, #2
 8005a54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	f003 0303 	and.w	r3, r3, #3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7fb ff6c 	bl	8001948 <HAL_TIM_IC_CaptureCallback>
 8005a70:	e005      	b.n	8005a7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f912 	bl	8005c9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f919 	bl	8005cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f003 0304 	and.w	r3, r3, #4
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d020      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f003 0304 	and.w	r3, r3, #4
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d01b      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f06f 0204 	mvn.w	r2, #4
 8005aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2202      	movs	r2, #2
 8005aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7fb ff46 	bl	8001948 <HAL_TIM_IC_CaptureCallback>
 8005abc:	e005      	b.n	8005aca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f8ec 	bl	8005c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f8f3 	bl	8005cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f003 0308 	and.w	r3, r3, #8
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d020      	beq.n	8005b1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f003 0308 	and.w	r3, r3, #8
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d01b      	beq.n	8005b1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f06f 0208 	mvn.w	r2, #8
 8005aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2204      	movs	r2, #4
 8005af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	f003 0303 	and.w	r3, r3, #3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7fb ff20 	bl	8001948 <HAL_TIM_IC_CaptureCallback>
 8005b08:	e005      	b.n	8005b16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f8c6 	bl	8005c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f8cd 	bl	8005cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	f003 0310 	and.w	r3, r3, #16
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d020      	beq.n	8005b68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f003 0310 	and.w	r3, r3, #16
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d01b      	beq.n	8005b68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f06f 0210 	mvn.w	r2, #16
 8005b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2208      	movs	r2, #8
 8005b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7fb fefa 	bl	8001948 <HAL_TIM_IC_CaptureCallback>
 8005b54:	e005      	b.n	8005b62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f8a0 	bl	8005c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f8a7 	bl	8005cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00c      	beq.n	8005b8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d007      	beq.n	8005b8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f06f 0201 	mvn.w	r2, #1
 8005b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f87e 	bl	8005c88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00c      	beq.n	8005bb0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d007      	beq.n	8005bb0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f9ca 	bl	8005f44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00c      	beq.n	8005bd4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d007      	beq.n	8005bd4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f878 	bl	8005cc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f003 0320 	and.w	r3, r3, #32
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00c      	beq.n	8005bf8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f003 0320 	and.w	r3, r3, #32
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d007      	beq.n	8005bf8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f06f 0220 	mvn.w	r2, #32
 8005bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f99c 	bl	8005f30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bf8:	bf00      	nop
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b0c      	cmp	r3, #12
 8005c12:	d831      	bhi.n	8005c78 <HAL_TIM_ReadCapturedValue+0x78>
 8005c14:	a201      	add	r2, pc, #4	; (adr r2, 8005c1c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1a:	bf00      	nop
 8005c1c:	08005c51 	.word	0x08005c51
 8005c20:	08005c79 	.word	0x08005c79
 8005c24:	08005c79 	.word	0x08005c79
 8005c28:	08005c79 	.word	0x08005c79
 8005c2c:	08005c5b 	.word	0x08005c5b
 8005c30:	08005c79 	.word	0x08005c79
 8005c34:	08005c79 	.word	0x08005c79
 8005c38:	08005c79 	.word	0x08005c79
 8005c3c:	08005c65 	.word	0x08005c65
 8005c40:	08005c79 	.word	0x08005c79
 8005c44:	08005c79 	.word	0x08005c79
 8005c48:	08005c79 	.word	0x08005c79
 8005c4c:	08005c6f 	.word	0x08005c6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c56:	60fb      	str	r3, [r7, #12]

      break;
 8005c58:	e00f      	b.n	8005c7a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c60:	60fb      	str	r3, [r7, #12]

      break;
 8005c62:	e00a      	b.n	8005c7a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6a:	60fb      	str	r3, [r7, #12]

      break;
 8005c6c:	e005      	b.n	8005c7a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c74:	60fb      	str	r3, [r7, #12]

      break;
 8005c76:	e000      	b.n	8005c7a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005c78:	bf00      	nop
  }

  return tmpreg;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(const TIM_HandleTypeDef *htim)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	7f1b      	ldrb	r3, [r3, #28]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a3a      	ldr	r2, [pc, #232]	; (8005dec <TIM_Base_SetConfig+0xfc>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d00f      	beq.n	8005d28 <TIM_Base_SetConfig+0x38>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d0e:	d00b      	beq.n	8005d28 <TIM_Base_SetConfig+0x38>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a37      	ldr	r2, [pc, #220]	; (8005df0 <TIM_Base_SetConfig+0x100>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d007      	beq.n	8005d28 <TIM_Base_SetConfig+0x38>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a36      	ldr	r2, [pc, #216]	; (8005df4 <TIM_Base_SetConfig+0x104>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d003      	beq.n	8005d28 <TIM_Base_SetConfig+0x38>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a35      	ldr	r2, [pc, #212]	; (8005df8 <TIM_Base_SetConfig+0x108>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d108      	bne.n	8005d3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a2b      	ldr	r2, [pc, #172]	; (8005dec <TIM_Base_SetConfig+0xfc>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d01b      	beq.n	8005d7a <TIM_Base_SetConfig+0x8a>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d48:	d017      	beq.n	8005d7a <TIM_Base_SetConfig+0x8a>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a28      	ldr	r2, [pc, #160]	; (8005df0 <TIM_Base_SetConfig+0x100>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d013      	beq.n	8005d7a <TIM_Base_SetConfig+0x8a>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a27      	ldr	r2, [pc, #156]	; (8005df4 <TIM_Base_SetConfig+0x104>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00f      	beq.n	8005d7a <TIM_Base_SetConfig+0x8a>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a26      	ldr	r2, [pc, #152]	; (8005df8 <TIM_Base_SetConfig+0x108>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d00b      	beq.n	8005d7a <TIM_Base_SetConfig+0x8a>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a25      	ldr	r2, [pc, #148]	; (8005dfc <TIM_Base_SetConfig+0x10c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d007      	beq.n	8005d7a <TIM_Base_SetConfig+0x8a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a24      	ldr	r2, [pc, #144]	; (8005e00 <TIM_Base_SetConfig+0x110>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d003      	beq.n	8005d7a <TIM_Base_SetConfig+0x8a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a23      	ldr	r2, [pc, #140]	; (8005e04 <TIM_Base_SetConfig+0x114>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d108      	bne.n	8005d8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a0e      	ldr	r2, [pc, #56]	; (8005dec <TIM_Base_SetConfig+0xfc>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d103      	bne.n	8005dc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	691a      	ldr	r2, [r3, #16]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d105      	bne.n	8005dde <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f023 0201 	bic.w	r2, r3, #1
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	611a      	str	r2, [r3, #16]
  }
}
 8005dde:	bf00      	nop
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	40010000 	.word	0x40010000
 8005df0:	40000400 	.word	0x40000400
 8005df4:	40000800 	.word	0x40000800
 8005df8:	40000c00 	.word	0x40000c00
 8005dfc:	40014000 	.word	0x40014000
 8005e00:	40014400 	.word	0x40014400
 8005e04:	40014800 	.word	0x40014800

08005e08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	f003 031f 	and.w	r3, r3, #31
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6a1a      	ldr	r2, [r3, #32]
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	43db      	mvns	r3, r3
 8005e2a:	401a      	ands	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6a1a      	ldr	r2, [r3, #32]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	f003 031f 	and.w	r3, r3, #31
 8005e3a:	6879      	ldr	r1, [r7, #4]
 8005e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e40:	431a      	orrs	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	621a      	str	r2, [r3, #32]
}
 8005e46:	bf00      	nop
 8005e48:	371c      	adds	r7, #28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
	...

08005e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e050      	b.n	8005f0e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a1c      	ldr	r2, [pc, #112]	; (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d018      	beq.n	8005ee2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb8:	d013      	beq.n	8005ee2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a18      	ldr	r2, [pc, #96]	; (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d00e      	beq.n	8005ee2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a16      	ldr	r2, [pc, #88]	; (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d009      	beq.n	8005ee2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a15      	ldr	r2, [pc, #84]	; (8005f28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d004      	beq.n	8005ee2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a13      	ldr	r2, [pc, #76]	; (8005f2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d10c      	bne.n	8005efc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ee8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	40010000 	.word	0x40010000
 8005f20:	40000400 	.word	0x40000400
 8005f24:	40000800 	.word	0x40000800
 8005f28:	40000c00 	.word	0x40000c00
 8005f2c:	40014000 	.word	0x40014000

08005f30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e042      	b.n	8005ff0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d106      	bne.n	8005f84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7fc fb78 	bl	8002674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2224      	movs	r2, #36	; 0x24
 8005f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 f82b 	bl	8005ff8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	691a      	ldr	r2, [r3, #16]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	695a      	ldr	r2, [r3, #20]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68da      	ldr	r2, [r3, #12]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ffc:	b0c0      	sub	sp, #256	; 0x100
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006014:	68d9      	ldr	r1, [r3, #12]
 8006016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	ea40 0301 	orr.w	r3, r0, r1
 8006020:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	431a      	orrs	r2, r3
 8006030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	431a      	orrs	r2, r3
 8006038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	4313      	orrs	r3, r2
 8006040:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006050:	f021 010c 	bic.w	r1, r1, #12
 8006054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800605e:	430b      	orrs	r3, r1
 8006060:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800606e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006072:	6999      	ldr	r1, [r3, #24]
 8006074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	ea40 0301 	orr.w	r3, r0, r1
 800607e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	4b8f      	ldr	r3, [pc, #572]	; (80062c4 <UART_SetConfig+0x2cc>)
 8006088:	429a      	cmp	r2, r3
 800608a:	d005      	beq.n	8006098 <UART_SetConfig+0xa0>
 800608c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	4b8d      	ldr	r3, [pc, #564]	; (80062c8 <UART_SetConfig+0x2d0>)
 8006094:	429a      	cmp	r2, r3
 8006096:	d104      	bne.n	80060a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006098:	f7fe ff96 	bl	8004fc8 <HAL_RCC_GetPCLK2Freq>
 800609c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80060a0:	e003      	b.n	80060aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060a2:	f7fe ff7d 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 80060a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060b4:	f040 810c 	bne.w	80062d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060bc:	2200      	movs	r2, #0
 80060be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80060c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80060ca:	4622      	mov	r2, r4
 80060cc:	462b      	mov	r3, r5
 80060ce:	1891      	adds	r1, r2, r2
 80060d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80060d2:	415b      	adcs	r3, r3
 80060d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80060da:	4621      	mov	r1, r4
 80060dc:	eb12 0801 	adds.w	r8, r2, r1
 80060e0:	4629      	mov	r1, r5
 80060e2:	eb43 0901 	adc.w	r9, r3, r1
 80060e6:	f04f 0200 	mov.w	r2, #0
 80060ea:	f04f 0300 	mov.w	r3, #0
 80060ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060fa:	4690      	mov	r8, r2
 80060fc:	4699      	mov	r9, r3
 80060fe:	4623      	mov	r3, r4
 8006100:	eb18 0303 	adds.w	r3, r8, r3
 8006104:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006108:	462b      	mov	r3, r5
 800610a:	eb49 0303 	adc.w	r3, r9, r3
 800610e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800611e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006122:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006126:	460b      	mov	r3, r1
 8006128:	18db      	adds	r3, r3, r3
 800612a:	653b      	str	r3, [r7, #80]	; 0x50
 800612c:	4613      	mov	r3, r2
 800612e:	eb42 0303 	adc.w	r3, r2, r3
 8006132:	657b      	str	r3, [r7, #84]	; 0x54
 8006134:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006138:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800613c:	f7fa fd5c 	bl	8000bf8 <__aeabi_uldivmod>
 8006140:	4602      	mov	r2, r0
 8006142:	460b      	mov	r3, r1
 8006144:	4b61      	ldr	r3, [pc, #388]	; (80062cc <UART_SetConfig+0x2d4>)
 8006146:	fba3 2302 	umull	r2, r3, r3, r2
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	011c      	lsls	r4, r3, #4
 800614e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006152:	2200      	movs	r2, #0
 8006154:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006158:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800615c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006160:	4642      	mov	r2, r8
 8006162:	464b      	mov	r3, r9
 8006164:	1891      	adds	r1, r2, r2
 8006166:	64b9      	str	r1, [r7, #72]	; 0x48
 8006168:	415b      	adcs	r3, r3
 800616a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800616c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006170:	4641      	mov	r1, r8
 8006172:	eb12 0a01 	adds.w	sl, r2, r1
 8006176:	4649      	mov	r1, r9
 8006178:	eb43 0b01 	adc.w	fp, r3, r1
 800617c:	f04f 0200 	mov.w	r2, #0
 8006180:	f04f 0300 	mov.w	r3, #0
 8006184:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006188:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800618c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006190:	4692      	mov	sl, r2
 8006192:	469b      	mov	fp, r3
 8006194:	4643      	mov	r3, r8
 8006196:	eb1a 0303 	adds.w	r3, sl, r3
 800619a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800619e:	464b      	mov	r3, r9
 80061a0:	eb4b 0303 	adc.w	r3, fp, r3
 80061a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80061b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80061bc:	460b      	mov	r3, r1
 80061be:	18db      	adds	r3, r3, r3
 80061c0:	643b      	str	r3, [r7, #64]	; 0x40
 80061c2:	4613      	mov	r3, r2
 80061c4:	eb42 0303 	adc.w	r3, r2, r3
 80061c8:	647b      	str	r3, [r7, #68]	; 0x44
 80061ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80061d2:	f7fa fd11 	bl	8000bf8 <__aeabi_uldivmod>
 80061d6:	4602      	mov	r2, r0
 80061d8:	460b      	mov	r3, r1
 80061da:	4611      	mov	r1, r2
 80061dc:	4b3b      	ldr	r3, [pc, #236]	; (80062cc <UART_SetConfig+0x2d4>)
 80061de:	fba3 2301 	umull	r2, r3, r3, r1
 80061e2:	095b      	lsrs	r3, r3, #5
 80061e4:	2264      	movs	r2, #100	; 0x64
 80061e6:	fb02 f303 	mul.w	r3, r2, r3
 80061ea:	1acb      	subs	r3, r1, r3
 80061ec:	00db      	lsls	r3, r3, #3
 80061ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80061f2:	4b36      	ldr	r3, [pc, #216]	; (80062cc <UART_SetConfig+0x2d4>)
 80061f4:	fba3 2302 	umull	r2, r3, r3, r2
 80061f8:	095b      	lsrs	r3, r3, #5
 80061fa:	005b      	lsls	r3, r3, #1
 80061fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006200:	441c      	add	r4, r3
 8006202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006206:	2200      	movs	r2, #0
 8006208:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800620c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006210:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006214:	4642      	mov	r2, r8
 8006216:	464b      	mov	r3, r9
 8006218:	1891      	adds	r1, r2, r2
 800621a:	63b9      	str	r1, [r7, #56]	; 0x38
 800621c:	415b      	adcs	r3, r3
 800621e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006220:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006224:	4641      	mov	r1, r8
 8006226:	1851      	adds	r1, r2, r1
 8006228:	6339      	str	r1, [r7, #48]	; 0x30
 800622a:	4649      	mov	r1, r9
 800622c:	414b      	adcs	r3, r1
 800622e:	637b      	str	r3, [r7, #52]	; 0x34
 8006230:	f04f 0200 	mov.w	r2, #0
 8006234:	f04f 0300 	mov.w	r3, #0
 8006238:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800623c:	4659      	mov	r1, fp
 800623e:	00cb      	lsls	r3, r1, #3
 8006240:	4651      	mov	r1, sl
 8006242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006246:	4651      	mov	r1, sl
 8006248:	00ca      	lsls	r2, r1, #3
 800624a:	4610      	mov	r0, r2
 800624c:	4619      	mov	r1, r3
 800624e:	4603      	mov	r3, r0
 8006250:	4642      	mov	r2, r8
 8006252:	189b      	adds	r3, r3, r2
 8006254:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006258:	464b      	mov	r3, r9
 800625a:	460a      	mov	r2, r1
 800625c:	eb42 0303 	adc.w	r3, r2, r3
 8006260:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006270:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006274:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006278:	460b      	mov	r3, r1
 800627a:	18db      	adds	r3, r3, r3
 800627c:	62bb      	str	r3, [r7, #40]	; 0x28
 800627e:	4613      	mov	r3, r2
 8006280:	eb42 0303 	adc.w	r3, r2, r3
 8006284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006286:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800628a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800628e:	f7fa fcb3 	bl	8000bf8 <__aeabi_uldivmod>
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	4b0d      	ldr	r3, [pc, #52]	; (80062cc <UART_SetConfig+0x2d4>)
 8006298:	fba3 1302 	umull	r1, r3, r3, r2
 800629c:	095b      	lsrs	r3, r3, #5
 800629e:	2164      	movs	r1, #100	; 0x64
 80062a0:	fb01 f303 	mul.w	r3, r1, r3
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	00db      	lsls	r3, r3, #3
 80062a8:	3332      	adds	r3, #50	; 0x32
 80062aa:	4a08      	ldr	r2, [pc, #32]	; (80062cc <UART_SetConfig+0x2d4>)
 80062ac:	fba2 2303 	umull	r2, r3, r2, r3
 80062b0:	095b      	lsrs	r3, r3, #5
 80062b2:	f003 0207 	and.w	r2, r3, #7
 80062b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4422      	add	r2, r4
 80062be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062c0:	e106      	b.n	80064d0 <UART_SetConfig+0x4d8>
 80062c2:	bf00      	nop
 80062c4:	40011000 	.word	0x40011000
 80062c8:	40011400 	.word	0x40011400
 80062cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062d4:	2200      	movs	r2, #0
 80062d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80062de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80062e2:	4642      	mov	r2, r8
 80062e4:	464b      	mov	r3, r9
 80062e6:	1891      	adds	r1, r2, r2
 80062e8:	6239      	str	r1, [r7, #32]
 80062ea:	415b      	adcs	r3, r3
 80062ec:	627b      	str	r3, [r7, #36]	; 0x24
 80062ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062f2:	4641      	mov	r1, r8
 80062f4:	1854      	adds	r4, r2, r1
 80062f6:	4649      	mov	r1, r9
 80062f8:	eb43 0501 	adc.w	r5, r3, r1
 80062fc:	f04f 0200 	mov.w	r2, #0
 8006300:	f04f 0300 	mov.w	r3, #0
 8006304:	00eb      	lsls	r3, r5, #3
 8006306:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800630a:	00e2      	lsls	r2, r4, #3
 800630c:	4614      	mov	r4, r2
 800630e:	461d      	mov	r5, r3
 8006310:	4643      	mov	r3, r8
 8006312:	18e3      	adds	r3, r4, r3
 8006314:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006318:	464b      	mov	r3, r9
 800631a:	eb45 0303 	adc.w	r3, r5, r3
 800631e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800632e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006332:	f04f 0200 	mov.w	r2, #0
 8006336:	f04f 0300 	mov.w	r3, #0
 800633a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800633e:	4629      	mov	r1, r5
 8006340:	008b      	lsls	r3, r1, #2
 8006342:	4621      	mov	r1, r4
 8006344:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006348:	4621      	mov	r1, r4
 800634a:	008a      	lsls	r2, r1, #2
 800634c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006350:	f7fa fc52 	bl	8000bf8 <__aeabi_uldivmod>
 8006354:	4602      	mov	r2, r0
 8006356:	460b      	mov	r3, r1
 8006358:	4b60      	ldr	r3, [pc, #384]	; (80064dc <UART_SetConfig+0x4e4>)
 800635a:	fba3 2302 	umull	r2, r3, r3, r2
 800635e:	095b      	lsrs	r3, r3, #5
 8006360:	011c      	lsls	r4, r3, #4
 8006362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006366:	2200      	movs	r2, #0
 8006368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800636c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006370:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006374:	4642      	mov	r2, r8
 8006376:	464b      	mov	r3, r9
 8006378:	1891      	adds	r1, r2, r2
 800637a:	61b9      	str	r1, [r7, #24]
 800637c:	415b      	adcs	r3, r3
 800637e:	61fb      	str	r3, [r7, #28]
 8006380:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006384:	4641      	mov	r1, r8
 8006386:	1851      	adds	r1, r2, r1
 8006388:	6139      	str	r1, [r7, #16]
 800638a:	4649      	mov	r1, r9
 800638c:	414b      	adcs	r3, r1
 800638e:	617b      	str	r3, [r7, #20]
 8006390:	f04f 0200 	mov.w	r2, #0
 8006394:	f04f 0300 	mov.w	r3, #0
 8006398:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800639c:	4659      	mov	r1, fp
 800639e:	00cb      	lsls	r3, r1, #3
 80063a0:	4651      	mov	r1, sl
 80063a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063a6:	4651      	mov	r1, sl
 80063a8:	00ca      	lsls	r2, r1, #3
 80063aa:	4610      	mov	r0, r2
 80063ac:	4619      	mov	r1, r3
 80063ae:	4603      	mov	r3, r0
 80063b0:	4642      	mov	r2, r8
 80063b2:	189b      	adds	r3, r3, r2
 80063b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063b8:	464b      	mov	r3, r9
 80063ba:	460a      	mov	r2, r1
 80063bc:	eb42 0303 	adc.w	r3, r2, r3
 80063c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80063ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80063d0:	f04f 0200 	mov.w	r2, #0
 80063d4:	f04f 0300 	mov.w	r3, #0
 80063d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80063dc:	4649      	mov	r1, r9
 80063de:	008b      	lsls	r3, r1, #2
 80063e0:	4641      	mov	r1, r8
 80063e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063e6:	4641      	mov	r1, r8
 80063e8:	008a      	lsls	r2, r1, #2
 80063ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80063ee:	f7fa fc03 	bl	8000bf8 <__aeabi_uldivmod>
 80063f2:	4602      	mov	r2, r0
 80063f4:	460b      	mov	r3, r1
 80063f6:	4611      	mov	r1, r2
 80063f8:	4b38      	ldr	r3, [pc, #224]	; (80064dc <UART_SetConfig+0x4e4>)
 80063fa:	fba3 2301 	umull	r2, r3, r3, r1
 80063fe:	095b      	lsrs	r3, r3, #5
 8006400:	2264      	movs	r2, #100	; 0x64
 8006402:	fb02 f303 	mul.w	r3, r2, r3
 8006406:	1acb      	subs	r3, r1, r3
 8006408:	011b      	lsls	r3, r3, #4
 800640a:	3332      	adds	r3, #50	; 0x32
 800640c:	4a33      	ldr	r2, [pc, #204]	; (80064dc <UART_SetConfig+0x4e4>)
 800640e:	fba2 2303 	umull	r2, r3, r2, r3
 8006412:	095b      	lsrs	r3, r3, #5
 8006414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006418:	441c      	add	r4, r3
 800641a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800641e:	2200      	movs	r2, #0
 8006420:	673b      	str	r3, [r7, #112]	; 0x70
 8006422:	677a      	str	r2, [r7, #116]	; 0x74
 8006424:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006428:	4642      	mov	r2, r8
 800642a:	464b      	mov	r3, r9
 800642c:	1891      	adds	r1, r2, r2
 800642e:	60b9      	str	r1, [r7, #8]
 8006430:	415b      	adcs	r3, r3
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006438:	4641      	mov	r1, r8
 800643a:	1851      	adds	r1, r2, r1
 800643c:	6039      	str	r1, [r7, #0]
 800643e:	4649      	mov	r1, r9
 8006440:	414b      	adcs	r3, r1
 8006442:	607b      	str	r3, [r7, #4]
 8006444:	f04f 0200 	mov.w	r2, #0
 8006448:	f04f 0300 	mov.w	r3, #0
 800644c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006450:	4659      	mov	r1, fp
 8006452:	00cb      	lsls	r3, r1, #3
 8006454:	4651      	mov	r1, sl
 8006456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800645a:	4651      	mov	r1, sl
 800645c:	00ca      	lsls	r2, r1, #3
 800645e:	4610      	mov	r0, r2
 8006460:	4619      	mov	r1, r3
 8006462:	4603      	mov	r3, r0
 8006464:	4642      	mov	r2, r8
 8006466:	189b      	adds	r3, r3, r2
 8006468:	66bb      	str	r3, [r7, #104]	; 0x68
 800646a:	464b      	mov	r3, r9
 800646c:	460a      	mov	r2, r1
 800646e:	eb42 0303 	adc.w	r3, r2, r3
 8006472:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	663b      	str	r3, [r7, #96]	; 0x60
 800647e:	667a      	str	r2, [r7, #100]	; 0x64
 8006480:	f04f 0200 	mov.w	r2, #0
 8006484:	f04f 0300 	mov.w	r3, #0
 8006488:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800648c:	4649      	mov	r1, r9
 800648e:	008b      	lsls	r3, r1, #2
 8006490:	4641      	mov	r1, r8
 8006492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006496:	4641      	mov	r1, r8
 8006498:	008a      	lsls	r2, r1, #2
 800649a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800649e:	f7fa fbab 	bl	8000bf8 <__aeabi_uldivmod>
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	4b0d      	ldr	r3, [pc, #52]	; (80064dc <UART_SetConfig+0x4e4>)
 80064a8:	fba3 1302 	umull	r1, r3, r3, r2
 80064ac:	095b      	lsrs	r3, r3, #5
 80064ae:	2164      	movs	r1, #100	; 0x64
 80064b0:	fb01 f303 	mul.w	r3, r1, r3
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	011b      	lsls	r3, r3, #4
 80064b8:	3332      	adds	r3, #50	; 0x32
 80064ba:	4a08      	ldr	r2, [pc, #32]	; (80064dc <UART_SetConfig+0x4e4>)
 80064bc:	fba2 2303 	umull	r2, r3, r2, r3
 80064c0:	095b      	lsrs	r3, r3, #5
 80064c2:	f003 020f 	and.w	r2, r3, #15
 80064c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4422      	add	r2, r4
 80064ce:	609a      	str	r2, [r3, #8]
}
 80064d0:	bf00      	nop
 80064d2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80064d6:	46bd      	mov	sp, r7
 80064d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064dc:	51eb851f 	.word	0x51eb851f

080064e0 <__cvt>:
 80064e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064e4:	ec55 4b10 	vmov	r4, r5, d0
 80064e8:	2d00      	cmp	r5, #0
 80064ea:	460e      	mov	r6, r1
 80064ec:	4619      	mov	r1, r3
 80064ee:	462b      	mov	r3, r5
 80064f0:	bfbb      	ittet	lt
 80064f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80064f6:	461d      	movlt	r5, r3
 80064f8:	2300      	movge	r3, #0
 80064fa:	232d      	movlt	r3, #45	; 0x2d
 80064fc:	700b      	strb	r3, [r1, #0]
 80064fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006500:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006504:	4691      	mov	r9, r2
 8006506:	f023 0820 	bic.w	r8, r3, #32
 800650a:	bfbc      	itt	lt
 800650c:	4622      	movlt	r2, r4
 800650e:	4614      	movlt	r4, r2
 8006510:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006514:	d005      	beq.n	8006522 <__cvt+0x42>
 8006516:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800651a:	d100      	bne.n	800651e <__cvt+0x3e>
 800651c:	3601      	adds	r6, #1
 800651e:	2102      	movs	r1, #2
 8006520:	e000      	b.n	8006524 <__cvt+0x44>
 8006522:	2103      	movs	r1, #3
 8006524:	ab03      	add	r3, sp, #12
 8006526:	9301      	str	r3, [sp, #4]
 8006528:	ab02      	add	r3, sp, #8
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	ec45 4b10 	vmov	d0, r4, r5
 8006530:	4653      	mov	r3, sl
 8006532:	4632      	mov	r2, r6
 8006534:	f000 fe78 	bl	8007228 <_dtoa_r>
 8006538:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800653c:	4607      	mov	r7, r0
 800653e:	d102      	bne.n	8006546 <__cvt+0x66>
 8006540:	f019 0f01 	tst.w	r9, #1
 8006544:	d022      	beq.n	800658c <__cvt+0xac>
 8006546:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800654a:	eb07 0906 	add.w	r9, r7, r6
 800654e:	d110      	bne.n	8006572 <__cvt+0x92>
 8006550:	783b      	ldrb	r3, [r7, #0]
 8006552:	2b30      	cmp	r3, #48	; 0x30
 8006554:	d10a      	bne.n	800656c <__cvt+0x8c>
 8006556:	2200      	movs	r2, #0
 8006558:	2300      	movs	r3, #0
 800655a:	4620      	mov	r0, r4
 800655c:	4629      	mov	r1, r5
 800655e:	f7fa fabb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006562:	b918      	cbnz	r0, 800656c <__cvt+0x8c>
 8006564:	f1c6 0601 	rsb	r6, r6, #1
 8006568:	f8ca 6000 	str.w	r6, [sl]
 800656c:	f8da 3000 	ldr.w	r3, [sl]
 8006570:	4499      	add	r9, r3
 8006572:	2200      	movs	r2, #0
 8006574:	2300      	movs	r3, #0
 8006576:	4620      	mov	r0, r4
 8006578:	4629      	mov	r1, r5
 800657a:	f7fa faad 	bl	8000ad8 <__aeabi_dcmpeq>
 800657e:	b108      	cbz	r0, 8006584 <__cvt+0xa4>
 8006580:	f8cd 900c 	str.w	r9, [sp, #12]
 8006584:	2230      	movs	r2, #48	; 0x30
 8006586:	9b03      	ldr	r3, [sp, #12]
 8006588:	454b      	cmp	r3, r9
 800658a:	d307      	bcc.n	800659c <__cvt+0xbc>
 800658c:	9b03      	ldr	r3, [sp, #12]
 800658e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006590:	1bdb      	subs	r3, r3, r7
 8006592:	4638      	mov	r0, r7
 8006594:	6013      	str	r3, [r2, #0]
 8006596:	b004      	add	sp, #16
 8006598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800659c:	1c59      	adds	r1, r3, #1
 800659e:	9103      	str	r1, [sp, #12]
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	e7f0      	b.n	8006586 <__cvt+0xa6>

080065a4 <__exponent>:
 80065a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065a6:	4603      	mov	r3, r0
 80065a8:	2900      	cmp	r1, #0
 80065aa:	bfb8      	it	lt
 80065ac:	4249      	neglt	r1, r1
 80065ae:	f803 2b02 	strb.w	r2, [r3], #2
 80065b2:	bfb4      	ite	lt
 80065b4:	222d      	movlt	r2, #45	; 0x2d
 80065b6:	222b      	movge	r2, #43	; 0x2b
 80065b8:	2909      	cmp	r1, #9
 80065ba:	7042      	strb	r2, [r0, #1]
 80065bc:	dd2a      	ble.n	8006614 <__exponent+0x70>
 80065be:	f10d 0207 	add.w	r2, sp, #7
 80065c2:	4617      	mov	r7, r2
 80065c4:	260a      	movs	r6, #10
 80065c6:	4694      	mov	ip, r2
 80065c8:	fb91 f5f6 	sdiv	r5, r1, r6
 80065cc:	fb06 1415 	mls	r4, r6, r5, r1
 80065d0:	3430      	adds	r4, #48	; 0x30
 80065d2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80065d6:	460c      	mov	r4, r1
 80065d8:	2c63      	cmp	r4, #99	; 0x63
 80065da:	f102 32ff 	add.w	r2, r2, #4294967295
 80065de:	4629      	mov	r1, r5
 80065e0:	dcf1      	bgt.n	80065c6 <__exponent+0x22>
 80065e2:	3130      	adds	r1, #48	; 0x30
 80065e4:	f1ac 0402 	sub.w	r4, ip, #2
 80065e8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80065ec:	1c41      	adds	r1, r0, #1
 80065ee:	4622      	mov	r2, r4
 80065f0:	42ba      	cmp	r2, r7
 80065f2:	d30a      	bcc.n	800660a <__exponent+0x66>
 80065f4:	f10d 0209 	add.w	r2, sp, #9
 80065f8:	eba2 020c 	sub.w	r2, r2, ip
 80065fc:	42bc      	cmp	r4, r7
 80065fe:	bf88      	it	hi
 8006600:	2200      	movhi	r2, #0
 8006602:	4413      	add	r3, r2
 8006604:	1a18      	subs	r0, r3, r0
 8006606:	b003      	add	sp, #12
 8006608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800660a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800660e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006612:	e7ed      	b.n	80065f0 <__exponent+0x4c>
 8006614:	2330      	movs	r3, #48	; 0x30
 8006616:	3130      	adds	r1, #48	; 0x30
 8006618:	7083      	strb	r3, [r0, #2]
 800661a:	70c1      	strb	r1, [r0, #3]
 800661c:	1d03      	adds	r3, r0, #4
 800661e:	e7f1      	b.n	8006604 <__exponent+0x60>

08006620 <_printf_float>:
 8006620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006624:	ed2d 8b02 	vpush	{d8}
 8006628:	b08d      	sub	sp, #52	; 0x34
 800662a:	460c      	mov	r4, r1
 800662c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006630:	4616      	mov	r6, r2
 8006632:	461f      	mov	r7, r3
 8006634:	4605      	mov	r5, r0
 8006636:	f000 fce7 	bl	8007008 <_localeconv_r>
 800663a:	f8d0 a000 	ldr.w	sl, [r0]
 800663e:	4650      	mov	r0, sl
 8006640:	f7f9 fe1e 	bl	8000280 <strlen>
 8006644:	2300      	movs	r3, #0
 8006646:	930a      	str	r3, [sp, #40]	; 0x28
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	9305      	str	r3, [sp, #20]
 800664c:	f8d8 3000 	ldr.w	r3, [r8]
 8006650:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006654:	3307      	adds	r3, #7
 8006656:	f023 0307 	bic.w	r3, r3, #7
 800665a:	f103 0208 	add.w	r2, r3, #8
 800665e:	f8c8 2000 	str.w	r2, [r8]
 8006662:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006666:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800666a:	9307      	str	r3, [sp, #28]
 800666c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006670:	ee08 0a10 	vmov	s16, r0
 8006674:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006678:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800667c:	4b9e      	ldr	r3, [pc, #632]	; (80068f8 <_printf_float+0x2d8>)
 800667e:	f04f 32ff 	mov.w	r2, #4294967295
 8006682:	f7fa fa5b 	bl	8000b3c <__aeabi_dcmpun>
 8006686:	bb88      	cbnz	r0, 80066ec <_printf_float+0xcc>
 8006688:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800668c:	4b9a      	ldr	r3, [pc, #616]	; (80068f8 <_printf_float+0x2d8>)
 800668e:	f04f 32ff 	mov.w	r2, #4294967295
 8006692:	f7fa fa35 	bl	8000b00 <__aeabi_dcmple>
 8006696:	bb48      	cbnz	r0, 80066ec <_printf_float+0xcc>
 8006698:	2200      	movs	r2, #0
 800669a:	2300      	movs	r3, #0
 800669c:	4640      	mov	r0, r8
 800669e:	4649      	mov	r1, r9
 80066a0:	f7fa fa24 	bl	8000aec <__aeabi_dcmplt>
 80066a4:	b110      	cbz	r0, 80066ac <_printf_float+0x8c>
 80066a6:	232d      	movs	r3, #45	; 0x2d
 80066a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066ac:	4a93      	ldr	r2, [pc, #588]	; (80068fc <_printf_float+0x2dc>)
 80066ae:	4b94      	ldr	r3, [pc, #592]	; (8006900 <_printf_float+0x2e0>)
 80066b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80066b4:	bf94      	ite	ls
 80066b6:	4690      	movls	r8, r2
 80066b8:	4698      	movhi	r8, r3
 80066ba:	2303      	movs	r3, #3
 80066bc:	6123      	str	r3, [r4, #16]
 80066be:	9b05      	ldr	r3, [sp, #20]
 80066c0:	f023 0304 	bic.w	r3, r3, #4
 80066c4:	6023      	str	r3, [r4, #0]
 80066c6:	f04f 0900 	mov.w	r9, #0
 80066ca:	9700      	str	r7, [sp, #0]
 80066cc:	4633      	mov	r3, r6
 80066ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80066d0:	4621      	mov	r1, r4
 80066d2:	4628      	mov	r0, r5
 80066d4:	f000 f9da 	bl	8006a8c <_printf_common>
 80066d8:	3001      	adds	r0, #1
 80066da:	f040 8090 	bne.w	80067fe <_printf_float+0x1de>
 80066de:	f04f 30ff 	mov.w	r0, #4294967295
 80066e2:	b00d      	add	sp, #52	; 0x34
 80066e4:	ecbd 8b02 	vpop	{d8}
 80066e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ec:	4642      	mov	r2, r8
 80066ee:	464b      	mov	r3, r9
 80066f0:	4640      	mov	r0, r8
 80066f2:	4649      	mov	r1, r9
 80066f4:	f7fa fa22 	bl	8000b3c <__aeabi_dcmpun>
 80066f8:	b140      	cbz	r0, 800670c <_printf_float+0xec>
 80066fa:	464b      	mov	r3, r9
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	bfbc      	itt	lt
 8006700:	232d      	movlt	r3, #45	; 0x2d
 8006702:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006706:	4a7f      	ldr	r2, [pc, #508]	; (8006904 <_printf_float+0x2e4>)
 8006708:	4b7f      	ldr	r3, [pc, #508]	; (8006908 <_printf_float+0x2e8>)
 800670a:	e7d1      	b.n	80066b0 <_printf_float+0x90>
 800670c:	6863      	ldr	r3, [r4, #4]
 800670e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006712:	9206      	str	r2, [sp, #24]
 8006714:	1c5a      	adds	r2, r3, #1
 8006716:	d13f      	bne.n	8006798 <_printf_float+0x178>
 8006718:	2306      	movs	r3, #6
 800671a:	6063      	str	r3, [r4, #4]
 800671c:	9b05      	ldr	r3, [sp, #20]
 800671e:	6861      	ldr	r1, [r4, #4]
 8006720:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006724:	2300      	movs	r3, #0
 8006726:	9303      	str	r3, [sp, #12]
 8006728:	ab0a      	add	r3, sp, #40	; 0x28
 800672a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800672e:	ab09      	add	r3, sp, #36	; 0x24
 8006730:	ec49 8b10 	vmov	d0, r8, r9
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	6022      	str	r2, [r4, #0]
 8006738:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800673c:	4628      	mov	r0, r5
 800673e:	f7ff fecf 	bl	80064e0 <__cvt>
 8006742:	9b06      	ldr	r3, [sp, #24]
 8006744:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006746:	2b47      	cmp	r3, #71	; 0x47
 8006748:	4680      	mov	r8, r0
 800674a:	d108      	bne.n	800675e <_printf_float+0x13e>
 800674c:	1cc8      	adds	r0, r1, #3
 800674e:	db02      	blt.n	8006756 <_printf_float+0x136>
 8006750:	6863      	ldr	r3, [r4, #4]
 8006752:	4299      	cmp	r1, r3
 8006754:	dd41      	ble.n	80067da <_printf_float+0x1ba>
 8006756:	f1ab 0302 	sub.w	r3, fp, #2
 800675a:	fa5f fb83 	uxtb.w	fp, r3
 800675e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006762:	d820      	bhi.n	80067a6 <_printf_float+0x186>
 8006764:	3901      	subs	r1, #1
 8006766:	465a      	mov	r2, fp
 8006768:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800676c:	9109      	str	r1, [sp, #36]	; 0x24
 800676e:	f7ff ff19 	bl	80065a4 <__exponent>
 8006772:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006774:	1813      	adds	r3, r2, r0
 8006776:	2a01      	cmp	r2, #1
 8006778:	4681      	mov	r9, r0
 800677a:	6123      	str	r3, [r4, #16]
 800677c:	dc02      	bgt.n	8006784 <_printf_float+0x164>
 800677e:	6822      	ldr	r2, [r4, #0]
 8006780:	07d2      	lsls	r2, r2, #31
 8006782:	d501      	bpl.n	8006788 <_printf_float+0x168>
 8006784:	3301      	adds	r3, #1
 8006786:	6123      	str	r3, [r4, #16]
 8006788:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800678c:	2b00      	cmp	r3, #0
 800678e:	d09c      	beq.n	80066ca <_printf_float+0xaa>
 8006790:	232d      	movs	r3, #45	; 0x2d
 8006792:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006796:	e798      	b.n	80066ca <_printf_float+0xaa>
 8006798:	9a06      	ldr	r2, [sp, #24]
 800679a:	2a47      	cmp	r2, #71	; 0x47
 800679c:	d1be      	bne.n	800671c <_printf_float+0xfc>
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1bc      	bne.n	800671c <_printf_float+0xfc>
 80067a2:	2301      	movs	r3, #1
 80067a4:	e7b9      	b.n	800671a <_printf_float+0xfa>
 80067a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80067aa:	d118      	bne.n	80067de <_printf_float+0x1be>
 80067ac:	2900      	cmp	r1, #0
 80067ae:	6863      	ldr	r3, [r4, #4]
 80067b0:	dd0b      	ble.n	80067ca <_printf_float+0x1aa>
 80067b2:	6121      	str	r1, [r4, #16]
 80067b4:	b913      	cbnz	r3, 80067bc <_printf_float+0x19c>
 80067b6:	6822      	ldr	r2, [r4, #0]
 80067b8:	07d0      	lsls	r0, r2, #31
 80067ba:	d502      	bpl.n	80067c2 <_printf_float+0x1a2>
 80067bc:	3301      	adds	r3, #1
 80067be:	440b      	add	r3, r1
 80067c0:	6123      	str	r3, [r4, #16]
 80067c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80067c4:	f04f 0900 	mov.w	r9, #0
 80067c8:	e7de      	b.n	8006788 <_printf_float+0x168>
 80067ca:	b913      	cbnz	r3, 80067d2 <_printf_float+0x1b2>
 80067cc:	6822      	ldr	r2, [r4, #0]
 80067ce:	07d2      	lsls	r2, r2, #31
 80067d0:	d501      	bpl.n	80067d6 <_printf_float+0x1b6>
 80067d2:	3302      	adds	r3, #2
 80067d4:	e7f4      	b.n	80067c0 <_printf_float+0x1a0>
 80067d6:	2301      	movs	r3, #1
 80067d8:	e7f2      	b.n	80067c0 <_printf_float+0x1a0>
 80067da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80067de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067e0:	4299      	cmp	r1, r3
 80067e2:	db05      	blt.n	80067f0 <_printf_float+0x1d0>
 80067e4:	6823      	ldr	r3, [r4, #0]
 80067e6:	6121      	str	r1, [r4, #16]
 80067e8:	07d8      	lsls	r0, r3, #31
 80067ea:	d5ea      	bpl.n	80067c2 <_printf_float+0x1a2>
 80067ec:	1c4b      	adds	r3, r1, #1
 80067ee:	e7e7      	b.n	80067c0 <_printf_float+0x1a0>
 80067f0:	2900      	cmp	r1, #0
 80067f2:	bfd4      	ite	le
 80067f4:	f1c1 0202 	rsble	r2, r1, #2
 80067f8:	2201      	movgt	r2, #1
 80067fa:	4413      	add	r3, r2
 80067fc:	e7e0      	b.n	80067c0 <_printf_float+0x1a0>
 80067fe:	6823      	ldr	r3, [r4, #0]
 8006800:	055a      	lsls	r2, r3, #21
 8006802:	d407      	bmi.n	8006814 <_printf_float+0x1f4>
 8006804:	6923      	ldr	r3, [r4, #16]
 8006806:	4642      	mov	r2, r8
 8006808:	4631      	mov	r1, r6
 800680a:	4628      	mov	r0, r5
 800680c:	47b8      	blx	r7
 800680e:	3001      	adds	r0, #1
 8006810:	d12c      	bne.n	800686c <_printf_float+0x24c>
 8006812:	e764      	b.n	80066de <_printf_float+0xbe>
 8006814:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006818:	f240 80e0 	bls.w	80069dc <_printf_float+0x3bc>
 800681c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006820:	2200      	movs	r2, #0
 8006822:	2300      	movs	r3, #0
 8006824:	f7fa f958 	bl	8000ad8 <__aeabi_dcmpeq>
 8006828:	2800      	cmp	r0, #0
 800682a:	d034      	beq.n	8006896 <_printf_float+0x276>
 800682c:	4a37      	ldr	r2, [pc, #220]	; (800690c <_printf_float+0x2ec>)
 800682e:	2301      	movs	r3, #1
 8006830:	4631      	mov	r1, r6
 8006832:	4628      	mov	r0, r5
 8006834:	47b8      	blx	r7
 8006836:	3001      	adds	r0, #1
 8006838:	f43f af51 	beq.w	80066de <_printf_float+0xbe>
 800683c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006840:	429a      	cmp	r2, r3
 8006842:	db02      	blt.n	800684a <_printf_float+0x22a>
 8006844:	6823      	ldr	r3, [r4, #0]
 8006846:	07d8      	lsls	r0, r3, #31
 8006848:	d510      	bpl.n	800686c <_printf_float+0x24c>
 800684a:	ee18 3a10 	vmov	r3, s16
 800684e:	4652      	mov	r2, sl
 8006850:	4631      	mov	r1, r6
 8006852:	4628      	mov	r0, r5
 8006854:	47b8      	blx	r7
 8006856:	3001      	adds	r0, #1
 8006858:	f43f af41 	beq.w	80066de <_printf_float+0xbe>
 800685c:	f04f 0800 	mov.w	r8, #0
 8006860:	f104 091a 	add.w	r9, r4, #26
 8006864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006866:	3b01      	subs	r3, #1
 8006868:	4543      	cmp	r3, r8
 800686a:	dc09      	bgt.n	8006880 <_printf_float+0x260>
 800686c:	6823      	ldr	r3, [r4, #0]
 800686e:	079b      	lsls	r3, r3, #30
 8006870:	f100 8107 	bmi.w	8006a82 <_printf_float+0x462>
 8006874:	68e0      	ldr	r0, [r4, #12]
 8006876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006878:	4298      	cmp	r0, r3
 800687a:	bfb8      	it	lt
 800687c:	4618      	movlt	r0, r3
 800687e:	e730      	b.n	80066e2 <_printf_float+0xc2>
 8006880:	2301      	movs	r3, #1
 8006882:	464a      	mov	r2, r9
 8006884:	4631      	mov	r1, r6
 8006886:	4628      	mov	r0, r5
 8006888:	47b8      	blx	r7
 800688a:	3001      	adds	r0, #1
 800688c:	f43f af27 	beq.w	80066de <_printf_float+0xbe>
 8006890:	f108 0801 	add.w	r8, r8, #1
 8006894:	e7e6      	b.n	8006864 <_printf_float+0x244>
 8006896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006898:	2b00      	cmp	r3, #0
 800689a:	dc39      	bgt.n	8006910 <_printf_float+0x2f0>
 800689c:	4a1b      	ldr	r2, [pc, #108]	; (800690c <_printf_float+0x2ec>)
 800689e:	2301      	movs	r3, #1
 80068a0:	4631      	mov	r1, r6
 80068a2:	4628      	mov	r0, r5
 80068a4:	47b8      	blx	r7
 80068a6:	3001      	adds	r0, #1
 80068a8:	f43f af19 	beq.w	80066de <_printf_float+0xbe>
 80068ac:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80068b0:	4313      	orrs	r3, r2
 80068b2:	d102      	bne.n	80068ba <_printf_float+0x29a>
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	07d9      	lsls	r1, r3, #31
 80068b8:	d5d8      	bpl.n	800686c <_printf_float+0x24c>
 80068ba:	ee18 3a10 	vmov	r3, s16
 80068be:	4652      	mov	r2, sl
 80068c0:	4631      	mov	r1, r6
 80068c2:	4628      	mov	r0, r5
 80068c4:	47b8      	blx	r7
 80068c6:	3001      	adds	r0, #1
 80068c8:	f43f af09 	beq.w	80066de <_printf_float+0xbe>
 80068cc:	f04f 0900 	mov.w	r9, #0
 80068d0:	f104 0a1a 	add.w	sl, r4, #26
 80068d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068d6:	425b      	negs	r3, r3
 80068d8:	454b      	cmp	r3, r9
 80068da:	dc01      	bgt.n	80068e0 <_printf_float+0x2c0>
 80068dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068de:	e792      	b.n	8006806 <_printf_float+0x1e6>
 80068e0:	2301      	movs	r3, #1
 80068e2:	4652      	mov	r2, sl
 80068e4:	4631      	mov	r1, r6
 80068e6:	4628      	mov	r0, r5
 80068e8:	47b8      	blx	r7
 80068ea:	3001      	adds	r0, #1
 80068ec:	f43f aef7 	beq.w	80066de <_printf_float+0xbe>
 80068f0:	f109 0901 	add.w	r9, r9, #1
 80068f4:	e7ee      	b.n	80068d4 <_printf_float+0x2b4>
 80068f6:	bf00      	nop
 80068f8:	7fefffff 	.word	0x7fefffff
 80068fc:	0800ac4c 	.word	0x0800ac4c
 8006900:	0800ac50 	.word	0x0800ac50
 8006904:	0800ac54 	.word	0x0800ac54
 8006908:	0800ac58 	.word	0x0800ac58
 800690c:	0800ac5c 	.word	0x0800ac5c
 8006910:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006912:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006914:	429a      	cmp	r2, r3
 8006916:	bfa8      	it	ge
 8006918:	461a      	movge	r2, r3
 800691a:	2a00      	cmp	r2, #0
 800691c:	4691      	mov	r9, r2
 800691e:	dc37      	bgt.n	8006990 <_printf_float+0x370>
 8006920:	f04f 0b00 	mov.w	fp, #0
 8006924:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006928:	f104 021a 	add.w	r2, r4, #26
 800692c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800692e:	9305      	str	r3, [sp, #20]
 8006930:	eba3 0309 	sub.w	r3, r3, r9
 8006934:	455b      	cmp	r3, fp
 8006936:	dc33      	bgt.n	80069a0 <_printf_float+0x380>
 8006938:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800693c:	429a      	cmp	r2, r3
 800693e:	db3b      	blt.n	80069b8 <_printf_float+0x398>
 8006940:	6823      	ldr	r3, [r4, #0]
 8006942:	07da      	lsls	r2, r3, #31
 8006944:	d438      	bmi.n	80069b8 <_printf_float+0x398>
 8006946:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800694a:	eba2 0903 	sub.w	r9, r2, r3
 800694e:	9b05      	ldr	r3, [sp, #20]
 8006950:	1ad2      	subs	r2, r2, r3
 8006952:	4591      	cmp	r9, r2
 8006954:	bfa8      	it	ge
 8006956:	4691      	movge	r9, r2
 8006958:	f1b9 0f00 	cmp.w	r9, #0
 800695c:	dc35      	bgt.n	80069ca <_printf_float+0x3aa>
 800695e:	f04f 0800 	mov.w	r8, #0
 8006962:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006966:	f104 0a1a 	add.w	sl, r4, #26
 800696a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800696e:	1a9b      	subs	r3, r3, r2
 8006970:	eba3 0309 	sub.w	r3, r3, r9
 8006974:	4543      	cmp	r3, r8
 8006976:	f77f af79 	ble.w	800686c <_printf_float+0x24c>
 800697a:	2301      	movs	r3, #1
 800697c:	4652      	mov	r2, sl
 800697e:	4631      	mov	r1, r6
 8006980:	4628      	mov	r0, r5
 8006982:	47b8      	blx	r7
 8006984:	3001      	adds	r0, #1
 8006986:	f43f aeaa 	beq.w	80066de <_printf_float+0xbe>
 800698a:	f108 0801 	add.w	r8, r8, #1
 800698e:	e7ec      	b.n	800696a <_printf_float+0x34a>
 8006990:	4613      	mov	r3, r2
 8006992:	4631      	mov	r1, r6
 8006994:	4642      	mov	r2, r8
 8006996:	4628      	mov	r0, r5
 8006998:	47b8      	blx	r7
 800699a:	3001      	adds	r0, #1
 800699c:	d1c0      	bne.n	8006920 <_printf_float+0x300>
 800699e:	e69e      	b.n	80066de <_printf_float+0xbe>
 80069a0:	2301      	movs	r3, #1
 80069a2:	4631      	mov	r1, r6
 80069a4:	4628      	mov	r0, r5
 80069a6:	9205      	str	r2, [sp, #20]
 80069a8:	47b8      	blx	r7
 80069aa:	3001      	adds	r0, #1
 80069ac:	f43f ae97 	beq.w	80066de <_printf_float+0xbe>
 80069b0:	9a05      	ldr	r2, [sp, #20]
 80069b2:	f10b 0b01 	add.w	fp, fp, #1
 80069b6:	e7b9      	b.n	800692c <_printf_float+0x30c>
 80069b8:	ee18 3a10 	vmov	r3, s16
 80069bc:	4652      	mov	r2, sl
 80069be:	4631      	mov	r1, r6
 80069c0:	4628      	mov	r0, r5
 80069c2:	47b8      	blx	r7
 80069c4:	3001      	adds	r0, #1
 80069c6:	d1be      	bne.n	8006946 <_printf_float+0x326>
 80069c8:	e689      	b.n	80066de <_printf_float+0xbe>
 80069ca:	9a05      	ldr	r2, [sp, #20]
 80069cc:	464b      	mov	r3, r9
 80069ce:	4442      	add	r2, r8
 80069d0:	4631      	mov	r1, r6
 80069d2:	4628      	mov	r0, r5
 80069d4:	47b8      	blx	r7
 80069d6:	3001      	adds	r0, #1
 80069d8:	d1c1      	bne.n	800695e <_printf_float+0x33e>
 80069da:	e680      	b.n	80066de <_printf_float+0xbe>
 80069dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069de:	2a01      	cmp	r2, #1
 80069e0:	dc01      	bgt.n	80069e6 <_printf_float+0x3c6>
 80069e2:	07db      	lsls	r3, r3, #31
 80069e4:	d53a      	bpl.n	8006a5c <_printf_float+0x43c>
 80069e6:	2301      	movs	r3, #1
 80069e8:	4642      	mov	r2, r8
 80069ea:	4631      	mov	r1, r6
 80069ec:	4628      	mov	r0, r5
 80069ee:	47b8      	blx	r7
 80069f0:	3001      	adds	r0, #1
 80069f2:	f43f ae74 	beq.w	80066de <_printf_float+0xbe>
 80069f6:	ee18 3a10 	vmov	r3, s16
 80069fa:	4652      	mov	r2, sl
 80069fc:	4631      	mov	r1, r6
 80069fe:	4628      	mov	r0, r5
 8006a00:	47b8      	blx	r7
 8006a02:	3001      	adds	r0, #1
 8006a04:	f43f ae6b 	beq.w	80066de <_printf_float+0xbe>
 8006a08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006a14:	f7fa f860 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a18:	b9d8      	cbnz	r0, 8006a52 <_printf_float+0x432>
 8006a1a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006a1e:	f108 0201 	add.w	r2, r8, #1
 8006a22:	4631      	mov	r1, r6
 8006a24:	4628      	mov	r0, r5
 8006a26:	47b8      	blx	r7
 8006a28:	3001      	adds	r0, #1
 8006a2a:	d10e      	bne.n	8006a4a <_printf_float+0x42a>
 8006a2c:	e657      	b.n	80066de <_printf_float+0xbe>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	4652      	mov	r2, sl
 8006a32:	4631      	mov	r1, r6
 8006a34:	4628      	mov	r0, r5
 8006a36:	47b8      	blx	r7
 8006a38:	3001      	adds	r0, #1
 8006a3a:	f43f ae50 	beq.w	80066de <_printf_float+0xbe>
 8006a3e:	f108 0801 	add.w	r8, r8, #1
 8006a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a44:	3b01      	subs	r3, #1
 8006a46:	4543      	cmp	r3, r8
 8006a48:	dcf1      	bgt.n	8006a2e <_printf_float+0x40e>
 8006a4a:	464b      	mov	r3, r9
 8006a4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a50:	e6da      	b.n	8006808 <_printf_float+0x1e8>
 8006a52:	f04f 0800 	mov.w	r8, #0
 8006a56:	f104 0a1a 	add.w	sl, r4, #26
 8006a5a:	e7f2      	b.n	8006a42 <_printf_float+0x422>
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	4642      	mov	r2, r8
 8006a60:	e7df      	b.n	8006a22 <_printf_float+0x402>
 8006a62:	2301      	movs	r3, #1
 8006a64:	464a      	mov	r2, r9
 8006a66:	4631      	mov	r1, r6
 8006a68:	4628      	mov	r0, r5
 8006a6a:	47b8      	blx	r7
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	f43f ae36 	beq.w	80066de <_printf_float+0xbe>
 8006a72:	f108 0801 	add.w	r8, r8, #1
 8006a76:	68e3      	ldr	r3, [r4, #12]
 8006a78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a7a:	1a5b      	subs	r3, r3, r1
 8006a7c:	4543      	cmp	r3, r8
 8006a7e:	dcf0      	bgt.n	8006a62 <_printf_float+0x442>
 8006a80:	e6f8      	b.n	8006874 <_printf_float+0x254>
 8006a82:	f04f 0800 	mov.w	r8, #0
 8006a86:	f104 0919 	add.w	r9, r4, #25
 8006a8a:	e7f4      	b.n	8006a76 <_printf_float+0x456>

08006a8c <_printf_common>:
 8006a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a90:	4616      	mov	r6, r2
 8006a92:	4699      	mov	r9, r3
 8006a94:	688a      	ldr	r2, [r1, #8]
 8006a96:	690b      	ldr	r3, [r1, #16]
 8006a98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	bfb8      	it	lt
 8006aa0:	4613      	movlt	r3, r2
 8006aa2:	6033      	str	r3, [r6, #0]
 8006aa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006aa8:	4607      	mov	r7, r0
 8006aaa:	460c      	mov	r4, r1
 8006aac:	b10a      	cbz	r2, 8006ab2 <_printf_common+0x26>
 8006aae:	3301      	adds	r3, #1
 8006ab0:	6033      	str	r3, [r6, #0]
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	0699      	lsls	r1, r3, #26
 8006ab6:	bf42      	ittt	mi
 8006ab8:	6833      	ldrmi	r3, [r6, #0]
 8006aba:	3302      	addmi	r3, #2
 8006abc:	6033      	strmi	r3, [r6, #0]
 8006abe:	6825      	ldr	r5, [r4, #0]
 8006ac0:	f015 0506 	ands.w	r5, r5, #6
 8006ac4:	d106      	bne.n	8006ad4 <_printf_common+0x48>
 8006ac6:	f104 0a19 	add.w	sl, r4, #25
 8006aca:	68e3      	ldr	r3, [r4, #12]
 8006acc:	6832      	ldr	r2, [r6, #0]
 8006ace:	1a9b      	subs	r3, r3, r2
 8006ad0:	42ab      	cmp	r3, r5
 8006ad2:	dc26      	bgt.n	8006b22 <_printf_common+0x96>
 8006ad4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ad8:	1e13      	subs	r3, r2, #0
 8006ada:	6822      	ldr	r2, [r4, #0]
 8006adc:	bf18      	it	ne
 8006ade:	2301      	movne	r3, #1
 8006ae0:	0692      	lsls	r2, r2, #26
 8006ae2:	d42b      	bmi.n	8006b3c <_printf_common+0xb0>
 8006ae4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ae8:	4649      	mov	r1, r9
 8006aea:	4638      	mov	r0, r7
 8006aec:	47c0      	blx	r8
 8006aee:	3001      	adds	r0, #1
 8006af0:	d01e      	beq.n	8006b30 <_printf_common+0xa4>
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	6922      	ldr	r2, [r4, #16]
 8006af6:	f003 0306 	and.w	r3, r3, #6
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	bf02      	ittt	eq
 8006afe:	68e5      	ldreq	r5, [r4, #12]
 8006b00:	6833      	ldreq	r3, [r6, #0]
 8006b02:	1aed      	subeq	r5, r5, r3
 8006b04:	68a3      	ldr	r3, [r4, #8]
 8006b06:	bf0c      	ite	eq
 8006b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b0c:	2500      	movne	r5, #0
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	bfc4      	itt	gt
 8006b12:	1a9b      	subgt	r3, r3, r2
 8006b14:	18ed      	addgt	r5, r5, r3
 8006b16:	2600      	movs	r6, #0
 8006b18:	341a      	adds	r4, #26
 8006b1a:	42b5      	cmp	r5, r6
 8006b1c:	d11a      	bne.n	8006b54 <_printf_common+0xc8>
 8006b1e:	2000      	movs	r0, #0
 8006b20:	e008      	b.n	8006b34 <_printf_common+0xa8>
 8006b22:	2301      	movs	r3, #1
 8006b24:	4652      	mov	r2, sl
 8006b26:	4649      	mov	r1, r9
 8006b28:	4638      	mov	r0, r7
 8006b2a:	47c0      	blx	r8
 8006b2c:	3001      	adds	r0, #1
 8006b2e:	d103      	bne.n	8006b38 <_printf_common+0xac>
 8006b30:	f04f 30ff 	mov.w	r0, #4294967295
 8006b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b38:	3501      	adds	r5, #1
 8006b3a:	e7c6      	b.n	8006aca <_printf_common+0x3e>
 8006b3c:	18e1      	adds	r1, r4, r3
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	2030      	movs	r0, #48	; 0x30
 8006b42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b46:	4422      	add	r2, r4
 8006b48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b50:	3302      	adds	r3, #2
 8006b52:	e7c7      	b.n	8006ae4 <_printf_common+0x58>
 8006b54:	2301      	movs	r3, #1
 8006b56:	4622      	mov	r2, r4
 8006b58:	4649      	mov	r1, r9
 8006b5a:	4638      	mov	r0, r7
 8006b5c:	47c0      	blx	r8
 8006b5e:	3001      	adds	r0, #1
 8006b60:	d0e6      	beq.n	8006b30 <_printf_common+0xa4>
 8006b62:	3601      	adds	r6, #1
 8006b64:	e7d9      	b.n	8006b1a <_printf_common+0x8e>
	...

08006b68 <_printf_i>:
 8006b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b6c:	7e0f      	ldrb	r7, [r1, #24]
 8006b6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b70:	2f78      	cmp	r7, #120	; 0x78
 8006b72:	4691      	mov	r9, r2
 8006b74:	4680      	mov	r8, r0
 8006b76:	460c      	mov	r4, r1
 8006b78:	469a      	mov	sl, r3
 8006b7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b7e:	d807      	bhi.n	8006b90 <_printf_i+0x28>
 8006b80:	2f62      	cmp	r7, #98	; 0x62
 8006b82:	d80a      	bhi.n	8006b9a <_printf_i+0x32>
 8006b84:	2f00      	cmp	r7, #0
 8006b86:	f000 80d4 	beq.w	8006d32 <_printf_i+0x1ca>
 8006b8a:	2f58      	cmp	r7, #88	; 0x58
 8006b8c:	f000 80c0 	beq.w	8006d10 <_printf_i+0x1a8>
 8006b90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b98:	e03a      	b.n	8006c10 <_printf_i+0xa8>
 8006b9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b9e:	2b15      	cmp	r3, #21
 8006ba0:	d8f6      	bhi.n	8006b90 <_printf_i+0x28>
 8006ba2:	a101      	add	r1, pc, #4	; (adr r1, 8006ba8 <_printf_i+0x40>)
 8006ba4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ba8:	08006c01 	.word	0x08006c01
 8006bac:	08006c15 	.word	0x08006c15
 8006bb0:	08006b91 	.word	0x08006b91
 8006bb4:	08006b91 	.word	0x08006b91
 8006bb8:	08006b91 	.word	0x08006b91
 8006bbc:	08006b91 	.word	0x08006b91
 8006bc0:	08006c15 	.word	0x08006c15
 8006bc4:	08006b91 	.word	0x08006b91
 8006bc8:	08006b91 	.word	0x08006b91
 8006bcc:	08006b91 	.word	0x08006b91
 8006bd0:	08006b91 	.word	0x08006b91
 8006bd4:	08006d19 	.word	0x08006d19
 8006bd8:	08006c41 	.word	0x08006c41
 8006bdc:	08006cd3 	.word	0x08006cd3
 8006be0:	08006b91 	.word	0x08006b91
 8006be4:	08006b91 	.word	0x08006b91
 8006be8:	08006d3b 	.word	0x08006d3b
 8006bec:	08006b91 	.word	0x08006b91
 8006bf0:	08006c41 	.word	0x08006c41
 8006bf4:	08006b91 	.word	0x08006b91
 8006bf8:	08006b91 	.word	0x08006b91
 8006bfc:	08006cdb 	.word	0x08006cdb
 8006c00:	682b      	ldr	r3, [r5, #0]
 8006c02:	1d1a      	adds	r2, r3, #4
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	602a      	str	r2, [r5, #0]
 8006c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c10:	2301      	movs	r3, #1
 8006c12:	e09f      	b.n	8006d54 <_printf_i+0x1ec>
 8006c14:	6820      	ldr	r0, [r4, #0]
 8006c16:	682b      	ldr	r3, [r5, #0]
 8006c18:	0607      	lsls	r7, r0, #24
 8006c1a:	f103 0104 	add.w	r1, r3, #4
 8006c1e:	6029      	str	r1, [r5, #0]
 8006c20:	d501      	bpl.n	8006c26 <_printf_i+0xbe>
 8006c22:	681e      	ldr	r6, [r3, #0]
 8006c24:	e003      	b.n	8006c2e <_printf_i+0xc6>
 8006c26:	0646      	lsls	r6, r0, #25
 8006c28:	d5fb      	bpl.n	8006c22 <_printf_i+0xba>
 8006c2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006c2e:	2e00      	cmp	r6, #0
 8006c30:	da03      	bge.n	8006c3a <_printf_i+0xd2>
 8006c32:	232d      	movs	r3, #45	; 0x2d
 8006c34:	4276      	negs	r6, r6
 8006c36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c3a:	485a      	ldr	r0, [pc, #360]	; (8006da4 <_printf_i+0x23c>)
 8006c3c:	230a      	movs	r3, #10
 8006c3e:	e012      	b.n	8006c66 <_printf_i+0xfe>
 8006c40:	682b      	ldr	r3, [r5, #0]
 8006c42:	6820      	ldr	r0, [r4, #0]
 8006c44:	1d19      	adds	r1, r3, #4
 8006c46:	6029      	str	r1, [r5, #0]
 8006c48:	0605      	lsls	r5, r0, #24
 8006c4a:	d501      	bpl.n	8006c50 <_printf_i+0xe8>
 8006c4c:	681e      	ldr	r6, [r3, #0]
 8006c4e:	e002      	b.n	8006c56 <_printf_i+0xee>
 8006c50:	0641      	lsls	r1, r0, #25
 8006c52:	d5fb      	bpl.n	8006c4c <_printf_i+0xe4>
 8006c54:	881e      	ldrh	r6, [r3, #0]
 8006c56:	4853      	ldr	r0, [pc, #332]	; (8006da4 <_printf_i+0x23c>)
 8006c58:	2f6f      	cmp	r7, #111	; 0x6f
 8006c5a:	bf0c      	ite	eq
 8006c5c:	2308      	moveq	r3, #8
 8006c5e:	230a      	movne	r3, #10
 8006c60:	2100      	movs	r1, #0
 8006c62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c66:	6865      	ldr	r5, [r4, #4]
 8006c68:	60a5      	str	r5, [r4, #8]
 8006c6a:	2d00      	cmp	r5, #0
 8006c6c:	bfa2      	ittt	ge
 8006c6e:	6821      	ldrge	r1, [r4, #0]
 8006c70:	f021 0104 	bicge.w	r1, r1, #4
 8006c74:	6021      	strge	r1, [r4, #0]
 8006c76:	b90e      	cbnz	r6, 8006c7c <_printf_i+0x114>
 8006c78:	2d00      	cmp	r5, #0
 8006c7a:	d04b      	beq.n	8006d14 <_printf_i+0x1ac>
 8006c7c:	4615      	mov	r5, r2
 8006c7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c82:	fb03 6711 	mls	r7, r3, r1, r6
 8006c86:	5dc7      	ldrb	r7, [r0, r7]
 8006c88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c8c:	4637      	mov	r7, r6
 8006c8e:	42bb      	cmp	r3, r7
 8006c90:	460e      	mov	r6, r1
 8006c92:	d9f4      	bls.n	8006c7e <_printf_i+0x116>
 8006c94:	2b08      	cmp	r3, #8
 8006c96:	d10b      	bne.n	8006cb0 <_printf_i+0x148>
 8006c98:	6823      	ldr	r3, [r4, #0]
 8006c9a:	07de      	lsls	r6, r3, #31
 8006c9c:	d508      	bpl.n	8006cb0 <_printf_i+0x148>
 8006c9e:	6923      	ldr	r3, [r4, #16]
 8006ca0:	6861      	ldr	r1, [r4, #4]
 8006ca2:	4299      	cmp	r1, r3
 8006ca4:	bfde      	ittt	le
 8006ca6:	2330      	movle	r3, #48	; 0x30
 8006ca8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cb0:	1b52      	subs	r2, r2, r5
 8006cb2:	6122      	str	r2, [r4, #16]
 8006cb4:	f8cd a000 	str.w	sl, [sp]
 8006cb8:	464b      	mov	r3, r9
 8006cba:	aa03      	add	r2, sp, #12
 8006cbc:	4621      	mov	r1, r4
 8006cbe:	4640      	mov	r0, r8
 8006cc0:	f7ff fee4 	bl	8006a8c <_printf_common>
 8006cc4:	3001      	adds	r0, #1
 8006cc6:	d14a      	bne.n	8006d5e <_printf_i+0x1f6>
 8006cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ccc:	b004      	add	sp, #16
 8006cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	f043 0320 	orr.w	r3, r3, #32
 8006cd8:	6023      	str	r3, [r4, #0]
 8006cda:	4833      	ldr	r0, [pc, #204]	; (8006da8 <_printf_i+0x240>)
 8006cdc:	2778      	movs	r7, #120	; 0x78
 8006cde:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	6829      	ldr	r1, [r5, #0]
 8006ce6:	061f      	lsls	r7, r3, #24
 8006ce8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006cec:	d402      	bmi.n	8006cf4 <_printf_i+0x18c>
 8006cee:	065f      	lsls	r7, r3, #25
 8006cf0:	bf48      	it	mi
 8006cf2:	b2b6      	uxthmi	r6, r6
 8006cf4:	07df      	lsls	r7, r3, #31
 8006cf6:	bf48      	it	mi
 8006cf8:	f043 0320 	orrmi.w	r3, r3, #32
 8006cfc:	6029      	str	r1, [r5, #0]
 8006cfe:	bf48      	it	mi
 8006d00:	6023      	strmi	r3, [r4, #0]
 8006d02:	b91e      	cbnz	r6, 8006d0c <_printf_i+0x1a4>
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	f023 0320 	bic.w	r3, r3, #32
 8006d0a:	6023      	str	r3, [r4, #0]
 8006d0c:	2310      	movs	r3, #16
 8006d0e:	e7a7      	b.n	8006c60 <_printf_i+0xf8>
 8006d10:	4824      	ldr	r0, [pc, #144]	; (8006da4 <_printf_i+0x23c>)
 8006d12:	e7e4      	b.n	8006cde <_printf_i+0x176>
 8006d14:	4615      	mov	r5, r2
 8006d16:	e7bd      	b.n	8006c94 <_printf_i+0x12c>
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	6826      	ldr	r6, [r4, #0]
 8006d1c:	6961      	ldr	r1, [r4, #20]
 8006d1e:	1d18      	adds	r0, r3, #4
 8006d20:	6028      	str	r0, [r5, #0]
 8006d22:	0635      	lsls	r5, r6, #24
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	d501      	bpl.n	8006d2c <_printf_i+0x1c4>
 8006d28:	6019      	str	r1, [r3, #0]
 8006d2a:	e002      	b.n	8006d32 <_printf_i+0x1ca>
 8006d2c:	0670      	lsls	r0, r6, #25
 8006d2e:	d5fb      	bpl.n	8006d28 <_printf_i+0x1c0>
 8006d30:	8019      	strh	r1, [r3, #0]
 8006d32:	2300      	movs	r3, #0
 8006d34:	6123      	str	r3, [r4, #16]
 8006d36:	4615      	mov	r5, r2
 8006d38:	e7bc      	b.n	8006cb4 <_printf_i+0x14c>
 8006d3a:	682b      	ldr	r3, [r5, #0]
 8006d3c:	1d1a      	adds	r2, r3, #4
 8006d3e:	602a      	str	r2, [r5, #0]
 8006d40:	681d      	ldr	r5, [r3, #0]
 8006d42:	6862      	ldr	r2, [r4, #4]
 8006d44:	2100      	movs	r1, #0
 8006d46:	4628      	mov	r0, r5
 8006d48:	f7f9 fa4a 	bl	80001e0 <memchr>
 8006d4c:	b108      	cbz	r0, 8006d52 <_printf_i+0x1ea>
 8006d4e:	1b40      	subs	r0, r0, r5
 8006d50:	6060      	str	r0, [r4, #4]
 8006d52:	6863      	ldr	r3, [r4, #4]
 8006d54:	6123      	str	r3, [r4, #16]
 8006d56:	2300      	movs	r3, #0
 8006d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d5c:	e7aa      	b.n	8006cb4 <_printf_i+0x14c>
 8006d5e:	6923      	ldr	r3, [r4, #16]
 8006d60:	462a      	mov	r2, r5
 8006d62:	4649      	mov	r1, r9
 8006d64:	4640      	mov	r0, r8
 8006d66:	47d0      	blx	sl
 8006d68:	3001      	adds	r0, #1
 8006d6a:	d0ad      	beq.n	8006cc8 <_printf_i+0x160>
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	079b      	lsls	r3, r3, #30
 8006d70:	d413      	bmi.n	8006d9a <_printf_i+0x232>
 8006d72:	68e0      	ldr	r0, [r4, #12]
 8006d74:	9b03      	ldr	r3, [sp, #12]
 8006d76:	4298      	cmp	r0, r3
 8006d78:	bfb8      	it	lt
 8006d7a:	4618      	movlt	r0, r3
 8006d7c:	e7a6      	b.n	8006ccc <_printf_i+0x164>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	4632      	mov	r2, r6
 8006d82:	4649      	mov	r1, r9
 8006d84:	4640      	mov	r0, r8
 8006d86:	47d0      	blx	sl
 8006d88:	3001      	adds	r0, #1
 8006d8a:	d09d      	beq.n	8006cc8 <_printf_i+0x160>
 8006d8c:	3501      	adds	r5, #1
 8006d8e:	68e3      	ldr	r3, [r4, #12]
 8006d90:	9903      	ldr	r1, [sp, #12]
 8006d92:	1a5b      	subs	r3, r3, r1
 8006d94:	42ab      	cmp	r3, r5
 8006d96:	dcf2      	bgt.n	8006d7e <_printf_i+0x216>
 8006d98:	e7eb      	b.n	8006d72 <_printf_i+0x20a>
 8006d9a:	2500      	movs	r5, #0
 8006d9c:	f104 0619 	add.w	r6, r4, #25
 8006da0:	e7f5      	b.n	8006d8e <_printf_i+0x226>
 8006da2:	bf00      	nop
 8006da4:	0800ac5e 	.word	0x0800ac5e
 8006da8:	0800ac6f 	.word	0x0800ac6f

08006dac <std>:
 8006dac:	2300      	movs	r3, #0
 8006dae:	b510      	push	{r4, lr}
 8006db0:	4604      	mov	r4, r0
 8006db2:	e9c0 3300 	strd	r3, r3, [r0]
 8006db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006dba:	6083      	str	r3, [r0, #8]
 8006dbc:	8181      	strh	r1, [r0, #12]
 8006dbe:	6643      	str	r3, [r0, #100]	; 0x64
 8006dc0:	81c2      	strh	r2, [r0, #14]
 8006dc2:	6183      	str	r3, [r0, #24]
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	2208      	movs	r2, #8
 8006dc8:	305c      	adds	r0, #92	; 0x5c
 8006dca:	f000 f914 	bl	8006ff6 <memset>
 8006dce:	4b0d      	ldr	r3, [pc, #52]	; (8006e04 <std+0x58>)
 8006dd0:	6263      	str	r3, [r4, #36]	; 0x24
 8006dd2:	4b0d      	ldr	r3, [pc, #52]	; (8006e08 <std+0x5c>)
 8006dd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006dd6:	4b0d      	ldr	r3, [pc, #52]	; (8006e0c <std+0x60>)
 8006dd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006dda:	4b0d      	ldr	r3, [pc, #52]	; (8006e10 <std+0x64>)
 8006ddc:	6323      	str	r3, [r4, #48]	; 0x30
 8006dde:	4b0d      	ldr	r3, [pc, #52]	; (8006e14 <std+0x68>)
 8006de0:	6224      	str	r4, [r4, #32]
 8006de2:	429c      	cmp	r4, r3
 8006de4:	d006      	beq.n	8006df4 <std+0x48>
 8006de6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006dea:	4294      	cmp	r4, r2
 8006dec:	d002      	beq.n	8006df4 <std+0x48>
 8006dee:	33d0      	adds	r3, #208	; 0xd0
 8006df0:	429c      	cmp	r4, r3
 8006df2:	d105      	bne.n	8006e00 <std+0x54>
 8006df4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dfc:	f000 b978 	b.w	80070f0 <__retarget_lock_init_recursive>
 8006e00:	bd10      	pop	{r4, pc}
 8006e02:	bf00      	nop
 8006e04:	08006f71 	.word	0x08006f71
 8006e08:	08006f93 	.word	0x08006f93
 8006e0c:	08006fcb 	.word	0x08006fcb
 8006e10:	08006fef 	.word	0x08006fef
 8006e14:	200007bc 	.word	0x200007bc

08006e18 <stdio_exit_handler>:
 8006e18:	4a02      	ldr	r2, [pc, #8]	; (8006e24 <stdio_exit_handler+0xc>)
 8006e1a:	4903      	ldr	r1, [pc, #12]	; (8006e28 <stdio_exit_handler+0x10>)
 8006e1c:	4803      	ldr	r0, [pc, #12]	; (8006e2c <stdio_exit_handler+0x14>)
 8006e1e:	f000 b869 	b.w	8006ef4 <_fwalk_sglue>
 8006e22:	bf00      	nop
 8006e24:	20000068 	.word	0x20000068
 8006e28:	08008ac1 	.word	0x08008ac1
 8006e2c:	20000074 	.word	0x20000074

08006e30 <cleanup_stdio>:
 8006e30:	6841      	ldr	r1, [r0, #4]
 8006e32:	4b0c      	ldr	r3, [pc, #48]	; (8006e64 <cleanup_stdio+0x34>)
 8006e34:	4299      	cmp	r1, r3
 8006e36:	b510      	push	{r4, lr}
 8006e38:	4604      	mov	r4, r0
 8006e3a:	d001      	beq.n	8006e40 <cleanup_stdio+0x10>
 8006e3c:	f001 fe40 	bl	8008ac0 <_fflush_r>
 8006e40:	68a1      	ldr	r1, [r4, #8]
 8006e42:	4b09      	ldr	r3, [pc, #36]	; (8006e68 <cleanup_stdio+0x38>)
 8006e44:	4299      	cmp	r1, r3
 8006e46:	d002      	beq.n	8006e4e <cleanup_stdio+0x1e>
 8006e48:	4620      	mov	r0, r4
 8006e4a:	f001 fe39 	bl	8008ac0 <_fflush_r>
 8006e4e:	68e1      	ldr	r1, [r4, #12]
 8006e50:	4b06      	ldr	r3, [pc, #24]	; (8006e6c <cleanup_stdio+0x3c>)
 8006e52:	4299      	cmp	r1, r3
 8006e54:	d004      	beq.n	8006e60 <cleanup_stdio+0x30>
 8006e56:	4620      	mov	r0, r4
 8006e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e5c:	f001 be30 	b.w	8008ac0 <_fflush_r>
 8006e60:	bd10      	pop	{r4, pc}
 8006e62:	bf00      	nop
 8006e64:	200007bc 	.word	0x200007bc
 8006e68:	20000824 	.word	0x20000824
 8006e6c:	2000088c 	.word	0x2000088c

08006e70 <global_stdio_init.part.0>:
 8006e70:	b510      	push	{r4, lr}
 8006e72:	4b0b      	ldr	r3, [pc, #44]	; (8006ea0 <global_stdio_init.part.0+0x30>)
 8006e74:	4c0b      	ldr	r4, [pc, #44]	; (8006ea4 <global_stdio_init.part.0+0x34>)
 8006e76:	4a0c      	ldr	r2, [pc, #48]	; (8006ea8 <global_stdio_init.part.0+0x38>)
 8006e78:	601a      	str	r2, [r3, #0]
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	2104      	movs	r1, #4
 8006e80:	f7ff ff94 	bl	8006dac <std>
 8006e84:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006e88:	2201      	movs	r2, #1
 8006e8a:	2109      	movs	r1, #9
 8006e8c:	f7ff ff8e 	bl	8006dac <std>
 8006e90:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006e94:	2202      	movs	r2, #2
 8006e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e9a:	2112      	movs	r1, #18
 8006e9c:	f7ff bf86 	b.w	8006dac <std>
 8006ea0:	200008f4 	.word	0x200008f4
 8006ea4:	200007bc 	.word	0x200007bc
 8006ea8:	08006e19 	.word	0x08006e19

08006eac <__sfp_lock_acquire>:
 8006eac:	4801      	ldr	r0, [pc, #4]	; (8006eb4 <__sfp_lock_acquire+0x8>)
 8006eae:	f000 b920 	b.w	80070f2 <__retarget_lock_acquire_recursive>
 8006eb2:	bf00      	nop
 8006eb4:	200008fd 	.word	0x200008fd

08006eb8 <__sfp_lock_release>:
 8006eb8:	4801      	ldr	r0, [pc, #4]	; (8006ec0 <__sfp_lock_release+0x8>)
 8006eba:	f000 b91b 	b.w	80070f4 <__retarget_lock_release_recursive>
 8006ebe:	bf00      	nop
 8006ec0:	200008fd 	.word	0x200008fd

08006ec4 <__sinit>:
 8006ec4:	b510      	push	{r4, lr}
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	f7ff fff0 	bl	8006eac <__sfp_lock_acquire>
 8006ecc:	6a23      	ldr	r3, [r4, #32]
 8006ece:	b11b      	cbz	r3, 8006ed8 <__sinit+0x14>
 8006ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ed4:	f7ff bff0 	b.w	8006eb8 <__sfp_lock_release>
 8006ed8:	4b04      	ldr	r3, [pc, #16]	; (8006eec <__sinit+0x28>)
 8006eda:	6223      	str	r3, [r4, #32]
 8006edc:	4b04      	ldr	r3, [pc, #16]	; (8006ef0 <__sinit+0x2c>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1f5      	bne.n	8006ed0 <__sinit+0xc>
 8006ee4:	f7ff ffc4 	bl	8006e70 <global_stdio_init.part.0>
 8006ee8:	e7f2      	b.n	8006ed0 <__sinit+0xc>
 8006eea:	bf00      	nop
 8006eec:	08006e31 	.word	0x08006e31
 8006ef0:	200008f4 	.word	0x200008f4

08006ef4 <_fwalk_sglue>:
 8006ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ef8:	4607      	mov	r7, r0
 8006efa:	4688      	mov	r8, r1
 8006efc:	4614      	mov	r4, r2
 8006efe:	2600      	movs	r6, #0
 8006f00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f04:	f1b9 0901 	subs.w	r9, r9, #1
 8006f08:	d505      	bpl.n	8006f16 <_fwalk_sglue+0x22>
 8006f0a:	6824      	ldr	r4, [r4, #0]
 8006f0c:	2c00      	cmp	r4, #0
 8006f0e:	d1f7      	bne.n	8006f00 <_fwalk_sglue+0xc>
 8006f10:	4630      	mov	r0, r6
 8006f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f16:	89ab      	ldrh	r3, [r5, #12]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d907      	bls.n	8006f2c <_fwalk_sglue+0x38>
 8006f1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f20:	3301      	adds	r3, #1
 8006f22:	d003      	beq.n	8006f2c <_fwalk_sglue+0x38>
 8006f24:	4629      	mov	r1, r5
 8006f26:	4638      	mov	r0, r7
 8006f28:	47c0      	blx	r8
 8006f2a:	4306      	orrs	r6, r0
 8006f2c:	3568      	adds	r5, #104	; 0x68
 8006f2e:	e7e9      	b.n	8006f04 <_fwalk_sglue+0x10>

08006f30 <siprintf>:
 8006f30:	b40e      	push	{r1, r2, r3}
 8006f32:	b500      	push	{lr}
 8006f34:	b09c      	sub	sp, #112	; 0x70
 8006f36:	ab1d      	add	r3, sp, #116	; 0x74
 8006f38:	9002      	str	r0, [sp, #8]
 8006f3a:	9006      	str	r0, [sp, #24]
 8006f3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f40:	4809      	ldr	r0, [pc, #36]	; (8006f68 <siprintf+0x38>)
 8006f42:	9107      	str	r1, [sp, #28]
 8006f44:	9104      	str	r1, [sp, #16]
 8006f46:	4909      	ldr	r1, [pc, #36]	; (8006f6c <siprintf+0x3c>)
 8006f48:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f4c:	9105      	str	r1, [sp, #20]
 8006f4e:	6800      	ldr	r0, [r0, #0]
 8006f50:	9301      	str	r3, [sp, #4]
 8006f52:	a902      	add	r1, sp, #8
 8006f54:	f001 fc30 	bl	80087b8 <_svfiprintf_r>
 8006f58:	9b02      	ldr	r3, [sp, #8]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	701a      	strb	r2, [r3, #0]
 8006f5e:	b01c      	add	sp, #112	; 0x70
 8006f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f64:	b003      	add	sp, #12
 8006f66:	4770      	bx	lr
 8006f68:	200000c0 	.word	0x200000c0
 8006f6c:	ffff0208 	.word	0xffff0208

08006f70 <__sread>:
 8006f70:	b510      	push	{r4, lr}
 8006f72:	460c      	mov	r4, r1
 8006f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f78:	f000 f86c 	bl	8007054 <_read_r>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	bfab      	itete	ge
 8006f80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f82:	89a3      	ldrhlt	r3, [r4, #12]
 8006f84:	181b      	addge	r3, r3, r0
 8006f86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f8a:	bfac      	ite	ge
 8006f8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f8e:	81a3      	strhlt	r3, [r4, #12]
 8006f90:	bd10      	pop	{r4, pc}

08006f92 <__swrite>:
 8006f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f96:	461f      	mov	r7, r3
 8006f98:	898b      	ldrh	r3, [r1, #12]
 8006f9a:	05db      	lsls	r3, r3, #23
 8006f9c:	4605      	mov	r5, r0
 8006f9e:	460c      	mov	r4, r1
 8006fa0:	4616      	mov	r6, r2
 8006fa2:	d505      	bpl.n	8006fb0 <__swrite+0x1e>
 8006fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fa8:	2302      	movs	r3, #2
 8006faa:	2200      	movs	r2, #0
 8006fac:	f000 f840 	bl	8007030 <_lseek_r>
 8006fb0:	89a3      	ldrh	r3, [r4, #12]
 8006fb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fba:	81a3      	strh	r3, [r4, #12]
 8006fbc:	4632      	mov	r2, r6
 8006fbe:	463b      	mov	r3, r7
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fc6:	f000 b857 	b.w	8007078 <_write_r>

08006fca <__sseek>:
 8006fca:	b510      	push	{r4, lr}
 8006fcc:	460c      	mov	r4, r1
 8006fce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fd2:	f000 f82d 	bl	8007030 <_lseek_r>
 8006fd6:	1c43      	adds	r3, r0, #1
 8006fd8:	89a3      	ldrh	r3, [r4, #12]
 8006fda:	bf15      	itete	ne
 8006fdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fe2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fe6:	81a3      	strheq	r3, [r4, #12]
 8006fe8:	bf18      	it	ne
 8006fea:	81a3      	strhne	r3, [r4, #12]
 8006fec:	bd10      	pop	{r4, pc}

08006fee <__sclose>:
 8006fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ff2:	f000 b80d 	b.w	8007010 <_close_r>

08006ff6 <memset>:
 8006ff6:	4402      	add	r2, r0
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d100      	bne.n	8007000 <memset+0xa>
 8006ffe:	4770      	bx	lr
 8007000:	f803 1b01 	strb.w	r1, [r3], #1
 8007004:	e7f9      	b.n	8006ffa <memset+0x4>
	...

08007008 <_localeconv_r>:
 8007008:	4800      	ldr	r0, [pc, #0]	; (800700c <_localeconv_r+0x4>)
 800700a:	4770      	bx	lr
 800700c:	200001b4 	.word	0x200001b4

08007010 <_close_r>:
 8007010:	b538      	push	{r3, r4, r5, lr}
 8007012:	4d06      	ldr	r5, [pc, #24]	; (800702c <_close_r+0x1c>)
 8007014:	2300      	movs	r3, #0
 8007016:	4604      	mov	r4, r0
 8007018:	4608      	mov	r0, r1
 800701a:	602b      	str	r3, [r5, #0]
 800701c:	f7fb f9e3 	bl	80023e6 <_close>
 8007020:	1c43      	adds	r3, r0, #1
 8007022:	d102      	bne.n	800702a <_close_r+0x1a>
 8007024:	682b      	ldr	r3, [r5, #0]
 8007026:	b103      	cbz	r3, 800702a <_close_r+0x1a>
 8007028:	6023      	str	r3, [r4, #0]
 800702a:	bd38      	pop	{r3, r4, r5, pc}
 800702c:	200008f8 	.word	0x200008f8

08007030 <_lseek_r>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	4d07      	ldr	r5, [pc, #28]	; (8007050 <_lseek_r+0x20>)
 8007034:	4604      	mov	r4, r0
 8007036:	4608      	mov	r0, r1
 8007038:	4611      	mov	r1, r2
 800703a:	2200      	movs	r2, #0
 800703c:	602a      	str	r2, [r5, #0]
 800703e:	461a      	mov	r2, r3
 8007040:	f7fb f9f8 	bl	8002434 <_lseek>
 8007044:	1c43      	adds	r3, r0, #1
 8007046:	d102      	bne.n	800704e <_lseek_r+0x1e>
 8007048:	682b      	ldr	r3, [r5, #0]
 800704a:	b103      	cbz	r3, 800704e <_lseek_r+0x1e>
 800704c:	6023      	str	r3, [r4, #0]
 800704e:	bd38      	pop	{r3, r4, r5, pc}
 8007050:	200008f8 	.word	0x200008f8

08007054 <_read_r>:
 8007054:	b538      	push	{r3, r4, r5, lr}
 8007056:	4d07      	ldr	r5, [pc, #28]	; (8007074 <_read_r+0x20>)
 8007058:	4604      	mov	r4, r0
 800705a:	4608      	mov	r0, r1
 800705c:	4611      	mov	r1, r2
 800705e:	2200      	movs	r2, #0
 8007060:	602a      	str	r2, [r5, #0]
 8007062:	461a      	mov	r2, r3
 8007064:	f7fb f986 	bl	8002374 <_read>
 8007068:	1c43      	adds	r3, r0, #1
 800706a:	d102      	bne.n	8007072 <_read_r+0x1e>
 800706c:	682b      	ldr	r3, [r5, #0]
 800706e:	b103      	cbz	r3, 8007072 <_read_r+0x1e>
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	bd38      	pop	{r3, r4, r5, pc}
 8007074:	200008f8 	.word	0x200008f8

08007078 <_write_r>:
 8007078:	b538      	push	{r3, r4, r5, lr}
 800707a:	4d07      	ldr	r5, [pc, #28]	; (8007098 <_write_r+0x20>)
 800707c:	4604      	mov	r4, r0
 800707e:	4608      	mov	r0, r1
 8007080:	4611      	mov	r1, r2
 8007082:	2200      	movs	r2, #0
 8007084:	602a      	str	r2, [r5, #0]
 8007086:	461a      	mov	r2, r3
 8007088:	f7fb f991 	bl	80023ae <_write>
 800708c:	1c43      	adds	r3, r0, #1
 800708e:	d102      	bne.n	8007096 <_write_r+0x1e>
 8007090:	682b      	ldr	r3, [r5, #0]
 8007092:	b103      	cbz	r3, 8007096 <_write_r+0x1e>
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	bd38      	pop	{r3, r4, r5, pc}
 8007098:	200008f8 	.word	0x200008f8

0800709c <__errno>:
 800709c:	4b01      	ldr	r3, [pc, #4]	; (80070a4 <__errno+0x8>)
 800709e:	6818      	ldr	r0, [r3, #0]
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	200000c0 	.word	0x200000c0

080070a8 <__libc_init_array>:
 80070a8:	b570      	push	{r4, r5, r6, lr}
 80070aa:	4d0d      	ldr	r5, [pc, #52]	; (80070e0 <__libc_init_array+0x38>)
 80070ac:	4c0d      	ldr	r4, [pc, #52]	; (80070e4 <__libc_init_array+0x3c>)
 80070ae:	1b64      	subs	r4, r4, r5
 80070b0:	10a4      	asrs	r4, r4, #2
 80070b2:	2600      	movs	r6, #0
 80070b4:	42a6      	cmp	r6, r4
 80070b6:	d109      	bne.n	80070cc <__libc_init_array+0x24>
 80070b8:	4d0b      	ldr	r5, [pc, #44]	; (80070e8 <__libc_init_array+0x40>)
 80070ba:	4c0c      	ldr	r4, [pc, #48]	; (80070ec <__libc_init_array+0x44>)
 80070bc:	f003 fa8e 	bl	800a5dc <_init>
 80070c0:	1b64      	subs	r4, r4, r5
 80070c2:	10a4      	asrs	r4, r4, #2
 80070c4:	2600      	movs	r6, #0
 80070c6:	42a6      	cmp	r6, r4
 80070c8:	d105      	bne.n	80070d6 <__libc_init_array+0x2e>
 80070ca:	bd70      	pop	{r4, r5, r6, pc}
 80070cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80070d0:	4798      	blx	r3
 80070d2:	3601      	adds	r6, #1
 80070d4:	e7ee      	b.n	80070b4 <__libc_init_array+0xc>
 80070d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070da:	4798      	blx	r3
 80070dc:	3601      	adds	r6, #1
 80070de:	e7f2      	b.n	80070c6 <__libc_init_array+0x1e>
 80070e0:	0800aff8 	.word	0x0800aff8
 80070e4:	0800aff8 	.word	0x0800aff8
 80070e8:	0800aff8 	.word	0x0800aff8
 80070ec:	0800affc 	.word	0x0800affc

080070f0 <__retarget_lock_init_recursive>:
 80070f0:	4770      	bx	lr

080070f2 <__retarget_lock_acquire_recursive>:
 80070f2:	4770      	bx	lr

080070f4 <__retarget_lock_release_recursive>:
 80070f4:	4770      	bx	lr

080070f6 <memcpy>:
 80070f6:	440a      	add	r2, r1
 80070f8:	4291      	cmp	r1, r2
 80070fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80070fe:	d100      	bne.n	8007102 <memcpy+0xc>
 8007100:	4770      	bx	lr
 8007102:	b510      	push	{r4, lr}
 8007104:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007108:	f803 4f01 	strb.w	r4, [r3, #1]!
 800710c:	4291      	cmp	r1, r2
 800710e:	d1f9      	bne.n	8007104 <memcpy+0xe>
 8007110:	bd10      	pop	{r4, pc}

08007112 <quorem>:
 8007112:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007116:	6903      	ldr	r3, [r0, #16]
 8007118:	690c      	ldr	r4, [r1, #16]
 800711a:	42a3      	cmp	r3, r4
 800711c:	4607      	mov	r7, r0
 800711e:	db7e      	blt.n	800721e <quorem+0x10c>
 8007120:	3c01      	subs	r4, #1
 8007122:	f101 0814 	add.w	r8, r1, #20
 8007126:	f100 0514 	add.w	r5, r0, #20
 800712a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800712e:	9301      	str	r3, [sp, #4]
 8007130:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007134:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007138:	3301      	adds	r3, #1
 800713a:	429a      	cmp	r2, r3
 800713c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007140:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007144:	fbb2 f6f3 	udiv	r6, r2, r3
 8007148:	d331      	bcc.n	80071ae <quorem+0x9c>
 800714a:	f04f 0e00 	mov.w	lr, #0
 800714e:	4640      	mov	r0, r8
 8007150:	46ac      	mov	ip, r5
 8007152:	46f2      	mov	sl, lr
 8007154:	f850 2b04 	ldr.w	r2, [r0], #4
 8007158:	b293      	uxth	r3, r2
 800715a:	fb06 e303 	mla	r3, r6, r3, lr
 800715e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007162:	0c1a      	lsrs	r2, r3, #16
 8007164:	b29b      	uxth	r3, r3
 8007166:	ebaa 0303 	sub.w	r3, sl, r3
 800716a:	f8dc a000 	ldr.w	sl, [ip]
 800716e:	fa13 f38a 	uxtah	r3, r3, sl
 8007172:	fb06 220e 	mla	r2, r6, lr, r2
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	9b00      	ldr	r3, [sp, #0]
 800717a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800717e:	b292      	uxth	r2, r2
 8007180:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007184:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007188:	f8bd 3000 	ldrh.w	r3, [sp]
 800718c:	4581      	cmp	r9, r0
 800718e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007192:	f84c 3b04 	str.w	r3, [ip], #4
 8007196:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800719a:	d2db      	bcs.n	8007154 <quorem+0x42>
 800719c:	f855 300b 	ldr.w	r3, [r5, fp]
 80071a0:	b92b      	cbnz	r3, 80071ae <quorem+0x9c>
 80071a2:	9b01      	ldr	r3, [sp, #4]
 80071a4:	3b04      	subs	r3, #4
 80071a6:	429d      	cmp	r5, r3
 80071a8:	461a      	mov	r2, r3
 80071aa:	d32c      	bcc.n	8007206 <quorem+0xf4>
 80071ac:	613c      	str	r4, [r7, #16]
 80071ae:	4638      	mov	r0, r7
 80071b0:	f001 f9a8 	bl	8008504 <__mcmp>
 80071b4:	2800      	cmp	r0, #0
 80071b6:	db22      	blt.n	80071fe <quorem+0xec>
 80071b8:	3601      	adds	r6, #1
 80071ba:	4629      	mov	r1, r5
 80071bc:	2000      	movs	r0, #0
 80071be:	f858 2b04 	ldr.w	r2, [r8], #4
 80071c2:	f8d1 c000 	ldr.w	ip, [r1]
 80071c6:	b293      	uxth	r3, r2
 80071c8:	1ac3      	subs	r3, r0, r3
 80071ca:	0c12      	lsrs	r2, r2, #16
 80071cc:	fa13 f38c 	uxtah	r3, r3, ip
 80071d0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80071d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071d8:	b29b      	uxth	r3, r3
 80071da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071de:	45c1      	cmp	r9, r8
 80071e0:	f841 3b04 	str.w	r3, [r1], #4
 80071e4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80071e8:	d2e9      	bcs.n	80071be <quorem+0xac>
 80071ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071f2:	b922      	cbnz	r2, 80071fe <quorem+0xec>
 80071f4:	3b04      	subs	r3, #4
 80071f6:	429d      	cmp	r5, r3
 80071f8:	461a      	mov	r2, r3
 80071fa:	d30a      	bcc.n	8007212 <quorem+0x100>
 80071fc:	613c      	str	r4, [r7, #16]
 80071fe:	4630      	mov	r0, r6
 8007200:	b003      	add	sp, #12
 8007202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007206:	6812      	ldr	r2, [r2, #0]
 8007208:	3b04      	subs	r3, #4
 800720a:	2a00      	cmp	r2, #0
 800720c:	d1ce      	bne.n	80071ac <quorem+0x9a>
 800720e:	3c01      	subs	r4, #1
 8007210:	e7c9      	b.n	80071a6 <quorem+0x94>
 8007212:	6812      	ldr	r2, [r2, #0]
 8007214:	3b04      	subs	r3, #4
 8007216:	2a00      	cmp	r2, #0
 8007218:	d1f0      	bne.n	80071fc <quorem+0xea>
 800721a:	3c01      	subs	r4, #1
 800721c:	e7eb      	b.n	80071f6 <quorem+0xe4>
 800721e:	2000      	movs	r0, #0
 8007220:	e7ee      	b.n	8007200 <quorem+0xee>
 8007222:	0000      	movs	r0, r0
 8007224:	0000      	movs	r0, r0
	...

08007228 <_dtoa_r>:
 8007228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800722c:	ed2d 8b04 	vpush	{d8-d9}
 8007230:	69c5      	ldr	r5, [r0, #28]
 8007232:	b093      	sub	sp, #76	; 0x4c
 8007234:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007238:	ec57 6b10 	vmov	r6, r7, d0
 800723c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007240:	9107      	str	r1, [sp, #28]
 8007242:	4604      	mov	r4, r0
 8007244:	920a      	str	r2, [sp, #40]	; 0x28
 8007246:	930d      	str	r3, [sp, #52]	; 0x34
 8007248:	b975      	cbnz	r5, 8007268 <_dtoa_r+0x40>
 800724a:	2010      	movs	r0, #16
 800724c:	f000 fe2a 	bl	8007ea4 <malloc>
 8007250:	4602      	mov	r2, r0
 8007252:	61e0      	str	r0, [r4, #28]
 8007254:	b920      	cbnz	r0, 8007260 <_dtoa_r+0x38>
 8007256:	4bae      	ldr	r3, [pc, #696]	; (8007510 <_dtoa_r+0x2e8>)
 8007258:	21ef      	movs	r1, #239	; 0xef
 800725a:	48ae      	ldr	r0, [pc, #696]	; (8007514 <_dtoa_r+0x2ec>)
 800725c:	f001 fc82 	bl	8008b64 <__assert_func>
 8007260:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007264:	6005      	str	r5, [r0, #0]
 8007266:	60c5      	str	r5, [r0, #12]
 8007268:	69e3      	ldr	r3, [r4, #28]
 800726a:	6819      	ldr	r1, [r3, #0]
 800726c:	b151      	cbz	r1, 8007284 <_dtoa_r+0x5c>
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	604a      	str	r2, [r1, #4]
 8007272:	2301      	movs	r3, #1
 8007274:	4093      	lsls	r3, r2
 8007276:	608b      	str	r3, [r1, #8]
 8007278:	4620      	mov	r0, r4
 800727a:	f000 ff07 	bl	800808c <_Bfree>
 800727e:	69e3      	ldr	r3, [r4, #28]
 8007280:	2200      	movs	r2, #0
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	1e3b      	subs	r3, r7, #0
 8007286:	bfbb      	ittet	lt
 8007288:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800728c:	9303      	strlt	r3, [sp, #12]
 800728e:	2300      	movge	r3, #0
 8007290:	2201      	movlt	r2, #1
 8007292:	bfac      	ite	ge
 8007294:	f8c8 3000 	strge.w	r3, [r8]
 8007298:	f8c8 2000 	strlt.w	r2, [r8]
 800729c:	4b9e      	ldr	r3, [pc, #632]	; (8007518 <_dtoa_r+0x2f0>)
 800729e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80072a2:	ea33 0308 	bics.w	r3, r3, r8
 80072a6:	d11b      	bne.n	80072e0 <_dtoa_r+0xb8>
 80072a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80072aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80072ae:	6013      	str	r3, [r2, #0]
 80072b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80072b4:	4333      	orrs	r3, r6
 80072b6:	f000 8593 	beq.w	8007de0 <_dtoa_r+0xbb8>
 80072ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072bc:	b963      	cbnz	r3, 80072d8 <_dtoa_r+0xb0>
 80072be:	4b97      	ldr	r3, [pc, #604]	; (800751c <_dtoa_r+0x2f4>)
 80072c0:	e027      	b.n	8007312 <_dtoa_r+0xea>
 80072c2:	4b97      	ldr	r3, [pc, #604]	; (8007520 <_dtoa_r+0x2f8>)
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	3308      	adds	r3, #8
 80072c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80072ca:	6013      	str	r3, [r2, #0]
 80072cc:	9800      	ldr	r0, [sp, #0]
 80072ce:	b013      	add	sp, #76	; 0x4c
 80072d0:	ecbd 8b04 	vpop	{d8-d9}
 80072d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d8:	4b90      	ldr	r3, [pc, #576]	; (800751c <_dtoa_r+0x2f4>)
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	3303      	adds	r3, #3
 80072de:	e7f3      	b.n	80072c8 <_dtoa_r+0xa0>
 80072e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072e4:	2200      	movs	r2, #0
 80072e6:	ec51 0b17 	vmov	r0, r1, d7
 80072ea:	eeb0 8a47 	vmov.f32	s16, s14
 80072ee:	eef0 8a67 	vmov.f32	s17, s15
 80072f2:	2300      	movs	r3, #0
 80072f4:	f7f9 fbf0 	bl	8000ad8 <__aeabi_dcmpeq>
 80072f8:	4681      	mov	r9, r0
 80072fa:	b160      	cbz	r0, 8007316 <_dtoa_r+0xee>
 80072fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80072fe:	2301      	movs	r3, #1
 8007300:	6013      	str	r3, [r2, #0]
 8007302:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 8568 	beq.w	8007dda <_dtoa_r+0xbb2>
 800730a:	4b86      	ldr	r3, [pc, #536]	; (8007524 <_dtoa_r+0x2fc>)
 800730c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800730e:	6013      	str	r3, [r2, #0]
 8007310:	3b01      	subs	r3, #1
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	e7da      	b.n	80072cc <_dtoa_r+0xa4>
 8007316:	aa10      	add	r2, sp, #64	; 0x40
 8007318:	a911      	add	r1, sp, #68	; 0x44
 800731a:	4620      	mov	r0, r4
 800731c:	eeb0 0a48 	vmov.f32	s0, s16
 8007320:	eef0 0a68 	vmov.f32	s1, s17
 8007324:	f001 f994 	bl	8008650 <__d2b>
 8007328:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800732c:	4682      	mov	sl, r0
 800732e:	2d00      	cmp	r5, #0
 8007330:	d07f      	beq.n	8007432 <_dtoa_r+0x20a>
 8007332:	ee18 3a90 	vmov	r3, s17
 8007336:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800733a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800733e:	ec51 0b18 	vmov	r0, r1, d8
 8007342:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007346:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800734a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800734e:	4619      	mov	r1, r3
 8007350:	2200      	movs	r2, #0
 8007352:	4b75      	ldr	r3, [pc, #468]	; (8007528 <_dtoa_r+0x300>)
 8007354:	f7f8 ffa0 	bl	8000298 <__aeabi_dsub>
 8007358:	a367      	add	r3, pc, #412	; (adr r3, 80074f8 <_dtoa_r+0x2d0>)
 800735a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735e:	f7f9 f953 	bl	8000608 <__aeabi_dmul>
 8007362:	a367      	add	r3, pc, #412	; (adr r3, 8007500 <_dtoa_r+0x2d8>)
 8007364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007368:	f7f8 ff98 	bl	800029c <__adddf3>
 800736c:	4606      	mov	r6, r0
 800736e:	4628      	mov	r0, r5
 8007370:	460f      	mov	r7, r1
 8007372:	f7f9 f8df 	bl	8000534 <__aeabi_i2d>
 8007376:	a364      	add	r3, pc, #400	; (adr r3, 8007508 <_dtoa_r+0x2e0>)
 8007378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737c:	f7f9 f944 	bl	8000608 <__aeabi_dmul>
 8007380:	4602      	mov	r2, r0
 8007382:	460b      	mov	r3, r1
 8007384:	4630      	mov	r0, r6
 8007386:	4639      	mov	r1, r7
 8007388:	f7f8 ff88 	bl	800029c <__adddf3>
 800738c:	4606      	mov	r6, r0
 800738e:	460f      	mov	r7, r1
 8007390:	f7f9 fbea 	bl	8000b68 <__aeabi_d2iz>
 8007394:	2200      	movs	r2, #0
 8007396:	4683      	mov	fp, r0
 8007398:	2300      	movs	r3, #0
 800739a:	4630      	mov	r0, r6
 800739c:	4639      	mov	r1, r7
 800739e:	f7f9 fba5 	bl	8000aec <__aeabi_dcmplt>
 80073a2:	b148      	cbz	r0, 80073b8 <_dtoa_r+0x190>
 80073a4:	4658      	mov	r0, fp
 80073a6:	f7f9 f8c5 	bl	8000534 <__aeabi_i2d>
 80073aa:	4632      	mov	r2, r6
 80073ac:	463b      	mov	r3, r7
 80073ae:	f7f9 fb93 	bl	8000ad8 <__aeabi_dcmpeq>
 80073b2:	b908      	cbnz	r0, 80073b8 <_dtoa_r+0x190>
 80073b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80073b8:	f1bb 0f16 	cmp.w	fp, #22
 80073bc:	d857      	bhi.n	800746e <_dtoa_r+0x246>
 80073be:	4b5b      	ldr	r3, [pc, #364]	; (800752c <_dtoa_r+0x304>)
 80073c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80073c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c8:	ec51 0b18 	vmov	r0, r1, d8
 80073cc:	f7f9 fb8e 	bl	8000aec <__aeabi_dcmplt>
 80073d0:	2800      	cmp	r0, #0
 80073d2:	d04e      	beq.n	8007472 <_dtoa_r+0x24a>
 80073d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80073d8:	2300      	movs	r3, #0
 80073da:	930c      	str	r3, [sp, #48]	; 0x30
 80073dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073de:	1b5b      	subs	r3, r3, r5
 80073e0:	1e5a      	subs	r2, r3, #1
 80073e2:	bf45      	ittet	mi
 80073e4:	f1c3 0301 	rsbmi	r3, r3, #1
 80073e8:	9305      	strmi	r3, [sp, #20]
 80073ea:	2300      	movpl	r3, #0
 80073ec:	2300      	movmi	r3, #0
 80073ee:	9206      	str	r2, [sp, #24]
 80073f0:	bf54      	ite	pl
 80073f2:	9305      	strpl	r3, [sp, #20]
 80073f4:	9306      	strmi	r3, [sp, #24]
 80073f6:	f1bb 0f00 	cmp.w	fp, #0
 80073fa:	db3c      	blt.n	8007476 <_dtoa_r+0x24e>
 80073fc:	9b06      	ldr	r3, [sp, #24]
 80073fe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007402:	445b      	add	r3, fp
 8007404:	9306      	str	r3, [sp, #24]
 8007406:	2300      	movs	r3, #0
 8007408:	9308      	str	r3, [sp, #32]
 800740a:	9b07      	ldr	r3, [sp, #28]
 800740c:	2b09      	cmp	r3, #9
 800740e:	d868      	bhi.n	80074e2 <_dtoa_r+0x2ba>
 8007410:	2b05      	cmp	r3, #5
 8007412:	bfc4      	itt	gt
 8007414:	3b04      	subgt	r3, #4
 8007416:	9307      	strgt	r3, [sp, #28]
 8007418:	9b07      	ldr	r3, [sp, #28]
 800741a:	f1a3 0302 	sub.w	r3, r3, #2
 800741e:	bfcc      	ite	gt
 8007420:	2500      	movgt	r5, #0
 8007422:	2501      	movle	r5, #1
 8007424:	2b03      	cmp	r3, #3
 8007426:	f200 8085 	bhi.w	8007534 <_dtoa_r+0x30c>
 800742a:	e8df f003 	tbb	[pc, r3]
 800742e:	3b2e      	.short	0x3b2e
 8007430:	5839      	.short	0x5839
 8007432:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007436:	441d      	add	r5, r3
 8007438:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800743c:	2b20      	cmp	r3, #32
 800743e:	bfc1      	itttt	gt
 8007440:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007444:	fa08 f803 	lslgt.w	r8, r8, r3
 8007448:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800744c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007450:	bfd6      	itet	le
 8007452:	f1c3 0320 	rsble	r3, r3, #32
 8007456:	ea48 0003 	orrgt.w	r0, r8, r3
 800745a:	fa06 f003 	lslle.w	r0, r6, r3
 800745e:	f7f9 f859 	bl	8000514 <__aeabi_ui2d>
 8007462:	2201      	movs	r2, #1
 8007464:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007468:	3d01      	subs	r5, #1
 800746a:	920e      	str	r2, [sp, #56]	; 0x38
 800746c:	e76f      	b.n	800734e <_dtoa_r+0x126>
 800746e:	2301      	movs	r3, #1
 8007470:	e7b3      	b.n	80073da <_dtoa_r+0x1b2>
 8007472:	900c      	str	r0, [sp, #48]	; 0x30
 8007474:	e7b2      	b.n	80073dc <_dtoa_r+0x1b4>
 8007476:	9b05      	ldr	r3, [sp, #20]
 8007478:	eba3 030b 	sub.w	r3, r3, fp
 800747c:	9305      	str	r3, [sp, #20]
 800747e:	f1cb 0300 	rsb	r3, fp, #0
 8007482:	9308      	str	r3, [sp, #32]
 8007484:	2300      	movs	r3, #0
 8007486:	930b      	str	r3, [sp, #44]	; 0x2c
 8007488:	e7bf      	b.n	800740a <_dtoa_r+0x1e2>
 800748a:	2300      	movs	r3, #0
 800748c:	9309      	str	r3, [sp, #36]	; 0x24
 800748e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007490:	2b00      	cmp	r3, #0
 8007492:	dc52      	bgt.n	800753a <_dtoa_r+0x312>
 8007494:	2301      	movs	r3, #1
 8007496:	9301      	str	r3, [sp, #4]
 8007498:	9304      	str	r3, [sp, #16]
 800749a:	461a      	mov	r2, r3
 800749c:	920a      	str	r2, [sp, #40]	; 0x28
 800749e:	e00b      	b.n	80074b8 <_dtoa_r+0x290>
 80074a0:	2301      	movs	r3, #1
 80074a2:	e7f3      	b.n	800748c <_dtoa_r+0x264>
 80074a4:	2300      	movs	r3, #0
 80074a6:	9309      	str	r3, [sp, #36]	; 0x24
 80074a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074aa:	445b      	add	r3, fp
 80074ac:	9301      	str	r3, [sp, #4]
 80074ae:	3301      	adds	r3, #1
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	9304      	str	r3, [sp, #16]
 80074b4:	bfb8      	it	lt
 80074b6:	2301      	movlt	r3, #1
 80074b8:	69e0      	ldr	r0, [r4, #28]
 80074ba:	2100      	movs	r1, #0
 80074bc:	2204      	movs	r2, #4
 80074be:	f102 0614 	add.w	r6, r2, #20
 80074c2:	429e      	cmp	r6, r3
 80074c4:	d93d      	bls.n	8007542 <_dtoa_r+0x31a>
 80074c6:	6041      	str	r1, [r0, #4]
 80074c8:	4620      	mov	r0, r4
 80074ca:	f000 fd9f 	bl	800800c <_Balloc>
 80074ce:	9000      	str	r0, [sp, #0]
 80074d0:	2800      	cmp	r0, #0
 80074d2:	d139      	bne.n	8007548 <_dtoa_r+0x320>
 80074d4:	4b16      	ldr	r3, [pc, #88]	; (8007530 <_dtoa_r+0x308>)
 80074d6:	4602      	mov	r2, r0
 80074d8:	f240 11af 	movw	r1, #431	; 0x1af
 80074dc:	e6bd      	b.n	800725a <_dtoa_r+0x32>
 80074de:	2301      	movs	r3, #1
 80074e0:	e7e1      	b.n	80074a6 <_dtoa_r+0x27e>
 80074e2:	2501      	movs	r5, #1
 80074e4:	2300      	movs	r3, #0
 80074e6:	9307      	str	r3, [sp, #28]
 80074e8:	9509      	str	r5, [sp, #36]	; 0x24
 80074ea:	f04f 33ff 	mov.w	r3, #4294967295
 80074ee:	9301      	str	r3, [sp, #4]
 80074f0:	9304      	str	r3, [sp, #16]
 80074f2:	2200      	movs	r2, #0
 80074f4:	2312      	movs	r3, #18
 80074f6:	e7d1      	b.n	800749c <_dtoa_r+0x274>
 80074f8:	636f4361 	.word	0x636f4361
 80074fc:	3fd287a7 	.word	0x3fd287a7
 8007500:	8b60c8b3 	.word	0x8b60c8b3
 8007504:	3fc68a28 	.word	0x3fc68a28
 8007508:	509f79fb 	.word	0x509f79fb
 800750c:	3fd34413 	.word	0x3fd34413
 8007510:	0800ac8d 	.word	0x0800ac8d
 8007514:	0800aca4 	.word	0x0800aca4
 8007518:	7ff00000 	.word	0x7ff00000
 800751c:	0800ac89 	.word	0x0800ac89
 8007520:	0800ac80 	.word	0x0800ac80
 8007524:	0800ac5d 	.word	0x0800ac5d
 8007528:	3ff80000 	.word	0x3ff80000
 800752c:	0800ad90 	.word	0x0800ad90
 8007530:	0800acfc 	.word	0x0800acfc
 8007534:	2301      	movs	r3, #1
 8007536:	9309      	str	r3, [sp, #36]	; 0x24
 8007538:	e7d7      	b.n	80074ea <_dtoa_r+0x2c2>
 800753a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800753c:	9301      	str	r3, [sp, #4]
 800753e:	9304      	str	r3, [sp, #16]
 8007540:	e7ba      	b.n	80074b8 <_dtoa_r+0x290>
 8007542:	3101      	adds	r1, #1
 8007544:	0052      	lsls	r2, r2, #1
 8007546:	e7ba      	b.n	80074be <_dtoa_r+0x296>
 8007548:	69e3      	ldr	r3, [r4, #28]
 800754a:	9a00      	ldr	r2, [sp, #0]
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	9b04      	ldr	r3, [sp, #16]
 8007550:	2b0e      	cmp	r3, #14
 8007552:	f200 80a8 	bhi.w	80076a6 <_dtoa_r+0x47e>
 8007556:	2d00      	cmp	r5, #0
 8007558:	f000 80a5 	beq.w	80076a6 <_dtoa_r+0x47e>
 800755c:	f1bb 0f00 	cmp.w	fp, #0
 8007560:	dd38      	ble.n	80075d4 <_dtoa_r+0x3ac>
 8007562:	4bc0      	ldr	r3, [pc, #768]	; (8007864 <_dtoa_r+0x63c>)
 8007564:	f00b 020f 	and.w	r2, fp, #15
 8007568:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800756c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007570:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007574:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007578:	d019      	beq.n	80075ae <_dtoa_r+0x386>
 800757a:	4bbb      	ldr	r3, [pc, #748]	; (8007868 <_dtoa_r+0x640>)
 800757c:	ec51 0b18 	vmov	r0, r1, d8
 8007580:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007584:	f7f9 f96a 	bl	800085c <__aeabi_ddiv>
 8007588:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800758c:	f008 080f 	and.w	r8, r8, #15
 8007590:	2503      	movs	r5, #3
 8007592:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007868 <_dtoa_r+0x640>
 8007596:	f1b8 0f00 	cmp.w	r8, #0
 800759a:	d10a      	bne.n	80075b2 <_dtoa_r+0x38a>
 800759c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075a0:	4632      	mov	r2, r6
 80075a2:	463b      	mov	r3, r7
 80075a4:	f7f9 f95a 	bl	800085c <__aeabi_ddiv>
 80075a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075ac:	e02b      	b.n	8007606 <_dtoa_r+0x3de>
 80075ae:	2502      	movs	r5, #2
 80075b0:	e7ef      	b.n	8007592 <_dtoa_r+0x36a>
 80075b2:	f018 0f01 	tst.w	r8, #1
 80075b6:	d008      	beq.n	80075ca <_dtoa_r+0x3a2>
 80075b8:	4630      	mov	r0, r6
 80075ba:	4639      	mov	r1, r7
 80075bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80075c0:	f7f9 f822 	bl	8000608 <__aeabi_dmul>
 80075c4:	3501      	adds	r5, #1
 80075c6:	4606      	mov	r6, r0
 80075c8:	460f      	mov	r7, r1
 80075ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80075ce:	f109 0908 	add.w	r9, r9, #8
 80075d2:	e7e0      	b.n	8007596 <_dtoa_r+0x36e>
 80075d4:	f000 809f 	beq.w	8007716 <_dtoa_r+0x4ee>
 80075d8:	f1cb 0600 	rsb	r6, fp, #0
 80075dc:	4ba1      	ldr	r3, [pc, #644]	; (8007864 <_dtoa_r+0x63c>)
 80075de:	4fa2      	ldr	r7, [pc, #648]	; (8007868 <_dtoa_r+0x640>)
 80075e0:	f006 020f 	and.w	r2, r6, #15
 80075e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ec:	ec51 0b18 	vmov	r0, r1, d8
 80075f0:	f7f9 f80a 	bl	8000608 <__aeabi_dmul>
 80075f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075f8:	1136      	asrs	r6, r6, #4
 80075fa:	2300      	movs	r3, #0
 80075fc:	2502      	movs	r5, #2
 80075fe:	2e00      	cmp	r6, #0
 8007600:	d17e      	bne.n	8007700 <_dtoa_r+0x4d8>
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1d0      	bne.n	80075a8 <_dtoa_r+0x380>
 8007606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007608:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 8084 	beq.w	800771a <_dtoa_r+0x4f2>
 8007612:	4b96      	ldr	r3, [pc, #600]	; (800786c <_dtoa_r+0x644>)
 8007614:	2200      	movs	r2, #0
 8007616:	4640      	mov	r0, r8
 8007618:	4649      	mov	r1, r9
 800761a:	f7f9 fa67 	bl	8000aec <__aeabi_dcmplt>
 800761e:	2800      	cmp	r0, #0
 8007620:	d07b      	beq.n	800771a <_dtoa_r+0x4f2>
 8007622:	9b04      	ldr	r3, [sp, #16]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d078      	beq.n	800771a <_dtoa_r+0x4f2>
 8007628:	9b01      	ldr	r3, [sp, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	dd39      	ble.n	80076a2 <_dtoa_r+0x47a>
 800762e:	4b90      	ldr	r3, [pc, #576]	; (8007870 <_dtoa_r+0x648>)
 8007630:	2200      	movs	r2, #0
 8007632:	4640      	mov	r0, r8
 8007634:	4649      	mov	r1, r9
 8007636:	f7f8 ffe7 	bl	8000608 <__aeabi_dmul>
 800763a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800763e:	9e01      	ldr	r6, [sp, #4]
 8007640:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007644:	3501      	adds	r5, #1
 8007646:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800764a:	4628      	mov	r0, r5
 800764c:	f7f8 ff72 	bl	8000534 <__aeabi_i2d>
 8007650:	4642      	mov	r2, r8
 8007652:	464b      	mov	r3, r9
 8007654:	f7f8 ffd8 	bl	8000608 <__aeabi_dmul>
 8007658:	4b86      	ldr	r3, [pc, #536]	; (8007874 <_dtoa_r+0x64c>)
 800765a:	2200      	movs	r2, #0
 800765c:	f7f8 fe1e 	bl	800029c <__adddf3>
 8007660:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007664:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007668:	9303      	str	r3, [sp, #12]
 800766a:	2e00      	cmp	r6, #0
 800766c:	d158      	bne.n	8007720 <_dtoa_r+0x4f8>
 800766e:	4b82      	ldr	r3, [pc, #520]	; (8007878 <_dtoa_r+0x650>)
 8007670:	2200      	movs	r2, #0
 8007672:	4640      	mov	r0, r8
 8007674:	4649      	mov	r1, r9
 8007676:	f7f8 fe0f 	bl	8000298 <__aeabi_dsub>
 800767a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800767e:	4680      	mov	r8, r0
 8007680:	4689      	mov	r9, r1
 8007682:	f7f9 fa51 	bl	8000b28 <__aeabi_dcmpgt>
 8007686:	2800      	cmp	r0, #0
 8007688:	f040 8296 	bne.w	8007bb8 <_dtoa_r+0x990>
 800768c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007690:	4640      	mov	r0, r8
 8007692:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007696:	4649      	mov	r1, r9
 8007698:	f7f9 fa28 	bl	8000aec <__aeabi_dcmplt>
 800769c:	2800      	cmp	r0, #0
 800769e:	f040 8289 	bne.w	8007bb4 <_dtoa_r+0x98c>
 80076a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80076a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f2c0 814e 	blt.w	800794a <_dtoa_r+0x722>
 80076ae:	f1bb 0f0e 	cmp.w	fp, #14
 80076b2:	f300 814a 	bgt.w	800794a <_dtoa_r+0x722>
 80076b6:	4b6b      	ldr	r3, [pc, #428]	; (8007864 <_dtoa_r+0x63c>)
 80076b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80076bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80076c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f280 80dc 	bge.w	8007880 <_dtoa_r+0x658>
 80076c8:	9b04      	ldr	r3, [sp, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f300 80d8 	bgt.w	8007880 <_dtoa_r+0x658>
 80076d0:	f040 826f 	bne.w	8007bb2 <_dtoa_r+0x98a>
 80076d4:	4b68      	ldr	r3, [pc, #416]	; (8007878 <_dtoa_r+0x650>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	4640      	mov	r0, r8
 80076da:	4649      	mov	r1, r9
 80076dc:	f7f8 ff94 	bl	8000608 <__aeabi_dmul>
 80076e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076e4:	f7f9 fa16 	bl	8000b14 <__aeabi_dcmpge>
 80076e8:	9e04      	ldr	r6, [sp, #16]
 80076ea:	4637      	mov	r7, r6
 80076ec:	2800      	cmp	r0, #0
 80076ee:	f040 8245 	bne.w	8007b7c <_dtoa_r+0x954>
 80076f2:	9d00      	ldr	r5, [sp, #0]
 80076f4:	2331      	movs	r3, #49	; 0x31
 80076f6:	f805 3b01 	strb.w	r3, [r5], #1
 80076fa:	f10b 0b01 	add.w	fp, fp, #1
 80076fe:	e241      	b.n	8007b84 <_dtoa_r+0x95c>
 8007700:	07f2      	lsls	r2, r6, #31
 8007702:	d505      	bpl.n	8007710 <_dtoa_r+0x4e8>
 8007704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007708:	f7f8 ff7e 	bl	8000608 <__aeabi_dmul>
 800770c:	3501      	adds	r5, #1
 800770e:	2301      	movs	r3, #1
 8007710:	1076      	asrs	r6, r6, #1
 8007712:	3708      	adds	r7, #8
 8007714:	e773      	b.n	80075fe <_dtoa_r+0x3d6>
 8007716:	2502      	movs	r5, #2
 8007718:	e775      	b.n	8007606 <_dtoa_r+0x3de>
 800771a:	9e04      	ldr	r6, [sp, #16]
 800771c:	465f      	mov	r7, fp
 800771e:	e792      	b.n	8007646 <_dtoa_r+0x41e>
 8007720:	9900      	ldr	r1, [sp, #0]
 8007722:	4b50      	ldr	r3, [pc, #320]	; (8007864 <_dtoa_r+0x63c>)
 8007724:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007728:	4431      	add	r1, r6
 800772a:	9102      	str	r1, [sp, #8]
 800772c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800772e:	eeb0 9a47 	vmov.f32	s18, s14
 8007732:	eef0 9a67 	vmov.f32	s19, s15
 8007736:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800773a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800773e:	2900      	cmp	r1, #0
 8007740:	d044      	beq.n	80077cc <_dtoa_r+0x5a4>
 8007742:	494e      	ldr	r1, [pc, #312]	; (800787c <_dtoa_r+0x654>)
 8007744:	2000      	movs	r0, #0
 8007746:	f7f9 f889 	bl	800085c <__aeabi_ddiv>
 800774a:	ec53 2b19 	vmov	r2, r3, d9
 800774e:	f7f8 fda3 	bl	8000298 <__aeabi_dsub>
 8007752:	9d00      	ldr	r5, [sp, #0]
 8007754:	ec41 0b19 	vmov	d9, r0, r1
 8007758:	4649      	mov	r1, r9
 800775a:	4640      	mov	r0, r8
 800775c:	f7f9 fa04 	bl	8000b68 <__aeabi_d2iz>
 8007760:	4606      	mov	r6, r0
 8007762:	f7f8 fee7 	bl	8000534 <__aeabi_i2d>
 8007766:	4602      	mov	r2, r0
 8007768:	460b      	mov	r3, r1
 800776a:	4640      	mov	r0, r8
 800776c:	4649      	mov	r1, r9
 800776e:	f7f8 fd93 	bl	8000298 <__aeabi_dsub>
 8007772:	3630      	adds	r6, #48	; 0x30
 8007774:	f805 6b01 	strb.w	r6, [r5], #1
 8007778:	ec53 2b19 	vmov	r2, r3, d9
 800777c:	4680      	mov	r8, r0
 800777e:	4689      	mov	r9, r1
 8007780:	f7f9 f9b4 	bl	8000aec <__aeabi_dcmplt>
 8007784:	2800      	cmp	r0, #0
 8007786:	d164      	bne.n	8007852 <_dtoa_r+0x62a>
 8007788:	4642      	mov	r2, r8
 800778a:	464b      	mov	r3, r9
 800778c:	4937      	ldr	r1, [pc, #220]	; (800786c <_dtoa_r+0x644>)
 800778e:	2000      	movs	r0, #0
 8007790:	f7f8 fd82 	bl	8000298 <__aeabi_dsub>
 8007794:	ec53 2b19 	vmov	r2, r3, d9
 8007798:	f7f9 f9a8 	bl	8000aec <__aeabi_dcmplt>
 800779c:	2800      	cmp	r0, #0
 800779e:	f040 80b6 	bne.w	800790e <_dtoa_r+0x6e6>
 80077a2:	9b02      	ldr	r3, [sp, #8]
 80077a4:	429d      	cmp	r5, r3
 80077a6:	f43f af7c 	beq.w	80076a2 <_dtoa_r+0x47a>
 80077aa:	4b31      	ldr	r3, [pc, #196]	; (8007870 <_dtoa_r+0x648>)
 80077ac:	ec51 0b19 	vmov	r0, r1, d9
 80077b0:	2200      	movs	r2, #0
 80077b2:	f7f8 ff29 	bl	8000608 <__aeabi_dmul>
 80077b6:	4b2e      	ldr	r3, [pc, #184]	; (8007870 <_dtoa_r+0x648>)
 80077b8:	ec41 0b19 	vmov	d9, r0, r1
 80077bc:	2200      	movs	r2, #0
 80077be:	4640      	mov	r0, r8
 80077c0:	4649      	mov	r1, r9
 80077c2:	f7f8 ff21 	bl	8000608 <__aeabi_dmul>
 80077c6:	4680      	mov	r8, r0
 80077c8:	4689      	mov	r9, r1
 80077ca:	e7c5      	b.n	8007758 <_dtoa_r+0x530>
 80077cc:	ec51 0b17 	vmov	r0, r1, d7
 80077d0:	f7f8 ff1a 	bl	8000608 <__aeabi_dmul>
 80077d4:	9b02      	ldr	r3, [sp, #8]
 80077d6:	9d00      	ldr	r5, [sp, #0]
 80077d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80077da:	ec41 0b19 	vmov	d9, r0, r1
 80077de:	4649      	mov	r1, r9
 80077e0:	4640      	mov	r0, r8
 80077e2:	f7f9 f9c1 	bl	8000b68 <__aeabi_d2iz>
 80077e6:	4606      	mov	r6, r0
 80077e8:	f7f8 fea4 	bl	8000534 <__aeabi_i2d>
 80077ec:	3630      	adds	r6, #48	; 0x30
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	4640      	mov	r0, r8
 80077f4:	4649      	mov	r1, r9
 80077f6:	f7f8 fd4f 	bl	8000298 <__aeabi_dsub>
 80077fa:	f805 6b01 	strb.w	r6, [r5], #1
 80077fe:	9b02      	ldr	r3, [sp, #8]
 8007800:	429d      	cmp	r5, r3
 8007802:	4680      	mov	r8, r0
 8007804:	4689      	mov	r9, r1
 8007806:	f04f 0200 	mov.w	r2, #0
 800780a:	d124      	bne.n	8007856 <_dtoa_r+0x62e>
 800780c:	4b1b      	ldr	r3, [pc, #108]	; (800787c <_dtoa_r+0x654>)
 800780e:	ec51 0b19 	vmov	r0, r1, d9
 8007812:	f7f8 fd43 	bl	800029c <__adddf3>
 8007816:	4602      	mov	r2, r0
 8007818:	460b      	mov	r3, r1
 800781a:	4640      	mov	r0, r8
 800781c:	4649      	mov	r1, r9
 800781e:	f7f9 f983 	bl	8000b28 <__aeabi_dcmpgt>
 8007822:	2800      	cmp	r0, #0
 8007824:	d173      	bne.n	800790e <_dtoa_r+0x6e6>
 8007826:	ec53 2b19 	vmov	r2, r3, d9
 800782a:	4914      	ldr	r1, [pc, #80]	; (800787c <_dtoa_r+0x654>)
 800782c:	2000      	movs	r0, #0
 800782e:	f7f8 fd33 	bl	8000298 <__aeabi_dsub>
 8007832:	4602      	mov	r2, r0
 8007834:	460b      	mov	r3, r1
 8007836:	4640      	mov	r0, r8
 8007838:	4649      	mov	r1, r9
 800783a:	f7f9 f957 	bl	8000aec <__aeabi_dcmplt>
 800783e:	2800      	cmp	r0, #0
 8007840:	f43f af2f 	beq.w	80076a2 <_dtoa_r+0x47a>
 8007844:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007846:	1e6b      	subs	r3, r5, #1
 8007848:	930f      	str	r3, [sp, #60]	; 0x3c
 800784a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800784e:	2b30      	cmp	r3, #48	; 0x30
 8007850:	d0f8      	beq.n	8007844 <_dtoa_r+0x61c>
 8007852:	46bb      	mov	fp, r7
 8007854:	e04a      	b.n	80078ec <_dtoa_r+0x6c4>
 8007856:	4b06      	ldr	r3, [pc, #24]	; (8007870 <_dtoa_r+0x648>)
 8007858:	f7f8 fed6 	bl	8000608 <__aeabi_dmul>
 800785c:	4680      	mov	r8, r0
 800785e:	4689      	mov	r9, r1
 8007860:	e7bd      	b.n	80077de <_dtoa_r+0x5b6>
 8007862:	bf00      	nop
 8007864:	0800ad90 	.word	0x0800ad90
 8007868:	0800ad68 	.word	0x0800ad68
 800786c:	3ff00000 	.word	0x3ff00000
 8007870:	40240000 	.word	0x40240000
 8007874:	401c0000 	.word	0x401c0000
 8007878:	40140000 	.word	0x40140000
 800787c:	3fe00000 	.word	0x3fe00000
 8007880:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007884:	9d00      	ldr	r5, [sp, #0]
 8007886:	4642      	mov	r2, r8
 8007888:	464b      	mov	r3, r9
 800788a:	4630      	mov	r0, r6
 800788c:	4639      	mov	r1, r7
 800788e:	f7f8 ffe5 	bl	800085c <__aeabi_ddiv>
 8007892:	f7f9 f969 	bl	8000b68 <__aeabi_d2iz>
 8007896:	9001      	str	r0, [sp, #4]
 8007898:	f7f8 fe4c 	bl	8000534 <__aeabi_i2d>
 800789c:	4642      	mov	r2, r8
 800789e:	464b      	mov	r3, r9
 80078a0:	f7f8 feb2 	bl	8000608 <__aeabi_dmul>
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	4630      	mov	r0, r6
 80078aa:	4639      	mov	r1, r7
 80078ac:	f7f8 fcf4 	bl	8000298 <__aeabi_dsub>
 80078b0:	9e01      	ldr	r6, [sp, #4]
 80078b2:	9f04      	ldr	r7, [sp, #16]
 80078b4:	3630      	adds	r6, #48	; 0x30
 80078b6:	f805 6b01 	strb.w	r6, [r5], #1
 80078ba:	9e00      	ldr	r6, [sp, #0]
 80078bc:	1bae      	subs	r6, r5, r6
 80078be:	42b7      	cmp	r7, r6
 80078c0:	4602      	mov	r2, r0
 80078c2:	460b      	mov	r3, r1
 80078c4:	d134      	bne.n	8007930 <_dtoa_r+0x708>
 80078c6:	f7f8 fce9 	bl	800029c <__adddf3>
 80078ca:	4642      	mov	r2, r8
 80078cc:	464b      	mov	r3, r9
 80078ce:	4606      	mov	r6, r0
 80078d0:	460f      	mov	r7, r1
 80078d2:	f7f9 f929 	bl	8000b28 <__aeabi_dcmpgt>
 80078d6:	b9c8      	cbnz	r0, 800790c <_dtoa_r+0x6e4>
 80078d8:	4642      	mov	r2, r8
 80078da:	464b      	mov	r3, r9
 80078dc:	4630      	mov	r0, r6
 80078de:	4639      	mov	r1, r7
 80078e0:	f7f9 f8fa 	bl	8000ad8 <__aeabi_dcmpeq>
 80078e4:	b110      	cbz	r0, 80078ec <_dtoa_r+0x6c4>
 80078e6:	9b01      	ldr	r3, [sp, #4]
 80078e8:	07db      	lsls	r3, r3, #31
 80078ea:	d40f      	bmi.n	800790c <_dtoa_r+0x6e4>
 80078ec:	4651      	mov	r1, sl
 80078ee:	4620      	mov	r0, r4
 80078f0:	f000 fbcc 	bl	800808c <_Bfree>
 80078f4:	2300      	movs	r3, #0
 80078f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078f8:	702b      	strb	r3, [r5, #0]
 80078fa:	f10b 0301 	add.w	r3, fp, #1
 80078fe:	6013      	str	r3, [r2, #0]
 8007900:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007902:	2b00      	cmp	r3, #0
 8007904:	f43f ace2 	beq.w	80072cc <_dtoa_r+0xa4>
 8007908:	601d      	str	r5, [r3, #0]
 800790a:	e4df      	b.n	80072cc <_dtoa_r+0xa4>
 800790c:	465f      	mov	r7, fp
 800790e:	462b      	mov	r3, r5
 8007910:	461d      	mov	r5, r3
 8007912:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007916:	2a39      	cmp	r2, #57	; 0x39
 8007918:	d106      	bne.n	8007928 <_dtoa_r+0x700>
 800791a:	9a00      	ldr	r2, [sp, #0]
 800791c:	429a      	cmp	r2, r3
 800791e:	d1f7      	bne.n	8007910 <_dtoa_r+0x6e8>
 8007920:	9900      	ldr	r1, [sp, #0]
 8007922:	2230      	movs	r2, #48	; 0x30
 8007924:	3701      	adds	r7, #1
 8007926:	700a      	strb	r2, [r1, #0]
 8007928:	781a      	ldrb	r2, [r3, #0]
 800792a:	3201      	adds	r2, #1
 800792c:	701a      	strb	r2, [r3, #0]
 800792e:	e790      	b.n	8007852 <_dtoa_r+0x62a>
 8007930:	4ba3      	ldr	r3, [pc, #652]	; (8007bc0 <_dtoa_r+0x998>)
 8007932:	2200      	movs	r2, #0
 8007934:	f7f8 fe68 	bl	8000608 <__aeabi_dmul>
 8007938:	2200      	movs	r2, #0
 800793a:	2300      	movs	r3, #0
 800793c:	4606      	mov	r6, r0
 800793e:	460f      	mov	r7, r1
 8007940:	f7f9 f8ca 	bl	8000ad8 <__aeabi_dcmpeq>
 8007944:	2800      	cmp	r0, #0
 8007946:	d09e      	beq.n	8007886 <_dtoa_r+0x65e>
 8007948:	e7d0      	b.n	80078ec <_dtoa_r+0x6c4>
 800794a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800794c:	2a00      	cmp	r2, #0
 800794e:	f000 80ca 	beq.w	8007ae6 <_dtoa_r+0x8be>
 8007952:	9a07      	ldr	r2, [sp, #28]
 8007954:	2a01      	cmp	r2, #1
 8007956:	f300 80ad 	bgt.w	8007ab4 <_dtoa_r+0x88c>
 800795a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800795c:	2a00      	cmp	r2, #0
 800795e:	f000 80a5 	beq.w	8007aac <_dtoa_r+0x884>
 8007962:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007966:	9e08      	ldr	r6, [sp, #32]
 8007968:	9d05      	ldr	r5, [sp, #20]
 800796a:	9a05      	ldr	r2, [sp, #20]
 800796c:	441a      	add	r2, r3
 800796e:	9205      	str	r2, [sp, #20]
 8007970:	9a06      	ldr	r2, [sp, #24]
 8007972:	2101      	movs	r1, #1
 8007974:	441a      	add	r2, r3
 8007976:	4620      	mov	r0, r4
 8007978:	9206      	str	r2, [sp, #24]
 800797a:	f000 fc3d 	bl	80081f8 <__i2b>
 800797e:	4607      	mov	r7, r0
 8007980:	b165      	cbz	r5, 800799c <_dtoa_r+0x774>
 8007982:	9b06      	ldr	r3, [sp, #24]
 8007984:	2b00      	cmp	r3, #0
 8007986:	dd09      	ble.n	800799c <_dtoa_r+0x774>
 8007988:	42ab      	cmp	r3, r5
 800798a:	9a05      	ldr	r2, [sp, #20]
 800798c:	bfa8      	it	ge
 800798e:	462b      	movge	r3, r5
 8007990:	1ad2      	subs	r2, r2, r3
 8007992:	9205      	str	r2, [sp, #20]
 8007994:	9a06      	ldr	r2, [sp, #24]
 8007996:	1aed      	subs	r5, r5, r3
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	9306      	str	r3, [sp, #24]
 800799c:	9b08      	ldr	r3, [sp, #32]
 800799e:	b1f3      	cbz	r3, 80079de <_dtoa_r+0x7b6>
 80079a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f000 80a3 	beq.w	8007aee <_dtoa_r+0x8c6>
 80079a8:	2e00      	cmp	r6, #0
 80079aa:	dd10      	ble.n	80079ce <_dtoa_r+0x7a6>
 80079ac:	4639      	mov	r1, r7
 80079ae:	4632      	mov	r2, r6
 80079b0:	4620      	mov	r0, r4
 80079b2:	f000 fce1 	bl	8008378 <__pow5mult>
 80079b6:	4652      	mov	r2, sl
 80079b8:	4601      	mov	r1, r0
 80079ba:	4607      	mov	r7, r0
 80079bc:	4620      	mov	r0, r4
 80079be:	f000 fc31 	bl	8008224 <__multiply>
 80079c2:	4651      	mov	r1, sl
 80079c4:	4680      	mov	r8, r0
 80079c6:	4620      	mov	r0, r4
 80079c8:	f000 fb60 	bl	800808c <_Bfree>
 80079cc:	46c2      	mov	sl, r8
 80079ce:	9b08      	ldr	r3, [sp, #32]
 80079d0:	1b9a      	subs	r2, r3, r6
 80079d2:	d004      	beq.n	80079de <_dtoa_r+0x7b6>
 80079d4:	4651      	mov	r1, sl
 80079d6:	4620      	mov	r0, r4
 80079d8:	f000 fcce 	bl	8008378 <__pow5mult>
 80079dc:	4682      	mov	sl, r0
 80079de:	2101      	movs	r1, #1
 80079e0:	4620      	mov	r0, r4
 80079e2:	f000 fc09 	bl	80081f8 <__i2b>
 80079e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	4606      	mov	r6, r0
 80079ec:	f340 8081 	ble.w	8007af2 <_dtoa_r+0x8ca>
 80079f0:	461a      	mov	r2, r3
 80079f2:	4601      	mov	r1, r0
 80079f4:	4620      	mov	r0, r4
 80079f6:	f000 fcbf 	bl	8008378 <__pow5mult>
 80079fa:	9b07      	ldr	r3, [sp, #28]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	4606      	mov	r6, r0
 8007a00:	dd7a      	ble.n	8007af8 <_dtoa_r+0x8d0>
 8007a02:	f04f 0800 	mov.w	r8, #0
 8007a06:	6933      	ldr	r3, [r6, #16]
 8007a08:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007a0c:	6918      	ldr	r0, [r3, #16]
 8007a0e:	f000 fba5 	bl	800815c <__hi0bits>
 8007a12:	f1c0 0020 	rsb	r0, r0, #32
 8007a16:	9b06      	ldr	r3, [sp, #24]
 8007a18:	4418      	add	r0, r3
 8007a1a:	f010 001f 	ands.w	r0, r0, #31
 8007a1e:	f000 8094 	beq.w	8007b4a <_dtoa_r+0x922>
 8007a22:	f1c0 0320 	rsb	r3, r0, #32
 8007a26:	2b04      	cmp	r3, #4
 8007a28:	f340 8085 	ble.w	8007b36 <_dtoa_r+0x90e>
 8007a2c:	9b05      	ldr	r3, [sp, #20]
 8007a2e:	f1c0 001c 	rsb	r0, r0, #28
 8007a32:	4403      	add	r3, r0
 8007a34:	9305      	str	r3, [sp, #20]
 8007a36:	9b06      	ldr	r3, [sp, #24]
 8007a38:	4403      	add	r3, r0
 8007a3a:	4405      	add	r5, r0
 8007a3c:	9306      	str	r3, [sp, #24]
 8007a3e:	9b05      	ldr	r3, [sp, #20]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	dd05      	ble.n	8007a50 <_dtoa_r+0x828>
 8007a44:	4651      	mov	r1, sl
 8007a46:	461a      	mov	r2, r3
 8007a48:	4620      	mov	r0, r4
 8007a4a:	f000 fcef 	bl	800842c <__lshift>
 8007a4e:	4682      	mov	sl, r0
 8007a50:	9b06      	ldr	r3, [sp, #24]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	dd05      	ble.n	8007a62 <_dtoa_r+0x83a>
 8007a56:	4631      	mov	r1, r6
 8007a58:	461a      	mov	r2, r3
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f000 fce6 	bl	800842c <__lshift>
 8007a60:	4606      	mov	r6, r0
 8007a62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d072      	beq.n	8007b4e <_dtoa_r+0x926>
 8007a68:	4631      	mov	r1, r6
 8007a6a:	4650      	mov	r0, sl
 8007a6c:	f000 fd4a 	bl	8008504 <__mcmp>
 8007a70:	2800      	cmp	r0, #0
 8007a72:	da6c      	bge.n	8007b4e <_dtoa_r+0x926>
 8007a74:	2300      	movs	r3, #0
 8007a76:	4651      	mov	r1, sl
 8007a78:	220a      	movs	r2, #10
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f000 fb28 	bl	80080d0 <__multadd>
 8007a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a86:	4682      	mov	sl, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 81b0 	beq.w	8007dee <_dtoa_r+0xbc6>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	4639      	mov	r1, r7
 8007a92:	220a      	movs	r2, #10
 8007a94:	4620      	mov	r0, r4
 8007a96:	f000 fb1b 	bl	80080d0 <__multadd>
 8007a9a:	9b01      	ldr	r3, [sp, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	4607      	mov	r7, r0
 8007aa0:	f300 8096 	bgt.w	8007bd0 <_dtoa_r+0x9a8>
 8007aa4:	9b07      	ldr	r3, [sp, #28]
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	dc59      	bgt.n	8007b5e <_dtoa_r+0x936>
 8007aaa:	e091      	b.n	8007bd0 <_dtoa_r+0x9a8>
 8007aac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007aae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ab2:	e758      	b.n	8007966 <_dtoa_r+0x73e>
 8007ab4:	9b04      	ldr	r3, [sp, #16]
 8007ab6:	1e5e      	subs	r6, r3, #1
 8007ab8:	9b08      	ldr	r3, [sp, #32]
 8007aba:	42b3      	cmp	r3, r6
 8007abc:	bfbf      	itttt	lt
 8007abe:	9b08      	ldrlt	r3, [sp, #32]
 8007ac0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007ac2:	9608      	strlt	r6, [sp, #32]
 8007ac4:	1af3      	sublt	r3, r6, r3
 8007ac6:	bfb4      	ite	lt
 8007ac8:	18d2      	addlt	r2, r2, r3
 8007aca:	1b9e      	subge	r6, r3, r6
 8007acc:	9b04      	ldr	r3, [sp, #16]
 8007ace:	bfbc      	itt	lt
 8007ad0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007ad2:	2600      	movlt	r6, #0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	bfb7      	itett	lt
 8007ad8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007adc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007ae0:	1a9d      	sublt	r5, r3, r2
 8007ae2:	2300      	movlt	r3, #0
 8007ae4:	e741      	b.n	800796a <_dtoa_r+0x742>
 8007ae6:	9e08      	ldr	r6, [sp, #32]
 8007ae8:	9d05      	ldr	r5, [sp, #20]
 8007aea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007aec:	e748      	b.n	8007980 <_dtoa_r+0x758>
 8007aee:	9a08      	ldr	r2, [sp, #32]
 8007af0:	e770      	b.n	80079d4 <_dtoa_r+0x7ac>
 8007af2:	9b07      	ldr	r3, [sp, #28]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	dc19      	bgt.n	8007b2c <_dtoa_r+0x904>
 8007af8:	9b02      	ldr	r3, [sp, #8]
 8007afa:	b9bb      	cbnz	r3, 8007b2c <_dtoa_r+0x904>
 8007afc:	9b03      	ldr	r3, [sp, #12]
 8007afe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b02:	b99b      	cbnz	r3, 8007b2c <_dtoa_r+0x904>
 8007b04:	9b03      	ldr	r3, [sp, #12]
 8007b06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b0a:	0d1b      	lsrs	r3, r3, #20
 8007b0c:	051b      	lsls	r3, r3, #20
 8007b0e:	b183      	cbz	r3, 8007b32 <_dtoa_r+0x90a>
 8007b10:	9b05      	ldr	r3, [sp, #20]
 8007b12:	3301      	adds	r3, #1
 8007b14:	9305      	str	r3, [sp, #20]
 8007b16:	9b06      	ldr	r3, [sp, #24]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	9306      	str	r3, [sp, #24]
 8007b1c:	f04f 0801 	mov.w	r8, #1
 8007b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f47f af6f 	bne.w	8007a06 <_dtoa_r+0x7de>
 8007b28:	2001      	movs	r0, #1
 8007b2a:	e774      	b.n	8007a16 <_dtoa_r+0x7ee>
 8007b2c:	f04f 0800 	mov.w	r8, #0
 8007b30:	e7f6      	b.n	8007b20 <_dtoa_r+0x8f8>
 8007b32:	4698      	mov	r8, r3
 8007b34:	e7f4      	b.n	8007b20 <_dtoa_r+0x8f8>
 8007b36:	d082      	beq.n	8007a3e <_dtoa_r+0x816>
 8007b38:	9a05      	ldr	r2, [sp, #20]
 8007b3a:	331c      	adds	r3, #28
 8007b3c:	441a      	add	r2, r3
 8007b3e:	9205      	str	r2, [sp, #20]
 8007b40:	9a06      	ldr	r2, [sp, #24]
 8007b42:	441a      	add	r2, r3
 8007b44:	441d      	add	r5, r3
 8007b46:	9206      	str	r2, [sp, #24]
 8007b48:	e779      	b.n	8007a3e <_dtoa_r+0x816>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	e7f4      	b.n	8007b38 <_dtoa_r+0x910>
 8007b4e:	9b04      	ldr	r3, [sp, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	dc37      	bgt.n	8007bc4 <_dtoa_r+0x99c>
 8007b54:	9b07      	ldr	r3, [sp, #28]
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	dd34      	ble.n	8007bc4 <_dtoa_r+0x99c>
 8007b5a:	9b04      	ldr	r3, [sp, #16]
 8007b5c:	9301      	str	r3, [sp, #4]
 8007b5e:	9b01      	ldr	r3, [sp, #4]
 8007b60:	b963      	cbnz	r3, 8007b7c <_dtoa_r+0x954>
 8007b62:	4631      	mov	r1, r6
 8007b64:	2205      	movs	r2, #5
 8007b66:	4620      	mov	r0, r4
 8007b68:	f000 fab2 	bl	80080d0 <__multadd>
 8007b6c:	4601      	mov	r1, r0
 8007b6e:	4606      	mov	r6, r0
 8007b70:	4650      	mov	r0, sl
 8007b72:	f000 fcc7 	bl	8008504 <__mcmp>
 8007b76:	2800      	cmp	r0, #0
 8007b78:	f73f adbb 	bgt.w	80076f2 <_dtoa_r+0x4ca>
 8007b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b7e:	9d00      	ldr	r5, [sp, #0]
 8007b80:	ea6f 0b03 	mvn.w	fp, r3
 8007b84:	f04f 0800 	mov.w	r8, #0
 8007b88:	4631      	mov	r1, r6
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f000 fa7e 	bl	800808c <_Bfree>
 8007b90:	2f00      	cmp	r7, #0
 8007b92:	f43f aeab 	beq.w	80078ec <_dtoa_r+0x6c4>
 8007b96:	f1b8 0f00 	cmp.w	r8, #0
 8007b9a:	d005      	beq.n	8007ba8 <_dtoa_r+0x980>
 8007b9c:	45b8      	cmp	r8, r7
 8007b9e:	d003      	beq.n	8007ba8 <_dtoa_r+0x980>
 8007ba0:	4641      	mov	r1, r8
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	f000 fa72 	bl	800808c <_Bfree>
 8007ba8:	4639      	mov	r1, r7
 8007baa:	4620      	mov	r0, r4
 8007bac:	f000 fa6e 	bl	800808c <_Bfree>
 8007bb0:	e69c      	b.n	80078ec <_dtoa_r+0x6c4>
 8007bb2:	2600      	movs	r6, #0
 8007bb4:	4637      	mov	r7, r6
 8007bb6:	e7e1      	b.n	8007b7c <_dtoa_r+0x954>
 8007bb8:	46bb      	mov	fp, r7
 8007bba:	4637      	mov	r7, r6
 8007bbc:	e599      	b.n	80076f2 <_dtoa_r+0x4ca>
 8007bbe:	bf00      	nop
 8007bc0:	40240000 	.word	0x40240000
 8007bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f000 80c8 	beq.w	8007d5c <_dtoa_r+0xb34>
 8007bcc:	9b04      	ldr	r3, [sp, #16]
 8007bce:	9301      	str	r3, [sp, #4]
 8007bd0:	2d00      	cmp	r5, #0
 8007bd2:	dd05      	ble.n	8007be0 <_dtoa_r+0x9b8>
 8007bd4:	4639      	mov	r1, r7
 8007bd6:	462a      	mov	r2, r5
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f000 fc27 	bl	800842c <__lshift>
 8007bde:	4607      	mov	r7, r0
 8007be0:	f1b8 0f00 	cmp.w	r8, #0
 8007be4:	d05b      	beq.n	8007c9e <_dtoa_r+0xa76>
 8007be6:	6879      	ldr	r1, [r7, #4]
 8007be8:	4620      	mov	r0, r4
 8007bea:	f000 fa0f 	bl	800800c <_Balloc>
 8007bee:	4605      	mov	r5, r0
 8007bf0:	b928      	cbnz	r0, 8007bfe <_dtoa_r+0x9d6>
 8007bf2:	4b83      	ldr	r3, [pc, #524]	; (8007e00 <_dtoa_r+0xbd8>)
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007bfa:	f7ff bb2e 	b.w	800725a <_dtoa_r+0x32>
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	3202      	adds	r2, #2
 8007c02:	0092      	lsls	r2, r2, #2
 8007c04:	f107 010c 	add.w	r1, r7, #12
 8007c08:	300c      	adds	r0, #12
 8007c0a:	f7ff fa74 	bl	80070f6 <memcpy>
 8007c0e:	2201      	movs	r2, #1
 8007c10:	4629      	mov	r1, r5
 8007c12:	4620      	mov	r0, r4
 8007c14:	f000 fc0a 	bl	800842c <__lshift>
 8007c18:	9b00      	ldr	r3, [sp, #0]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	9304      	str	r3, [sp, #16]
 8007c1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c22:	4413      	add	r3, r2
 8007c24:	9308      	str	r3, [sp, #32]
 8007c26:	9b02      	ldr	r3, [sp, #8]
 8007c28:	f003 0301 	and.w	r3, r3, #1
 8007c2c:	46b8      	mov	r8, r7
 8007c2e:	9306      	str	r3, [sp, #24]
 8007c30:	4607      	mov	r7, r0
 8007c32:	9b04      	ldr	r3, [sp, #16]
 8007c34:	4631      	mov	r1, r6
 8007c36:	3b01      	subs	r3, #1
 8007c38:	4650      	mov	r0, sl
 8007c3a:	9301      	str	r3, [sp, #4]
 8007c3c:	f7ff fa69 	bl	8007112 <quorem>
 8007c40:	4641      	mov	r1, r8
 8007c42:	9002      	str	r0, [sp, #8]
 8007c44:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007c48:	4650      	mov	r0, sl
 8007c4a:	f000 fc5b 	bl	8008504 <__mcmp>
 8007c4e:	463a      	mov	r2, r7
 8007c50:	9005      	str	r0, [sp, #20]
 8007c52:	4631      	mov	r1, r6
 8007c54:	4620      	mov	r0, r4
 8007c56:	f000 fc71 	bl	800853c <__mdiff>
 8007c5a:	68c2      	ldr	r2, [r0, #12]
 8007c5c:	4605      	mov	r5, r0
 8007c5e:	bb02      	cbnz	r2, 8007ca2 <_dtoa_r+0xa7a>
 8007c60:	4601      	mov	r1, r0
 8007c62:	4650      	mov	r0, sl
 8007c64:	f000 fc4e 	bl	8008504 <__mcmp>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	4629      	mov	r1, r5
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	9209      	str	r2, [sp, #36]	; 0x24
 8007c70:	f000 fa0c 	bl	800808c <_Bfree>
 8007c74:	9b07      	ldr	r3, [sp, #28]
 8007c76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c78:	9d04      	ldr	r5, [sp, #16]
 8007c7a:	ea43 0102 	orr.w	r1, r3, r2
 8007c7e:	9b06      	ldr	r3, [sp, #24]
 8007c80:	4319      	orrs	r1, r3
 8007c82:	d110      	bne.n	8007ca6 <_dtoa_r+0xa7e>
 8007c84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c88:	d029      	beq.n	8007cde <_dtoa_r+0xab6>
 8007c8a:	9b05      	ldr	r3, [sp, #20]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	dd02      	ble.n	8007c96 <_dtoa_r+0xa6e>
 8007c90:	9b02      	ldr	r3, [sp, #8]
 8007c92:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007c96:	9b01      	ldr	r3, [sp, #4]
 8007c98:	f883 9000 	strb.w	r9, [r3]
 8007c9c:	e774      	b.n	8007b88 <_dtoa_r+0x960>
 8007c9e:	4638      	mov	r0, r7
 8007ca0:	e7ba      	b.n	8007c18 <_dtoa_r+0x9f0>
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	e7e1      	b.n	8007c6a <_dtoa_r+0xa42>
 8007ca6:	9b05      	ldr	r3, [sp, #20]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	db04      	blt.n	8007cb6 <_dtoa_r+0xa8e>
 8007cac:	9907      	ldr	r1, [sp, #28]
 8007cae:	430b      	orrs	r3, r1
 8007cb0:	9906      	ldr	r1, [sp, #24]
 8007cb2:	430b      	orrs	r3, r1
 8007cb4:	d120      	bne.n	8007cf8 <_dtoa_r+0xad0>
 8007cb6:	2a00      	cmp	r2, #0
 8007cb8:	dded      	ble.n	8007c96 <_dtoa_r+0xa6e>
 8007cba:	4651      	mov	r1, sl
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f000 fbb4 	bl	800842c <__lshift>
 8007cc4:	4631      	mov	r1, r6
 8007cc6:	4682      	mov	sl, r0
 8007cc8:	f000 fc1c 	bl	8008504 <__mcmp>
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	dc03      	bgt.n	8007cd8 <_dtoa_r+0xab0>
 8007cd0:	d1e1      	bne.n	8007c96 <_dtoa_r+0xa6e>
 8007cd2:	f019 0f01 	tst.w	r9, #1
 8007cd6:	d0de      	beq.n	8007c96 <_dtoa_r+0xa6e>
 8007cd8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007cdc:	d1d8      	bne.n	8007c90 <_dtoa_r+0xa68>
 8007cde:	9a01      	ldr	r2, [sp, #4]
 8007ce0:	2339      	movs	r3, #57	; 0x39
 8007ce2:	7013      	strb	r3, [r2, #0]
 8007ce4:	462b      	mov	r3, r5
 8007ce6:	461d      	mov	r5, r3
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007cee:	2a39      	cmp	r2, #57	; 0x39
 8007cf0:	d06c      	beq.n	8007dcc <_dtoa_r+0xba4>
 8007cf2:	3201      	adds	r2, #1
 8007cf4:	701a      	strb	r2, [r3, #0]
 8007cf6:	e747      	b.n	8007b88 <_dtoa_r+0x960>
 8007cf8:	2a00      	cmp	r2, #0
 8007cfa:	dd07      	ble.n	8007d0c <_dtoa_r+0xae4>
 8007cfc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007d00:	d0ed      	beq.n	8007cde <_dtoa_r+0xab6>
 8007d02:	9a01      	ldr	r2, [sp, #4]
 8007d04:	f109 0301 	add.w	r3, r9, #1
 8007d08:	7013      	strb	r3, [r2, #0]
 8007d0a:	e73d      	b.n	8007b88 <_dtoa_r+0x960>
 8007d0c:	9b04      	ldr	r3, [sp, #16]
 8007d0e:	9a08      	ldr	r2, [sp, #32]
 8007d10:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d043      	beq.n	8007da0 <_dtoa_r+0xb78>
 8007d18:	4651      	mov	r1, sl
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	220a      	movs	r2, #10
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f000 f9d6 	bl	80080d0 <__multadd>
 8007d24:	45b8      	cmp	r8, r7
 8007d26:	4682      	mov	sl, r0
 8007d28:	f04f 0300 	mov.w	r3, #0
 8007d2c:	f04f 020a 	mov.w	r2, #10
 8007d30:	4641      	mov	r1, r8
 8007d32:	4620      	mov	r0, r4
 8007d34:	d107      	bne.n	8007d46 <_dtoa_r+0xb1e>
 8007d36:	f000 f9cb 	bl	80080d0 <__multadd>
 8007d3a:	4680      	mov	r8, r0
 8007d3c:	4607      	mov	r7, r0
 8007d3e:	9b04      	ldr	r3, [sp, #16]
 8007d40:	3301      	adds	r3, #1
 8007d42:	9304      	str	r3, [sp, #16]
 8007d44:	e775      	b.n	8007c32 <_dtoa_r+0xa0a>
 8007d46:	f000 f9c3 	bl	80080d0 <__multadd>
 8007d4a:	4639      	mov	r1, r7
 8007d4c:	4680      	mov	r8, r0
 8007d4e:	2300      	movs	r3, #0
 8007d50:	220a      	movs	r2, #10
 8007d52:	4620      	mov	r0, r4
 8007d54:	f000 f9bc 	bl	80080d0 <__multadd>
 8007d58:	4607      	mov	r7, r0
 8007d5a:	e7f0      	b.n	8007d3e <_dtoa_r+0xb16>
 8007d5c:	9b04      	ldr	r3, [sp, #16]
 8007d5e:	9301      	str	r3, [sp, #4]
 8007d60:	9d00      	ldr	r5, [sp, #0]
 8007d62:	4631      	mov	r1, r6
 8007d64:	4650      	mov	r0, sl
 8007d66:	f7ff f9d4 	bl	8007112 <quorem>
 8007d6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007d6e:	9b00      	ldr	r3, [sp, #0]
 8007d70:	f805 9b01 	strb.w	r9, [r5], #1
 8007d74:	1aea      	subs	r2, r5, r3
 8007d76:	9b01      	ldr	r3, [sp, #4]
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	dd07      	ble.n	8007d8c <_dtoa_r+0xb64>
 8007d7c:	4651      	mov	r1, sl
 8007d7e:	2300      	movs	r3, #0
 8007d80:	220a      	movs	r2, #10
 8007d82:	4620      	mov	r0, r4
 8007d84:	f000 f9a4 	bl	80080d0 <__multadd>
 8007d88:	4682      	mov	sl, r0
 8007d8a:	e7ea      	b.n	8007d62 <_dtoa_r+0xb3a>
 8007d8c:	9b01      	ldr	r3, [sp, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	bfc8      	it	gt
 8007d92:	461d      	movgt	r5, r3
 8007d94:	9b00      	ldr	r3, [sp, #0]
 8007d96:	bfd8      	it	le
 8007d98:	2501      	movle	r5, #1
 8007d9a:	441d      	add	r5, r3
 8007d9c:	f04f 0800 	mov.w	r8, #0
 8007da0:	4651      	mov	r1, sl
 8007da2:	2201      	movs	r2, #1
 8007da4:	4620      	mov	r0, r4
 8007da6:	f000 fb41 	bl	800842c <__lshift>
 8007daa:	4631      	mov	r1, r6
 8007dac:	4682      	mov	sl, r0
 8007dae:	f000 fba9 	bl	8008504 <__mcmp>
 8007db2:	2800      	cmp	r0, #0
 8007db4:	dc96      	bgt.n	8007ce4 <_dtoa_r+0xabc>
 8007db6:	d102      	bne.n	8007dbe <_dtoa_r+0xb96>
 8007db8:	f019 0f01 	tst.w	r9, #1
 8007dbc:	d192      	bne.n	8007ce4 <_dtoa_r+0xabc>
 8007dbe:	462b      	mov	r3, r5
 8007dc0:	461d      	mov	r5, r3
 8007dc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dc6:	2a30      	cmp	r2, #48	; 0x30
 8007dc8:	d0fa      	beq.n	8007dc0 <_dtoa_r+0xb98>
 8007dca:	e6dd      	b.n	8007b88 <_dtoa_r+0x960>
 8007dcc:	9a00      	ldr	r2, [sp, #0]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d189      	bne.n	8007ce6 <_dtoa_r+0xabe>
 8007dd2:	f10b 0b01 	add.w	fp, fp, #1
 8007dd6:	2331      	movs	r3, #49	; 0x31
 8007dd8:	e796      	b.n	8007d08 <_dtoa_r+0xae0>
 8007dda:	4b0a      	ldr	r3, [pc, #40]	; (8007e04 <_dtoa_r+0xbdc>)
 8007ddc:	f7ff ba99 	b.w	8007312 <_dtoa_r+0xea>
 8007de0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f47f aa6d 	bne.w	80072c2 <_dtoa_r+0x9a>
 8007de8:	4b07      	ldr	r3, [pc, #28]	; (8007e08 <_dtoa_r+0xbe0>)
 8007dea:	f7ff ba92 	b.w	8007312 <_dtoa_r+0xea>
 8007dee:	9b01      	ldr	r3, [sp, #4]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	dcb5      	bgt.n	8007d60 <_dtoa_r+0xb38>
 8007df4:	9b07      	ldr	r3, [sp, #28]
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	f73f aeb1 	bgt.w	8007b5e <_dtoa_r+0x936>
 8007dfc:	e7b0      	b.n	8007d60 <_dtoa_r+0xb38>
 8007dfe:	bf00      	nop
 8007e00:	0800acfc 	.word	0x0800acfc
 8007e04:	0800ac5c 	.word	0x0800ac5c
 8007e08:	0800ac80 	.word	0x0800ac80

08007e0c <_free_r>:
 8007e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e0e:	2900      	cmp	r1, #0
 8007e10:	d044      	beq.n	8007e9c <_free_r+0x90>
 8007e12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e16:	9001      	str	r0, [sp, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f1a1 0404 	sub.w	r4, r1, #4
 8007e1e:	bfb8      	it	lt
 8007e20:	18e4      	addlt	r4, r4, r3
 8007e22:	f000 f8e7 	bl	8007ff4 <__malloc_lock>
 8007e26:	4a1e      	ldr	r2, [pc, #120]	; (8007ea0 <_free_r+0x94>)
 8007e28:	9801      	ldr	r0, [sp, #4]
 8007e2a:	6813      	ldr	r3, [r2, #0]
 8007e2c:	b933      	cbnz	r3, 8007e3c <_free_r+0x30>
 8007e2e:	6063      	str	r3, [r4, #4]
 8007e30:	6014      	str	r4, [r2, #0]
 8007e32:	b003      	add	sp, #12
 8007e34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e38:	f000 b8e2 	b.w	8008000 <__malloc_unlock>
 8007e3c:	42a3      	cmp	r3, r4
 8007e3e:	d908      	bls.n	8007e52 <_free_r+0x46>
 8007e40:	6825      	ldr	r5, [r4, #0]
 8007e42:	1961      	adds	r1, r4, r5
 8007e44:	428b      	cmp	r3, r1
 8007e46:	bf01      	itttt	eq
 8007e48:	6819      	ldreq	r1, [r3, #0]
 8007e4a:	685b      	ldreq	r3, [r3, #4]
 8007e4c:	1949      	addeq	r1, r1, r5
 8007e4e:	6021      	streq	r1, [r4, #0]
 8007e50:	e7ed      	b.n	8007e2e <_free_r+0x22>
 8007e52:	461a      	mov	r2, r3
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	b10b      	cbz	r3, 8007e5c <_free_r+0x50>
 8007e58:	42a3      	cmp	r3, r4
 8007e5a:	d9fa      	bls.n	8007e52 <_free_r+0x46>
 8007e5c:	6811      	ldr	r1, [r2, #0]
 8007e5e:	1855      	adds	r5, r2, r1
 8007e60:	42a5      	cmp	r5, r4
 8007e62:	d10b      	bne.n	8007e7c <_free_r+0x70>
 8007e64:	6824      	ldr	r4, [r4, #0]
 8007e66:	4421      	add	r1, r4
 8007e68:	1854      	adds	r4, r2, r1
 8007e6a:	42a3      	cmp	r3, r4
 8007e6c:	6011      	str	r1, [r2, #0]
 8007e6e:	d1e0      	bne.n	8007e32 <_free_r+0x26>
 8007e70:	681c      	ldr	r4, [r3, #0]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	6053      	str	r3, [r2, #4]
 8007e76:	440c      	add	r4, r1
 8007e78:	6014      	str	r4, [r2, #0]
 8007e7a:	e7da      	b.n	8007e32 <_free_r+0x26>
 8007e7c:	d902      	bls.n	8007e84 <_free_r+0x78>
 8007e7e:	230c      	movs	r3, #12
 8007e80:	6003      	str	r3, [r0, #0]
 8007e82:	e7d6      	b.n	8007e32 <_free_r+0x26>
 8007e84:	6825      	ldr	r5, [r4, #0]
 8007e86:	1961      	adds	r1, r4, r5
 8007e88:	428b      	cmp	r3, r1
 8007e8a:	bf04      	itt	eq
 8007e8c:	6819      	ldreq	r1, [r3, #0]
 8007e8e:	685b      	ldreq	r3, [r3, #4]
 8007e90:	6063      	str	r3, [r4, #4]
 8007e92:	bf04      	itt	eq
 8007e94:	1949      	addeq	r1, r1, r5
 8007e96:	6021      	streq	r1, [r4, #0]
 8007e98:	6054      	str	r4, [r2, #4]
 8007e9a:	e7ca      	b.n	8007e32 <_free_r+0x26>
 8007e9c:	b003      	add	sp, #12
 8007e9e:	bd30      	pop	{r4, r5, pc}
 8007ea0:	20000900 	.word	0x20000900

08007ea4 <malloc>:
 8007ea4:	4b02      	ldr	r3, [pc, #8]	; (8007eb0 <malloc+0xc>)
 8007ea6:	4601      	mov	r1, r0
 8007ea8:	6818      	ldr	r0, [r3, #0]
 8007eaa:	f000 b823 	b.w	8007ef4 <_malloc_r>
 8007eae:	bf00      	nop
 8007eb0:	200000c0 	.word	0x200000c0

08007eb4 <sbrk_aligned>:
 8007eb4:	b570      	push	{r4, r5, r6, lr}
 8007eb6:	4e0e      	ldr	r6, [pc, #56]	; (8007ef0 <sbrk_aligned+0x3c>)
 8007eb8:	460c      	mov	r4, r1
 8007eba:	6831      	ldr	r1, [r6, #0]
 8007ebc:	4605      	mov	r5, r0
 8007ebe:	b911      	cbnz	r1, 8007ec6 <sbrk_aligned+0x12>
 8007ec0:	f000 fe40 	bl	8008b44 <_sbrk_r>
 8007ec4:	6030      	str	r0, [r6, #0]
 8007ec6:	4621      	mov	r1, r4
 8007ec8:	4628      	mov	r0, r5
 8007eca:	f000 fe3b 	bl	8008b44 <_sbrk_r>
 8007ece:	1c43      	adds	r3, r0, #1
 8007ed0:	d00a      	beq.n	8007ee8 <sbrk_aligned+0x34>
 8007ed2:	1cc4      	adds	r4, r0, #3
 8007ed4:	f024 0403 	bic.w	r4, r4, #3
 8007ed8:	42a0      	cmp	r0, r4
 8007eda:	d007      	beq.n	8007eec <sbrk_aligned+0x38>
 8007edc:	1a21      	subs	r1, r4, r0
 8007ede:	4628      	mov	r0, r5
 8007ee0:	f000 fe30 	bl	8008b44 <_sbrk_r>
 8007ee4:	3001      	adds	r0, #1
 8007ee6:	d101      	bne.n	8007eec <sbrk_aligned+0x38>
 8007ee8:	f04f 34ff 	mov.w	r4, #4294967295
 8007eec:	4620      	mov	r0, r4
 8007eee:	bd70      	pop	{r4, r5, r6, pc}
 8007ef0:	20000904 	.word	0x20000904

08007ef4 <_malloc_r>:
 8007ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ef8:	1ccd      	adds	r5, r1, #3
 8007efa:	f025 0503 	bic.w	r5, r5, #3
 8007efe:	3508      	adds	r5, #8
 8007f00:	2d0c      	cmp	r5, #12
 8007f02:	bf38      	it	cc
 8007f04:	250c      	movcc	r5, #12
 8007f06:	2d00      	cmp	r5, #0
 8007f08:	4607      	mov	r7, r0
 8007f0a:	db01      	blt.n	8007f10 <_malloc_r+0x1c>
 8007f0c:	42a9      	cmp	r1, r5
 8007f0e:	d905      	bls.n	8007f1c <_malloc_r+0x28>
 8007f10:	230c      	movs	r3, #12
 8007f12:	603b      	str	r3, [r7, #0]
 8007f14:	2600      	movs	r6, #0
 8007f16:	4630      	mov	r0, r6
 8007f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007ff0 <_malloc_r+0xfc>
 8007f20:	f000 f868 	bl	8007ff4 <__malloc_lock>
 8007f24:	f8d8 3000 	ldr.w	r3, [r8]
 8007f28:	461c      	mov	r4, r3
 8007f2a:	bb5c      	cbnz	r4, 8007f84 <_malloc_r+0x90>
 8007f2c:	4629      	mov	r1, r5
 8007f2e:	4638      	mov	r0, r7
 8007f30:	f7ff ffc0 	bl	8007eb4 <sbrk_aligned>
 8007f34:	1c43      	adds	r3, r0, #1
 8007f36:	4604      	mov	r4, r0
 8007f38:	d155      	bne.n	8007fe6 <_malloc_r+0xf2>
 8007f3a:	f8d8 4000 	ldr.w	r4, [r8]
 8007f3e:	4626      	mov	r6, r4
 8007f40:	2e00      	cmp	r6, #0
 8007f42:	d145      	bne.n	8007fd0 <_malloc_r+0xdc>
 8007f44:	2c00      	cmp	r4, #0
 8007f46:	d048      	beq.n	8007fda <_malloc_r+0xe6>
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	4631      	mov	r1, r6
 8007f4c:	4638      	mov	r0, r7
 8007f4e:	eb04 0903 	add.w	r9, r4, r3
 8007f52:	f000 fdf7 	bl	8008b44 <_sbrk_r>
 8007f56:	4581      	cmp	r9, r0
 8007f58:	d13f      	bne.n	8007fda <_malloc_r+0xe6>
 8007f5a:	6821      	ldr	r1, [r4, #0]
 8007f5c:	1a6d      	subs	r5, r5, r1
 8007f5e:	4629      	mov	r1, r5
 8007f60:	4638      	mov	r0, r7
 8007f62:	f7ff ffa7 	bl	8007eb4 <sbrk_aligned>
 8007f66:	3001      	adds	r0, #1
 8007f68:	d037      	beq.n	8007fda <_malloc_r+0xe6>
 8007f6a:	6823      	ldr	r3, [r4, #0]
 8007f6c:	442b      	add	r3, r5
 8007f6e:	6023      	str	r3, [r4, #0]
 8007f70:	f8d8 3000 	ldr.w	r3, [r8]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d038      	beq.n	8007fea <_malloc_r+0xf6>
 8007f78:	685a      	ldr	r2, [r3, #4]
 8007f7a:	42a2      	cmp	r2, r4
 8007f7c:	d12b      	bne.n	8007fd6 <_malloc_r+0xe2>
 8007f7e:	2200      	movs	r2, #0
 8007f80:	605a      	str	r2, [r3, #4]
 8007f82:	e00f      	b.n	8007fa4 <_malloc_r+0xb0>
 8007f84:	6822      	ldr	r2, [r4, #0]
 8007f86:	1b52      	subs	r2, r2, r5
 8007f88:	d41f      	bmi.n	8007fca <_malloc_r+0xd6>
 8007f8a:	2a0b      	cmp	r2, #11
 8007f8c:	d917      	bls.n	8007fbe <_malloc_r+0xca>
 8007f8e:	1961      	adds	r1, r4, r5
 8007f90:	42a3      	cmp	r3, r4
 8007f92:	6025      	str	r5, [r4, #0]
 8007f94:	bf18      	it	ne
 8007f96:	6059      	strne	r1, [r3, #4]
 8007f98:	6863      	ldr	r3, [r4, #4]
 8007f9a:	bf08      	it	eq
 8007f9c:	f8c8 1000 	streq.w	r1, [r8]
 8007fa0:	5162      	str	r2, [r4, r5]
 8007fa2:	604b      	str	r3, [r1, #4]
 8007fa4:	4638      	mov	r0, r7
 8007fa6:	f104 060b 	add.w	r6, r4, #11
 8007faa:	f000 f829 	bl	8008000 <__malloc_unlock>
 8007fae:	f026 0607 	bic.w	r6, r6, #7
 8007fb2:	1d23      	adds	r3, r4, #4
 8007fb4:	1af2      	subs	r2, r6, r3
 8007fb6:	d0ae      	beq.n	8007f16 <_malloc_r+0x22>
 8007fb8:	1b9b      	subs	r3, r3, r6
 8007fba:	50a3      	str	r3, [r4, r2]
 8007fbc:	e7ab      	b.n	8007f16 <_malloc_r+0x22>
 8007fbe:	42a3      	cmp	r3, r4
 8007fc0:	6862      	ldr	r2, [r4, #4]
 8007fc2:	d1dd      	bne.n	8007f80 <_malloc_r+0x8c>
 8007fc4:	f8c8 2000 	str.w	r2, [r8]
 8007fc8:	e7ec      	b.n	8007fa4 <_malloc_r+0xb0>
 8007fca:	4623      	mov	r3, r4
 8007fcc:	6864      	ldr	r4, [r4, #4]
 8007fce:	e7ac      	b.n	8007f2a <_malloc_r+0x36>
 8007fd0:	4634      	mov	r4, r6
 8007fd2:	6876      	ldr	r6, [r6, #4]
 8007fd4:	e7b4      	b.n	8007f40 <_malloc_r+0x4c>
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	e7cc      	b.n	8007f74 <_malloc_r+0x80>
 8007fda:	230c      	movs	r3, #12
 8007fdc:	603b      	str	r3, [r7, #0]
 8007fde:	4638      	mov	r0, r7
 8007fe0:	f000 f80e 	bl	8008000 <__malloc_unlock>
 8007fe4:	e797      	b.n	8007f16 <_malloc_r+0x22>
 8007fe6:	6025      	str	r5, [r4, #0]
 8007fe8:	e7dc      	b.n	8007fa4 <_malloc_r+0xb0>
 8007fea:	605b      	str	r3, [r3, #4]
 8007fec:	deff      	udf	#255	; 0xff
 8007fee:	bf00      	nop
 8007ff0:	20000900 	.word	0x20000900

08007ff4 <__malloc_lock>:
 8007ff4:	4801      	ldr	r0, [pc, #4]	; (8007ffc <__malloc_lock+0x8>)
 8007ff6:	f7ff b87c 	b.w	80070f2 <__retarget_lock_acquire_recursive>
 8007ffa:	bf00      	nop
 8007ffc:	200008fc 	.word	0x200008fc

08008000 <__malloc_unlock>:
 8008000:	4801      	ldr	r0, [pc, #4]	; (8008008 <__malloc_unlock+0x8>)
 8008002:	f7ff b877 	b.w	80070f4 <__retarget_lock_release_recursive>
 8008006:	bf00      	nop
 8008008:	200008fc 	.word	0x200008fc

0800800c <_Balloc>:
 800800c:	b570      	push	{r4, r5, r6, lr}
 800800e:	69c6      	ldr	r6, [r0, #28]
 8008010:	4604      	mov	r4, r0
 8008012:	460d      	mov	r5, r1
 8008014:	b976      	cbnz	r6, 8008034 <_Balloc+0x28>
 8008016:	2010      	movs	r0, #16
 8008018:	f7ff ff44 	bl	8007ea4 <malloc>
 800801c:	4602      	mov	r2, r0
 800801e:	61e0      	str	r0, [r4, #28]
 8008020:	b920      	cbnz	r0, 800802c <_Balloc+0x20>
 8008022:	4b18      	ldr	r3, [pc, #96]	; (8008084 <_Balloc+0x78>)
 8008024:	4818      	ldr	r0, [pc, #96]	; (8008088 <_Balloc+0x7c>)
 8008026:	216b      	movs	r1, #107	; 0x6b
 8008028:	f000 fd9c 	bl	8008b64 <__assert_func>
 800802c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008030:	6006      	str	r6, [r0, #0]
 8008032:	60c6      	str	r6, [r0, #12]
 8008034:	69e6      	ldr	r6, [r4, #28]
 8008036:	68f3      	ldr	r3, [r6, #12]
 8008038:	b183      	cbz	r3, 800805c <_Balloc+0x50>
 800803a:	69e3      	ldr	r3, [r4, #28]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008042:	b9b8      	cbnz	r0, 8008074 <_Balloc+0x68>
 8008044:	2101      	movs	r1, #1
 8008046:	fa01 f605 	lsl.w	r6, r1, r5
 800804a:	1d72      	adds	r2, r6, #5
 800804c:	0092      	lsls	r2, r2, #2
 800804e:	4620      	mov	r0, r4
 8008050:	f000 fda6 	bl	8008ba0 <_calloc_r>
 8008054:	b160      	cbz	r0, 8008070 <_Balloc+0x64>
 8008056:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800805a:	e00e      	b.n	800807a <_Balloc+0x6e>
 800805c:	2221      	movs	r2, #33	; 0x21
 800805e:	2104      	movs	r1, #4
 8008060:	4620      	mov	r0, r4
 8008062:	f000 fd9d 	bl	8008ba0 <_calloc_r>
 8008066:	69e3      	ldr	r3, [r4, #28]
 8008068:	60f0      	str	r0, [r6, #12]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1e4      	bne.n	800803a <_Balloc+0x2e>
 8008070:	2000      	movs	r0, #0
 8008072:	bd70      	pop	{r4, r5, r6, pc}
 8008074:	6802      	ldr	r2, [r0, #0]
 8008076:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800807a:	2300      	movs	r3, #0
 800807c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008080:	e7f7      	b.n	8008072 <_Balloc+0x66>
 8008082:	bf00      	nop
 8008084:	0800ac8d 	.word	0x0800ac8d
 8008088:	0800ad0d 	.word	0x0800ad0d

0800808c <_Bfree>:
 800808c:	b570      	push	{r4, r5, r6, lr}
 800808e:	69c6      	ldr	r6, [r0, #28]
 8008090:	4605      	mov	r5, r0
 8008092:	460c      	mov	r4, r1
 8008094:	b976      	cbnz	r6, 80080b4 <_Bfree+0x28>
 8008096:	2010      	movs	r0, #16
 8008098:	f7ff ff04 	bl	8007ea4 <malloc>
 800809c:	4602      	mov	r2, r0
 800809e:	61e8      	str	r0, [r5, #28]
 80080a0:	b920      	cbnz	r0, 80080ac <_Bfree+0x20>
 80080a2:	4b09      	ldr	r3, [pc, #36]	; (80080c8 <_Bfree+0x3c>)
 80080a4:	4809      	ldr	r0, [pc, #36]	; (80080cc <_Bfree+0x40>)
 80080a6:	218f      	movs	r1, #143	; 0x8f
 80080a8:	f000 fd5c 	bl	8008b64 <__assert_func>
 80080ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080b0:	6006      	str	r6, [r0, #0]
 80080b2:	60c6      	str	r6, [r0, #12]
 80080b4:	b13c      	cbz	r4, 80080c6 <_Bfree+0x3a>
 80080b6:	69eb      	ldr	r3, [r5, #28]
 80080b8:	6862      	ldr	r2, [r4, #4]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080c0:	6021      	str	r1, [r4, #0]
 80080c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080c6:	bd70      	pop	{r4, r5, r6, pc}
 80080c8:	0800ac8d 	.word	0x0800ac8d
 80080cc:	0800ad0d 	.word	0x0800ad0d

080080d0 <__multadd>:
 80080d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080d4:	690d      	ldr	r5, [r1, #16]
 80080d6:	4607      	mov	r7, r0
 80080d8:	460c      	mov	r4, r1
 80080da:	461e      	mov	r6, r3
 80080dc:	f101 0c14 	add.w	ip, r1, #20
 80080e0:	2000      	movs	r0, #0
 80080e2:	f8dc 3000 	ldr.w	r3, [ip]
 80080e6:	b299      	uxth	r1, r3
 80080e8:	fb02 6101 	mla	r1, r2, r1, r6
 80080ec:	0c1e      	lsrs	r6, r3, #16
 80080ee:	0c0b      	lsrs	r3, r1, #16
 80080f0:	fb02 3306 	mla	r3, r2, r6, r3
 80080f4:	b289      	uxth	r1, r1
 80080f6:	3001      	adds	r0, #1
 80080f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80080fc:	4285      	cmp	r5, r0
 80080fe:	f84c 1b04 	str.w	r1, [ip], #4
 8008102:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008106:	dcec      	bgt.n	80080e2 <__multadd+0x12>
 8008108:	b30e      	cbz	r6, 800814e <__multadd+0x7e>
 800810a:	68a3      	ldr	r3, [r4, #8]
 800810c:	42ab      	cmp	r3, r5
 800810e:	dc19      	bgt.n	8008144 <__multadd+0x74>
 8008110:	6861      	ldr	r1, [r4, #4]
 8008112:	4638      	mov	r0, r7
 8008114:	3101      	adds	r1, #1
 8008116:	f7ff ff79 	bl	800800c <_Balloc>
 800811a:	4680      	mov	r8, r0
 800811c:	b928      	cbnz	r0, 800812a <__multadd+0x5a>
 800811e:	4602      	mov	r2, r0
 8008120:	4b0c      	ldr	r3, [pc, #48]	; (8008154 <__multadd+0x84>)
 8008122:	480d      	ldr	r0, [pc, #52]	; (8008158 <__multadd+0x88>)
 8008124:	21ba      	movs	r1, #186	; 0xba
 8008126:	f000 fd1d 	bl	8008b64 <__assert_func>
 800812a:	6922      	ldr	r2, [r4, #16]
 800812c:	3202      	adds	r2, #2
 800812e:	f104 010c 	add.w	r1, r4, #12
 8008132:	0092      	lsls	r2, r2, #2
 8008134:	300c      	adds	r0, #12
 8008136:	f7fe ffde 	bl	80070f6 <memcpy>
 800813a:	4621      	mov	r1, r4
 800813c:	4638      	mov	r0, r7
 800813e:	f7ff ffa5 	bl	800808c <_Bfree>
 8008142:	4644      	mov	r4, r8
 8008144:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008148:	3501      	adds	r5, #1
 800814a:	615e      	str	r6, [r3, #20]
 800814c:	6125      	str	r5, [r4, #16]
 800814e:	4620      	mov	r0, r4
 8008150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008154:	0800acfc 	.word	0x0800acfc
 8008158:	0800ad0d 	.word	0x0800ad0d

0800815c <__hi0bits>:
 800815c:	0c03      	lsrs	r3, r0, #16
 800815e:	041b      	lsls	r3, r3, #16
 8008160:	b9d3      	cbnz	r3, 8008198 <__hi0bits+0x3c>
 8008162:	0400      	lsls	r0, r0, #16
 8008164:	2310      	movs	r3, #16
 8008166:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800816a:	bf04      	itt	eq
 800816c:	0200      	lsleq	r0, r0, #8
 800816e:	3308      	addeq	r3, #8
 8008170:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008174:	bf04      	itt	eq
 8008176:	0100      	lsleq	r0, r0, #4
 8008178:	3304      	addeq	r3, #4
 800817a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800817e:	bf04      	itt	eq
 8008180:	0080      	lsleq	r0, r0, #2
 8008182:	3302      	addeq	r3, #2
 8008184:	2800      	cmp	r0, #0
 8008186:	db05      	blt.n	8008194 <__hi0bits+0x38>
 8008188:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800818c:	f103 0301 	add.w	r3, r3, #1
 8008190:	bf08      	it	eq
 8008192:	2320      	moveq	r3, #32
 8008194:	4618      	mov	r0, r3
 8008196:	4770      	bx	lr
 8008198:	2300      	movs	r3, #0
 800819a:	e7e4      	b.n	8008166 <__hi0bits+0xa>

0800819c <__lo0bits>:
 800819c:	6803      	ldr	r3, [r0, #0]
 800819e:	f013 0207 	ands.w	r2, r3, #7
 80081a2:	d00c      	beq.n	80081be <__lo0bits+0x22>
 80081a4:	07d9      	lsls	r1, r3, #31
 80081a6:	d422      	bmi.n	80081ee <__lo0bits+0x52>
 80081a8:	079a      	lsls	r2, r3, #30
 80081aa:	bf49      	itett	mi
 80081ac:	085b      	lsrmi	r3, r3, #1
 80081ae:	089b      	lsrpl	r3, r3, #2
 80081b0:	6003      	strmi	r3, [r0, #0]
 80081b2:	2201      	movmi	r2, #1
 80081b4:	bf5c      	itt	pl
 80081b6:	6003      	strpl	r3, [r0, #0]
 80081b8:	2202      	movpl	r2, #2
 80081ba:	4610      	mov	r0, r2
 80081bc:	4770      	bx	lr
 80081be:	b299      	uxth	r1, r3
 80081c0:	b909      	cbnz	r1, 80081c6 <__lo0bits+0x2a>
 80081c2:	0c1b      	lsrs	r3, r3, #16
 80081c4:	2210      	movs	r2, #16
 80081c6:	b2d9      	uxtb	r1, r3
 80081c8:	b909      	cbnz	r1, 80081ce <__lo0bits+0x32>
 80081ca:	3208      	adds	r2, #8
 80081cc:	0a1b      	lsrs	r3, r3, #8
 80081ce:	0719      	lsls	r1, r3, #28
 80081d0:	bf04      	itt	eq
 80081d2:	091b      	lsreq	r3, r3, #4
 80081d4:	3204      	addeq	r2, #4
 80081d6:	0799      	lsls	r1, r3, #30
 80081d8:	bf04      	itt	eq
 80081da:	089b      	lsreq	r3, r3, #2
 80081dc:	3202      	addeq	r2, #2
 80081de:	07d9      	lsls	r1, r3, #31
 80081e0:	d403      	bmi.n	80081ea <__lo0bits+0x4e>
 80081e2:	085b      	lsrs	r3, r3, #1
 80081e4:	f102 0201 	add.w	r2, r2, #1
 80081e8:	d003      	beq.n	80081f2 <__lo0bits+0x56>
 80081ea:	6003      	str	r3, [r0, #0]
 80081ec:	e7e5      	b.n	80081ba <__lo0bits+0x1e>
 80081ee:	2200      	movs	r2, #0
 80081f0:	e7e3      	b.n	80081ba <__lo0bits+0x1e>
 80081f2:	2220      	movs	r2, #32
 80081f4:	e7e1      	b.n	80081ba <__lo0bits+0x1e>
	...

080081f8 <__i2b>:
 80081f8:	b510      	push	{r4, lr}
 80081fa:	460c      	mov	r4, r1
 80081fc:	2101      	movs	r1, #1
 80081fe:	f7ff ff05 	bl	800800c <_Balloc>
 8008202:	4602      	mov	r2, r0
 8008204:	b928      	cbnz	r0, 8008212 <__i2b+0x1a>
 8008206:	4b05      	ldr	r3, [pc, #20]	; (800821c <__i2b+0x24>)
 8008208:	4805      	ldr	r0, [pc, #20]	; (8008220 <__i2b+0x28>)
 800820a:	f240 1145 	movw	r1, #325	; 0x145
 800820e:	f000 fca9 	bl	8008b64 <__assert_func>
 8008212:	2301      	movs	r3, #1
 8008214:	6144      	str	r4, [r0, #20]
 8008216:	6103      	str	r3, [r0, #16]
 8008218:	bd10      	pop	{r4, pc}
 800821a:	bf00      	nop
 800821c:	0800acfc 	.word	0x0800acfc
 8008220:	0800ad0d 	.word	0x0800ad0d

08008224 <__multiply>:
 8008224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008228:	4691      	mov	r9, r2
 800822a:	690a      	ldr	r2, [r1, #16]
 800822c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008230:	429a      	cmp	r2, r3
 8008232:	bfb8      	it	lt
 8008234:	460b      	movlt	r3, r1
 8008236:	460c      	mov	r4, r1
 8008238:	bfbc      	itt	lt
 800823a:	464c      	movlt	r4, r9
 800823c:	4699      	movlt	r9, r3
 800823e:	6927      	ldr	r7, [r4, #16]
 8008240:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008244:	68a3      	ldr	r3, [r4, #8]
 8008246:	6861      	ldr	r1, [r4, #4]
 8008248:	eb07 060a 	add.w	r6, r7, sl
 800824c:	42b3      	cmp	r3, r6
 800824e:	b085      	sub	sp, #20
 8008250:	bfb8      	it	lt
 8008252:	3101      	addlt	r1, #1
 8008254:	f7ff feda 	bl	800800c <_Balloc>
 8008258:	b930      	cbnz	r0, 8008268 <__multiply+0x44>
 800825a:	4602      	mov	r2, r0
 800825c:	4b44      	ldr	r3, [pc, #272]	; (8008370 <__multiply+0x14c>)
 800825e:	4845      	ldr	r0, [pc, #276]	; (8008374 <__multiply+0x150>)
 8008260:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008264:	f000 fc7e 	bl	8008b64 <__assert_func>
 8008268:	f100 0514 	add.w	r5, r0, #20
 800826c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008270:	462b      	mov	r3, r5
 8008272:	2200      	movs	r2, #0
 8008274:	4543      	cmp	r3, r8
 8008276:	d321      	bcc.n	80082bc <__multiply+0x98>
 8008278:	f104 0314 	add.w	r3, r4, #20
 800827c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008280:	f109 0314 	add.w	r3, r9, #20
 8008284:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008288:	9202      	str	r2, [sp, #8]
 800828a:	1b3a      	subs	r2, r7, r4
 800828c:	3a15      	subs	r2, #21
 800828e:	f022 0203 	bic.w	r2, r2, #3
 8008292:	3204      	adds	r2, #4
 8008294:	f104 0115 	add.w	r1, r4, #21
 8008298:	428f      	cmp	r7, r1
 800829a:	bf38      	it	cc
 800829c:	2204      	movcc	r2, #4
 800829e:	9201      	str	r2, [sp, #4]
 80082a0:	9a02      	ldr	r2, [sp, #8]
 80082a2:	9303      	str	r3, [sp, #12]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d80c      	bhi.n	80082c2 <__multiply+0x9e>
 80082a8:	2e00      	cmp	r6, #0
 80082aa:	dd03      	ble.n	80082b4 <__multiply+0x90>
 80082ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d05b      	beq.n	800836c <__multiply+0x148>
 80082b4:	6106      	str	r6, [r0, #16]
 80082b6:	b005      	add	sp, #20
 80082b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082bc:	f843 2b04 	str.w	r2, [r3], #4
 80082c0:	e7d8      	b.n	8008274 <__multiply+0x50>
 80082c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80082c6:	f1ba 0f00 	cmp.w	sl, #0
 80082ca:	d024      	beq.n	8008316 <__multiply+0xf2>
 80082cc:	f104 0e14 	add.w	lr, r4, #20
 80082d0:	46a9      	mov	r9, r5
 80082d2:	f04f 0c00 	mov.w	ip, #0
 80082d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80082da:	f8d9 1000 	ldr.w	r1, [r9]
 80082de:	fa1f fb82 	uxth.w	fp, r2
 80082e2:	b289      	uxth	r1, r1
 80082e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80082e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80082ec:	f8d9 2000 	ldr.w	r2, [r9]
 80082f0:	4461      	add	r1, ip
 80082f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80082f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80082fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80082fe:	b289      	uxth	r1, r1
 8008300:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008304:	4577      	cmp	r7, lr
 8008306:	f849 1b04 	str.w	r1, [r9], #4
 800830a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800830e:	d8e2      	bhi.n	80082d6 <__multiply+0xb2>
 8008310:	9a01      	ldr	r2, [sp, #4]
 8008312:	f845 c002 	str.w	ip, [r5, r2]
 8008316:	9a03      	ldr	r2, [sp, #12]
 8008318:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800831c:	3304      	adds	r3, #4
 800831e:	f1b9 0f00 	cmp.w	r9, #0
 8008322:	d021      	beq.n	8008368 <__multiply+0x144>
 8008324:	6829      	ldr	r1, [r5, #0]
 8008326:	f104 0c14 	add.w	ip, r4, #20
 800832a:	46ae      	mov	lr, r5
 800832c:	f04f 0a00 	mov.w	sl, #0
 8008330:	f8bc b000 	ldrh.w	fp, [ip]
 8008334:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008338:	fb09 220b 	mla	r2, r9, fp, r2
 800833c:	4452      	add	r2, sl
 800833e:	b289      	uxth	r1, r1
 8008340:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008344:	f84e 1b04 	str.w	r1, [lr], #4
 8008348:	f85c 1b04 	ldr.w	r1, [ip], #4
 800834c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008350:	f8be 1000 	ldrh.w	r1, [lr]
 8008354:	fb09 110a 	mla	r1, r9, sl, r1
 8008358:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800835c:	4567      	cmp	r7, ip
 800835e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008362:	d8e5      	bhi.n	8008330 <__multiply+0x10c>
 8008364:	9a01      	ldr	r2, [sp, #4]
 8008366:	50a9      	str	r1, [r5, r2]
 8008368:	3504      	adds	r5, #4
 800836a:	e799      	b.n	80082a0 <__multiply+0x7c>
 800836c:	3e01      	subs	r6, #1
 800836e:	e79b      	b.n	80082a8 <__multiply+0x84>
 8008370:	0800acfc 	.word	0x0800acfc
 8008374:	0800ad0d 	.word	0x0800ad0d

08008378 <__pow5mult>:
 8008378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800837c:	4615      	mov	r5, r2
 800837e:	f012 0203 	ands.w	r2, r2, #3
 8008382:	4606      	mov	r6, r0
 8008384:	460f      	mov	r7, r1
 8008386:	d007      	beq.n	8008398 <__pow5mult+0x20>
 8008388:	4c25      	ldr	r4, [pc, #148]	; (8008420 <__pow5mult+0xa8>)
 800838a:	3a01      	subs	r2, #1
 800838c:	2300      	movs	r3, #0
 800838e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008392:	f7ff fe9d 	bl	80080d0 <__multadd>
 8008396:	4607      	mov	r7, r0
 8008398:	10ad      	asrs	r5, r5, #2
 800839a:	d03d      	beq.n	8008418 <__pow5mult+0xa0>
 800839c:	69f4      	ldr	r4, [r6, #28]
 800839e:	b97c      	cbnz	r4, 80083c0 <__pow5mult+0x48>
 80083a0:	2010      	movs	r0, #16
 80083a2:	f7ff fd7f 	bl	8007ea4 <malloc>
 80083a6:	4602      	mov	r2, r0
 80083a8:	61f0      	str	r0, [r6, #28]
 80083aa:	b928      	cbnz	r0, 80083b8 <__pow5mult+0x40>
 80083ac:	4b1d      	ldr	r3, [pc, #116]	; (8008424 <__pow5mult+0xac>)
 80083ae:	481e      	ldr	r0, [pc, #120]	; (8008428 <__pow5mult+0xb0>)
 80083b0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80083b4:	f000 fbd6 	bl	8008b64 <__assert_func>
 80083b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083bc:	6004      	str	r4, [r0, #0]
 80083be:	60c4      	str	r4, [r0, #12]
 80083c0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80083c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083c8:	b94c      	cbnz	r4, 80083de <__pow5mult+0x66>
 80083ca:	f240 2171 	movw	r1, #625	; 0x271
 80083ce:	4630      	mov	r0, r6
 80083d0:	f7ff ff12 	bl	80081f8 <__i2b>
 80083d4:	2300      	movs	r3, #0
 80083d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80083da:	4604      	mov	r4, r0
 80083dc:	6003      	str	r3, [r0, #0]
 80083de:	f04f 0900 	mov.w	r9, #0
 80083e2:	07eb      	lsls	r3, r5, #31
 80083e4:	d50a      	bpl.n	80083fc <__pow5mult+0x84>
 80083e6:	4639      	mov	r1, r7
 80083e8:	4622      	mov	r2, r4
 80083ea:	4630      	mov	r0, r6
 80083ec:	f7ff ff1a 	bl	8008224 <__multiply>
 80083f0:	4639      	mov	r1, r7
 80083f2:	4680      	mov	r8, r0
 80083f4:	4630      	mov	r0, r6
 80083f6:	f7ff fe49 	bl	800808c <_Bfree>
 80083fa:	4647      	mov	r7, r8
 80083fc:	106d      	asrs	r5, r5, #1
 80083fe:	d00b      	beq.n	8008418 <__pow5mult+0xa0>
 8008400:	6820      	ldr	r0, [r4, #0]
 8008402:	b938      	cbnz	r0, 8008414 <__pow5mult+0x9c>
 8008404:	4622      	mov	r2, r4
 8008406:	4621      	mov	r1, r4
 8008408:	4630      	mov	r0, r6
 800840a:	f7ff ff0b 	bl	8008224 <__multiply>
 800840e:	6020      	str	r0, [r4, #0]
 8008410:	f8c0 9000 	str.w	r9, [r0]
 8008414:	4604      	mov	r4, r0
 8008416:	e7e4      	b.n	80083e2 <__pow5mult+0x6a>
 8008418:	4638      	mov	r0, r7
 800841a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800841e:	bf00      	nop
 8008420:	0800ae58 	.word	0x0800ae58
 8008424:	0800ac8d 	.word	0x0800ac8d
 8008428:	0800ad0d 	.word	0x0800ad0d

0800842c <__lshift>:
 800842c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008430:	460c      	mov	r4, r1
 8008432:	6849      	ldr	r1, [r1, #4]
 8008434:	6923      	ldr	r3, [r4, #16]
 8008436:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800843a:	68a3      	ldr	r3, [r4, #8]
 800843c:	4607      	mov	r7, r0
 800843e:	4691      	mov	r9, r2
 8008440:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008444:	f108 0601 	add.w	r6, r8, #1
 8008448:	42b3      	cmp	r3, r6
 800844a:	db0b      	blt.n	8008464 <__lshift+0x38>
 800844c:	4638      	mov	r0, r7
 800844e:	f7ff fddd 	bl	800800c <_Balloc>
 8008452:	4605      	mov	r5, r0
 8008454:	b948      	cbnz	r0, 800846a <__lshift+0x3e>
 8008456:	4602      	mov	r2, r0
 8008458:	4b28      	ldr	r3, [pc, #160]	; (80084fc <__lshift+0xd0>)
 800845a:	4829      	ldr	r0, [pc, #164]	; (8008500 <__lshift+0xd4>)
 800845c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008460:	f000 fb80 	bl	8008b64 <__assert_func>
 8008464:	3101      	adds	r1, #1
 8008466:	005b      	lsls	r3, r3, #1
 8008468:	e7ee      	b.n	8008448 <__lshift+0x1c>
 800846a:	2300      	movs	r3, #0
 800846c:	f100 0114 	add.w	r1, r0, #20
 8008470:	f100 0210 	add.w	r2, r0, #16
 8008474:	4618      	mov	r0, r3
 8008476:	4553      	cmp	r3, sl
 8008478:	db33      	blt.n	80084e2 <__lshift+0xb6>
 800847a:	6920      	ldr	r0, [r4, #16]
 800847c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008480:	f104 0314 	add.w	r3, r4, #20
 8008484:	f019 091f 	ands.w	r9, r9, #31
 8008488:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800848c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008490:	d02b      	beq.n	80084ea <__lshift+0xbe>
 8008492:	f1c9 0e20 	rsb	lr, r9, #32
 8008496:	468a      	mov	sl, r1
 8008498:	2200      	movs	r2, #0
 800849a:	6818      	ldr	r0, [r3, #0]
 800849c:	fa00 f009 	lsl.w	r0, r0, r9
 80084a0:	4310      	orrs	r0, r2
 80084a2:	f84a 0b04 	str.w	r0, [sl], #4
 80084a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80084aa:	459c      	cmp	ip, r3
 80084ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80084b0:	d8f3      	bhi.n	800849a <__lshift+0x6e>
 80084b2:	ebac 0304 	sub.w	r3, ip, r4
 80084b6:	3b15      	subs	r3, #21
 80084b8:	f023 0303 	bic.w	r3, r3, #3
 80084bc:	3304      	adds	r3, #4
 80084be:	f104 0015 	add.w	r0, r4, #21
 80084c2:	4584      	cmp	ip, r0
 80084c4:	bf38      	it	cc
 80084c6:	2304      	movcc	r3, #4
 80084c8:	50ca      	str	r2, [r1, r3]
 80084ca:	b10a      	cbz	r2, 80084d0 <__lshift+0xa4>
 80084cc:	f108 0602 	add.w	r6, r8, #2
 80084d0:	3e01      	subs	r6, #1
 80084d2:	4638      	mov	r0, r7
 80084d4:	612e      	str	r6, [r5, #16]
 80084d6:	4621      	mov	r1, r4
 80084d8:	f7ff fdd8 	bl	800808c <_Bfree>
 80084dc:	4628      	mov	r0, r5
 80084de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80084e6:	3301      	adds	r3, #1
 80084e8:	e7c5      	b.n	8008476 <__lshift+0x4a>
 80084ea:	3904      	subs	r1, #4
 80084ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80084f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80084f4:	459c      	cmp	ip, r3
 80084f6:	d8f9      	bhi.n	80084ec <__lshift+0xc0>
 80084f8:	e7ea      	b.n	80084d0 <__lshift+0xa4>
 80084fa:	bf00      	nop
 80084fc:	0800acfc 	.word	0x0800acfc
 8008500:	0800ad0d 	.word	0x0800ad0d

08008504 <__mcmp>:
 8008504:	b530      	push	{r4, r5, lr}
 8008506:	6902      	ldr	r2, [r0, #16]
 8008508:	690c      	ldr	r4, [r1, #16]
 800850a:	1b12      	subs	r2, r2, r4
 800850c:	d10e      	bne.n	800852c <__mcmp+0x28>
 800850e:	f100 0314 	add.w	r3, r0, #20
 8008512:	3114      	adds	r1, #20
 8008514:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008518:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800851c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008520:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008524:	42a5      	cmp	r5, r4
 8008526:	d003      	beq.n	8008530 <__mcmp+0x2c>
 8008528:	d305      	bcc.n	8008536 <__mcmp+0x32>
 800852a:	2201      	movs	r2, #1
 800852c:	4610      	mov	r0, r2
 800852e:	bd30      	pop	{r4, r5, pc}
 8008530:	4283      	cmp	r3, r0
 8008532:	d3f3      	bcc.n	800851c <__mcmp+0x18>
 8008534:	e7fa      	b.n	800852c <__mcmp+0x28>
 8008536:	f04f 32ff 	mov.w	r2, #4294967295
 800853a:	e7f7      	b.n	800852c <__mcmp+0x28>

0800853c <__mdiff>:
 800853c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008540:	460c      	mov	r4, r1
 8008542:	4606      	mov	r6, r0
 8008544:	4611      	mov	r1, r2
 8008546:	4620      	mov	r0, r4
 8008548:	4690      	mov	r8, r2
 800854a:	f7ff ffdb 	bl	8008504 <__mcmp>
 800854e:	1e05      	subs	r5, r0, #0
 8008550:	d110      	bne.n	8008574 <__mdiff+0x38>
 8008552:	4629      	mov	r1, r5
 8008554:	4630      	mov	r0, r6
 8008556:	f7ff fd59 	bl	800800c <_Balloc>
 800855a:	b930      	cbnz	r0, 800856a <__mdiff+0x2e>
 800855c:	4b3a      	ldr	r3, [pc, #232]	; (8008648 <__mdiff+0x10c>)
 800855e:	4602      	mov	r2, r0
 8008560:	f240 2137 	movw	r1, #567	; 0x237
 8008564:	4839      	ldr	r0, [pc, #228]	; (800864c <__mdiff+0x110>)
 8008566:	f000 fafd 	bl	8008b64 <__assert_func>
 800856a:	2301      	movs	r3, #1
 800856c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008570:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008574:	bfa4      	itt	ge
 8008576:	4643      	movge	r3, r8
 8008578:	46a0      	movge	r8, r4
 800857a:	4630      	mov	r0, r6
 800857c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008580:	bfa6      	itte	ge
 8008582:	461c      	movge	r4, r3
 8008584:	2500      	movge	r5, #0
 8008586:	2501      	movlt	r5, #1
 8008588:	f7ff fd40 	bl	800800c <_Balloc>
 800858c:	b920      	cbnz	r0, 8008598 <__mdiff+0x5c>
 800858e:	4b2e      	ldr	r3, [pc, #184]	; (8008648 <__mdiff+0x10c>)
 8008590:	4602      	mov	r2, r0
 8008592:	f240 2145 	movw	r1, #581	; 0x245
 8008596:	e7e5      	b.n	8008564 <__mdiff+0x28>
 8008598:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800859c:	6926      	ldr	r6, [r4, #16]
 800859e:	60c5      	str	r5, [r0, #12]
 80085a0:	f104 0914 	add.w	r9, r4, #20
 80085a4:	f108 0514 	add.w	r5, r8, #20
 80085a8:	f100 0e14 	add.w	lr, r0, #20
 80085ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80085b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80085b4:	f108 0210 	add.w	r2, r8, #16
 80085b8:	46f2      	mov	sl, lr
 80085ba:	2100      	movs	r1, #0
 80085bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80085c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80085c4:	fa11 f88b 	uxtah	r8, r1, fp
 80085c8:	b299      	uxth	r1, r3
 80085ca:	0c1b      	lsrs	r3, r3, #16
 80085cc:	eba8 0801 	sub.w	r8, r8, r1
 80085d0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80085d4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80085d8:	fa1f f888 	uxth.w	r8, r8
 80085dc:	1419      	asrs	r1, r3, #16
 80085de:	454e      	cmp	r6, r9
 80085e0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80085e4:	f84a 3b04 	str.w	r3, [sl], #4
 80085e8:	d8e8      	bhi.n	80085bc <__mdiff+0x80>
 80085ea:	1b33      	subs	r3, r6, r4
 80085ec:	3b15      	subs	r3, #21
 80085ee:	f023 0303 	bic.w	r3, r3, #3
 80085f2:	3304      	adds	r3, #4
 80085f4:	3415      	adds	r4, #21
 80085f6:	42a6      	cmp	r6, r4
 80085f8:	bf38      	it	cc
 80085fa:	2304      	movcc	r3, #4
 80085fc:	441d      	add	r5, r3
 80085fe:	4473      	add	r3, lr
 8008600:	469e      	mov	lr, r3
 8008602:	462e      	mov	r6, r5
 8008604:	4566      	cmp	r6, ip
 8008606:	d30e      	bcc.n	8008626 <__mdiff+0xea>
 8008608:	f10c 0203 	add.w	r2, ip, #3
 800860c:	1b52      	subs	r2, r2, r5
 800860e:	f022 0203 	bic.w	r2, r2, #3
 8008612:	3d03      	subs	r5, #3
 8008614:	45ac      	cmp	ip, r5
 8008616:	bf38      	it	cc
 8008618:	2200      	movcc	r2, #0
 800861a:	4413      	add	r3, r2
 800861c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008620:	b17a      	cbz	r2, 8008642 <__mdiff+0x106>
 8008622:	6107      	str	r7, [r0, #16]
 8008624:	e7a4      	b.n	8008570 <__mdiff+0x34>
 8008626:	f856 8b04 	ldr.w	r8, [r6], #4
 800862a:	fa11 f288 	uxtah	r2, r1, r8
 800862e:	1414      	asrs	r4, r2, #16
 8008630:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008634:	b292      	uxth	r2, r2
 8008636:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800863a:	f84e 2b04 	str.w	r2, [lr], #4
 800863e:	1421      	asrs	r1, r4, #16
 8008640:	e7e0      	b.n	8008604 <__mdiff+0xc8>
 8008642:	3f01      	subs	r7, #1
 8008644:	e7ea      	b.n	800861c <__mdiff+0xe0>
 8008646:	bf00      	nop
 8008648:	0800acfc 	.word	0x0800acfc
 800864c:	0800ad0d 	.word	0x0800ad0d

08008650 <__d2b>:
 8008650:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008654:	460f      	mov	r7, r1
 8008656:	2101      	movs	r1, #1
 8008658:	ec59 8b10 	vmov	r8, r9, d0
 800865c:	4616      	mov	r6, r2
 800865e:	f7ff fcd5 	bl	800800c <_Balloc>
 8008662:	4604      	mov	r4, r0
 8008664:	b930      	cbnz	r0, 8008674 <__d2b+0x24>
 8008666:	4602      	mov	r2, r0
 8008668:	4b24      	ldr	r3, [pc, #144]	; (80086fc <__d2b+0xac>)
 800866a:	4825      	ldr	r0, [pc, #148]	; (8008700 <__d2b+0xb0>)
 800866c:	f240 310f 	movw	r1, #783	; 0x30f
 8008670:	f000 fa78 	bl	8008b64 <__assert_func>
 8008674:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008678:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800867c:	bb2d      	cbnz	r5, 80086ca <__d2b+0x7a>
 800867e:	9301      	str	r3, [sp, #4]
 8008680:	f1b8 0300 	subs.w	r3, r8, #0
 8008684:	d026      	beq.n	80086d4 <__d2b+0x84>
 8008686:	4668      	mov	r0, sp
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	f7ff fd87 	bl	800819c <__lo0bits>
 800868e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008692:	b1e8      	cbz	r0, 80086d0 <__d2b+0x80>
 8008694:	f1c0 0320 	rsb	r3, r0, #32
 8008698:	fa02 f303 	lsl.w	r3, r2, r3
 800869c:	430b      	orrs	r3, r1
 800869e:	40c2      	lsrs	r2, r0
 80086a0:	6163      	str	r3, [r4, #20]
 80086a2:	9201      	str	r2, [sp, #4]
 80086a4:	9b01      	ldr	r3, [sp, #4]
 80086a6:	61a3      	str	r3, [r4, #24]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	bf14      	ite	ne
 80086ac:	2202      	movne	r2, #2
 80086ae:	2201      	moveq	r2, #1
 80086b0:	6122      	str	r2, [r4, #16]
 80086b2:	b1bd      	cbz	r5, 80086e4 <__d2b+0x94>
 80086b4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80086b8:	4405      	add	r5, r0
 80086ba:	603d      	str	r5, [r7, #0]
 80086bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80086c0:	6030      	str	r0, [r6, #0]
 80086c2:	4620      	mov	r0, r4
 80086c4:	b003      	add	sp, #12
 80086c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086ce:	e7d6      	b.n	800867e <__d2b+0x2e>
 80086d0:	6161      	str	r1, [r4, #20]
 80086d2:	e7e7      	b.n	80086a4 <__d2b+0x54>
 80086d4:	a801      	add	r0, sp, #4
 80086d6:	f7ff fd61 	bl	800819c <__lo0bits>
 80086da:	9b01      	ldr	r3, [sp, #4]
 80086dc:	6163      	str	r3, [r4, #20]
 80086de:	3020      	adds	r0, #32
 80086e0:	2201      	movs	r2, #1
 80086e2:	e7e5      	b.n	80086b0 <__d2b+0x60>
 80086e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80086ec:	6038      	str	r0, [r7, #0]
 80086ee:	6918      	ldr	r0, [r3, #16]
 80086f0:	f7ff fd34 	bl	800815c <__hi0bits>
 80086f4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80086f8:	e7e2      	b.n	80086c0 <__d2b+0x70>
 80086fa:	bf00      	nop
 80086fc:	0800acfc 	.word	0x0800acfc
 8008700:	0800ad0d 	.word	0x0800ad0d

08008704 <__ssputs_r>:
 8008704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008708:	688e      	ldr	r6, [r1, #8]
 800870a:	461f      	mov	r7, r3
 800870c:	42be      	cmp	r6, r7
 800870e:	680b      	ldr	r3, [r1, #0]
 8008710:	4682      	mov	sl, r0
 8008712:	460c      	mov	r4, r1
 8008714:	4690      	mov	r8, r2
 8008716:	d82c      	bhi.n	8008772 <__ssputs_r+0x6e>
 8008718:	898a      	ldrh	r2, [r1, #12]
 800871a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800871e:	d026      	beq.n	800876e <__ssputs_r+0x6a>
 8008720:	6965      	ldr	r5, [r4, #20]
 8008722:	6909      	ldr	r1, [r1, #16]
 8008724:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008728:	eba3 0901 	sub.w	r9, r3, r1
 800872c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008730:	1c7b      	adds	r3, r7, #1
 8008732:	444b      	add	r3, r9
 8008734:	106d      	asrs	r5, r5, #1
 8008736:	429d      	cmp	r5, r3
 8008738:	bf38      	it	cc
 800873a:	461d      	movcc	r5, r3
 800873c:	0553      	lsls	r3, r2, #21
 800873e:	d527      	bpl.n	8008790 <__ssputs_r+0x8c>
 8008740:	4629      	mov	r1, r5
 8008742:	f7ff fbd7 	bl	8007ef4 <_malloc_r>
 8008746:	4606      	mov	r6, r0
 8008748:	b360      	cbz	r0, 80087a4 <__ssputs_r+0xa0>
 800874a:	6921      	ldr	r1, [r4, #16]
 800874c:	464a      	mov	r2, r9
 800874e:	f7fe fcd2 	bl	80070f6 <memcpy>
 8008752:	89a3      	ldrh	r3, [r4, #12]
 8008754:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800875c:	81a3      	strh	r3, [r4, #12]
 800875e:	6126      	str	r6, [r4, #16]
 8008760:	6165      	str	r5, [r4, #20]
 8008762:	444e      	add	r6, r9
 8008764:	eba5 0509 	sub.w	r5, r5, r9
 8008768:	6026      	str	r6, [r4, #0]
 800876a:	60a5      	str	r5, [r4, #8]
 800876c:	463e      	mov	r6, r7
 800876e:	42be      	cmp	r6, r7
 8008770:	d900      	bls.n	8008774 <__ssputs_r+0x70>
 8008772:	463e      	mov	r6, r7
 8008774:	6820      	ldr	r0, [r4, #0]
 8008776:	4632      	mov	r2, r6
 8008778:	4641      	mov	r1, r8
 800877a:	f000 f9c9 	bl	8008b10 <memmove>
 800877e:	68a3      	ldr	r3, [r4, #8]
 8008780:	1b9b      	subs	r3, r3, r6
 8008782:	60a3      	str	r3, [r4, #8]
 8008784:	6823      	ldr	r3, [r4, #0]
 8008786:	4433      	add	r3, r6
 8008788:	6023      	str	r3, [r4, #0]
 800878a:	2000      	movs	r0, #0
 800878c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008790:	462a      	mov	r2, r5
 8008792:	f000 fa2d 	bl	8008bf0 <_realloc_r>
 8008796:	4606      	mov	r6, r0
 8008798:	2800      	cmp	r0, #0
 800879a:	d1e0      	bne.n	800875e <__ssputs_r+0x5a>
 800879c:	6921      	ldr	r1, [r4, #16]
 800879e:	4650      	mov	r0, sl
 80087a0:	f7ff fb34 	bl	8007e0c <_free_r>
 80087a4:	230c      	movs	r3, #12
 80087a6:	f8ca 3000 	str.w	r3, [sl]
 80087aa:	89a3      	ldrh	r3, [r4, #12]
 80087ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087b0:	81a3      	strh	r3, [r4, #12]
 80087b2:	f04f 30ff 	mov.w	r0, #4294967295
 80087b6:	e7e9      	b.n	800878c <__ssputs_r+0x88>

080087b8 <_svfiprintf_r>:
 80087b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087bc:	4698      	mov	r8, r3
 80087be:	898b      	ldrh	r3, [r1, #12]
 80087c0:	061b      	lsls	r3, r3, #24
 80087c2:	b09d      	sub	sp, #116	; 0x74
 80087c4:	4607      	mov	r7, r0
 80087c6:	460d      	mov	r5, r1
 80087c8:	4614      	mov	r4, r2
 80087ca:	d50e      	bpl.n	80087ea <_svfiprintf_r+0x32>
 80087cc:	690b      	ldr	r3, [r1, #16]
 80087ce:	b963      	cbnz	r3, 80087ea <_svfiprintf_r+0x32>
 80087d0:	2140      	movs	r1, #64	; 0x40
 80087d2:	f7ff fb8f 	bl	8007ef4 <_malloc_r>
 80087d6:	6028      	str	r0, [r5, #0]
 80087d8:	6128      	str	r0, [r5, #16]
 80087da:	b920      	cbnz	r0, 80087e6 <_svfiprintf_r+0x2e>
 80087dc:	230c      	movs	r3, #12
 80087de:	603b      	str	r3, [r7, #0]
 80087e0:	f04f 30ff 	mov.w	r0, #4294967295
 80087e4:	e0d0      	b.n	8008988 <_svfiprintf_r+0x1d0>
 80087e6:	2340      	movs	r3, #64	; 0x40
 80087e8:	616b      	str	r3, [r5, #20]
 80087ea:	2300      	movs	r3, #0
 80087ec:	9309      	str	r3, [sp, #36]	; 0x24
 80087ee:	2320      	movs	r3, #32
 80087f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80087f8:	2330      	movs	r3, #48	; 0x30
 80087fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80089a0 <_svfiprintf_r+0x1e8>
 80087fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008802:	f04f 0901 	mov.w	r9, #1
 8008806:	4623      	mov	r3, r4
 8008808:	469a      	mov	sl, r3
 800880a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800880e:	b10a      	cbz	r2, 8008814 <_svfiprintf_r+0x5c>
 8008810:	2a25      	cmp	r2, #37	; 0x25
 8008812:	d1f9      	bne.n	8008808 <_svfiprintf_r+0x50>
 8008814:	ebba 0b04 	subs.w	fp, sl, r4
 8008818:	d00b      	beq.n	8008832 <_svfiprintf_r+0x7a>
 800881a:	465b      	mov	r3, fp
 800881c:	4622      	mov	r2, r4
 800881e:	4629      	mov	r1, r5
 8008820:	4638      	mov	r0, r7
 8008822:	f7ff ff6f 	bl	8008704 <__ssputs_r>
 8008826:	3001      	adds	r0, #1
 8008828:	f000 80a9 	beq.w	800897e <_svfiprintf_r+0x1c6>
 800882c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800882e:	445a      	add	r2, fp
 8008830:	9209      	str	r2, [sp, #36]	; 0x24
 8008832:	f89a 3000 	ldrb.w	r3, [sl]
 8008836:	2b00      	cmp	r3, #0
 8008838:	f000 80a1 	beq.w	800897e <_svfiprintf_r+0x1c6>
 800883c:	2300      	movs	r3, #0
 800883e:	f04f 32ff 	mov.w	r2, #4294967295
 8008842:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008846:	f10a 0a01 	add.w	sl, sl, #1
 800884a:	9304      	str	r3, [sp, #16]
 800884c:	9307      	str	r3, [sp, #28]
 800884e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008852:	931a      	str	r3, [sp, #104]	; 0x68
 8008854:	4654      	mov	r4, sl
 8008856:	2205      	movs	r2, #5
 8008858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800885c:	4850      	ldr	r0, [pc, #320]	; (80089a0 <_svfiprintf_r+0x1e8>)
 800885e:	f7f7 fcbf 	bl	80001e0 <memchr>
 8008862:	9a04      	ldr	r2, [sp, #16]
 8008864:	b9d8      	cbnz	r0, 800889e <_svfiprintf_r+0xe6>
 8008866:	06d0      	lsls	r0, r2, #27
 8008868:	bf44      	itt	mi
 800886a:	2320      	movmi	r3, #32
 800886c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008870:	0711      	lsls	r1, r2, #28
 8008872:	bf44      	itt	mi
 8008874:	232b      	movmi	r3, #43	; 0x2b
 8008876:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800887a:	f89a 3000 	ldrb.w	r3, [sl]
 800887e:	2b2a      	cmp	r3, #42	; 0x2a
 8008880:	d015      	beq.n	80088ae <_svfiprintf_r+0xf6>
 8008882:	9a07      	ldr	r2, [sp, #28]
 8008884:	4654      	mov	r4, sl
 8008886:	2000      	movs	r0, #0
 8008888:	f04f 0c0a 	mov.w	ip, #10
 800888c:	4621      	mov	r1, r4
 800888e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008892:	3b30      	subs	r3, #48	; 0x30
 8008894:	2b09      	cmp	r3, #9
 8008896:	d94d      	bls.n	8008934 <_svfiprintf_r+0x17c>
 8008898:	b1b0      	cbz	r0, 80088c8 <_svfiprintf_r+0x110>
 800889a:	9207      	str	r2, [sp, #28]
 800889c:	e014      	b.n	80088c8 <_svfiprintf_r+0x110>
 800889e:	eba0 0308 	sub.w	r3, r0, r8
 80088a2:	fa09 f303 	lsl.w	r3, r9, r3
 80088a6:	4313      	orrs	r3, r2
 80088a8:	9304      	str	r3, [sp, #16]
 80088aa:	46a2      	mov	sl, r4
 80088ac:	e7d2      	b.n	8008854 <_svfiprintf_r+0x9c>
 80088ae:	9b03      	ldr	r3, [sp, #12]
 80088b0:	1d19      	adds	r1, r3, #4
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	9103      	str	r1, [sp, #12]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	bfbb      	ittet	lt
 80088ba:	425b      	neglt	r3, r3
 80088bc:	f042 0202 	orrlt.w	r2, r2, #2
 80088c0:	9307      	strge	r3, [sp, #28]
 80088c2:	9307      	strlt	r3, [sp, #28]
 80088c4:	bfb8      	it	lt
 80088c6:	9204      	strlt	r2, [sp, #16]
 80088c8:	7823      	ldrb	r3, [r4, #0]
 80088ca:	2b2e      	cmp	r3, #46	; 0x2e
 80088cc:	d10c      	bne.n	80088e8 <_svfiprintf_r+0x130>
 80088ce:	7863      	ldrb	r3, [r4, #1]
 80088d0:	2b2a      	cmp	r3, #42	; 0x2a
 80088d2:	d134      	bne.n	800893e <_svfiprintf_r+0x186>
 80088d4:	9b03      	ldr	r3, [sp, #12]
 80088d6:	1d1a      	adds	r2, r3, #4
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	9203      	str	r2, [sp, #12]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	bfb8      	it	lt
 80088e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80088e4:	3402      	adds	r4, #2
 80088e6:	9305      	str	r3, [sp, #20]
 80088e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80089b0 <_svfiprintf_r+0x1f8>
 80088ec:	7821      	ldrb	r1, [r4, #0]
 80088ee:	2203      	movs	r2, #3
 80088f0:	4650      	mov	r0, sl
 80088f2:	f7f7 fc75 	bl	80001e0 <memchr>
 80088f6:	b138      	cbz	r0, 8008908 <_svfiprintf_r+0x150>
 80088f8:	9b04      	ldr	r3, [sp, #16]
 80088fa:	eba0 000a 	sub.w	r0, r0, sl
 80088fe:	2240      	movs	r2, #64	; 0x40
 8008900:	4082      	lsls	r2, r0
 8008902:	4313      	orrs	r3, r2
 8008904:	3401      	adds	r4, #1
 8008906:	9304      	str	r3, [sp, #16]
 8008908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800890c:	4825      	ldr	r0, [pc, #148]	; (80089a4 <_svfiprintf_r+0x1ec>)
 800890e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008912:	2206      	movs	r2, #6
 8008914:	f7f7 fc64 	bl	80001e0 <memchr>
 8008918:	2800      	cmp	r0, #0
 800891a:	d038      	beq.n	800898e <_svfiprintf_r+0x1d6>
 800891c:	4b22      	ldr	r3, [pc, #136]	; (80089a8 <_svfiprintf_r+0x1f0>)
 800891e:	bb1b      	cbnz	r3, 8008968 <_svfiprintf_r+0x1b0>
 8008920:	9b03      	ldr	r3, [sp, #12]
 8008922:	3307      	adds	r3, #7
 8008924:	f023 0307 	bic.w	r3, r3, #7
 8008928:	3308      	adds	r3, #8
 800892a:	9303      	str	r3, [sp, #12]
 800892c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800892e:	4433      	add	r3, r6
 8008930:	9309      	str	r3, [sp, #36]	; 0x24
 8008932:	e768      	b.n	8008806 <_svfiprintf_r+0x4e>
 8008934:	fb0c 3202 	mla	r2, ip, r2, r3
 8008938:	460c      	mov	r4, r1
 800893a:	2001      	movs	r0, #1
 800893c:	e7a6      	b.n	800888c <_svfiprintf_r+0xd4>
 800893e:	2300      	movs	r3, #0
 8008940:	3401      	adds	r4, #1
 8008942:	9305      	str	r3, [sp, #20]
 8008944:	4619      	mov	r1, r3
 8008946:	f04f 0c0a 	mov.w	ip, #10
 800894a:	4620      	mov	r0, r4
 800894c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008950:	3a30      	subs	r2, #48	; 0x30
 8008952:	2a09      	cmp	r2, #9
 8008954:	d903      	bls.n	800895e <_svfiprintf_r+0x1a6>
 8008956:	2b00      	cmp	r3, #0
 8008958:	d0c6      	beq.n	80088e8 <_svfiprintf_r+0x130>
 800895a:	9105      	str	r1, [sp, #20]
 800895c:	e7c4      	b.n	80088e8 <_svfiprintf_r+0x130>
 800895e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008962:	4604      	mov	r4, r0
 8008964:	2301      	movs	r3, #1
 8008966:	e7f0      	b.n	800894a <_svfiprintf_r+0x192>
 8008968:	ab03      	add	r3, sp, #12
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	462a      	mov	r2, r5
 800896e:	4b0f      	ldr	r3, [pc, #60]	; (80089ac <_svfiprintf_r+0x1f4>)
 8008970:	a904      	add	r1, sp, #16
 8008972:	4638      	mov	r0, r7
 8008974:	f7fd fe54 	bl	8006620 <_printf_float>
 8008978:	1c42      	adds	r2, r0, #1
 800897a:	4606      	mov	r6, r0
 800897c:	d1d6      	bne.n	800892c <_svfiprintf_r+0x174>
 800897e:	89ab      	ldrh	r3, [r5, #12]
 8008980:	065b      	lsls	r3, r3, #25
 8008982:	f53f af2d 	bmi.w	80087e0 <_svfiprintf_r+0x28>
 8008986:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008988:	b01d      	add	sp, #116	; 0x74
 800898a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800898e:	ab03      	add	r3, sp, #12
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	462a      	mov	r2, r5
 8008994:	4b05      	ldr	r3, [pc, #20]	; (80089ac <_svfiprintf_r+0x1f4>)
 8008996:	a904      	add	r1, sp, #16
 8008998:	4638      	mov	r0, r7
 800899a:	f7fe f8e5 	bl	8006b68 <_printf_i>
 800899e:	e7eb      	b.n	8008978 <_svfiprintf_r+0x1c0>
 80089a0:	0800ae64 	.word	0x0800ae64
 80089a4:	0800ae6e 	.word	0x0800ae6e
 80089a8:	08006621 	.word	0x08006621
 80089ac:	08008705 	.word	0x08008705
 80089b0:	0800ae6a 	.word	0x0800ae6a

080089b4 <__sflush_r>:
 80089b4:	898a      	ldrh	r2, [r1, #12]
 80089b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ba:	4605      	mov	r5, r0
 80089bc:	0710      	lsls	r0, r2, #28
 80089be:	460c      	mov	r4, r1
 80089c0:	d458      	bmi.n	8008a74 <__sflush_r+0xc0>
 80089c2:	684b      	ldr	r3, [r1, #4]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	dc05      	bgt.n	80089d4 <__sflush_r+0x20>
 80089c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	dc02      	bgt.n	80089d4 <__sflush_r+0x20>
 80089ce:	2000      	movs	r0, #0
 80089d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089d6:	2e00      	cmp	r6, #0
 80089d8:	d0f9      	beq.n	80089ce <__sflush_r+0x1a>
 80089da:	2300      	movs	r3, #0
 80089dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80089e0:	682f      	ldr	r7, [r5, #0]
 80089e2:	6a21      	ldr	r1, [r4, #32]
 80089e4:	602b      	str	r3, [r5, #0]
 80089e6:	d032      	beq.n	8008a4e <__sflush_r+0x9a>
 80089e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80089ea:	89a3      	ldrh	r3, [r4, #12]
 80089ec:	075a      	lsls	r2, r3, #29
 80089ee:	d505      	bpl.n	80089fc <__sflush_r+0x48>
 80089f0:	6863      	ldr	r3, [r4, #4]
 80089f2:	1ac0      	subs	r0, r0, r3
 80089f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089f6:	b10b      	cbz	r3, 80089fc <__sflush_r+0x48>
 80089f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089fa:	1ac0      	subs	r0, r0, r3
 80089fc:	2300      	movs	r3, #0
 80089fe:	4602      	mov	r2, r0
 8008a00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a02:	6a21      	ldr	r1, [r4, #32]
 8008a04:	4628      	mov	r0, r5
 8008a06:	47b0      	blx	r6
 8008a08:	1c43      	adds	r3, r0, #1
 8008a0a:	89a3      	ldrh	r3, [r4, #12]
 8008a0c:	d106      	bne.n	8008a1c <__sflush_r+0x68>
 8008a0e:	6829      	ldr	r1, [r5, #0]
 8008a10:	291d      	cmp	r1, #29
 8008a12:	d82b      	bhi.n	8008a6c <__sflush_r+0xb8>
 8008a14:	4a29      	ldr	r2, [pc, #164]	; (8008abc <__sflush_r+0x108>)
 8008a16:	410a      	asrs	r2, r1
 8008a18:	07d6      	lsls	r6, r2, #31
 8008a1a:	d427      	bmi.n	8008a6c <__sflush_r+0xb8>
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	6062      	str	r2, [r4, #4]
 8008a20:	04d9      	lsls	r1, r3, #19
 8008a22:	6922      	ldr	r2, [r4, #16]
 8008a24:	6022      	str	r2, [r4, #0]
 8008a26:	d504      	bpl.n	8008a32 <__sflush_r+0x7e>
 8008a28:	1c42      	adds	r2, r0, #1
 8008a2a:	d101      	bne.n	8008a30 <__sflush_r+0x7c>
 8008a2c:	682b      	ldr	r3, [r5, #0]
 8008a2e:	b903      	cbnz	r3, 8008a32 <__sflush_r+0x7e>
 8008a30:	6560      	str	r0, [r4, #84]	; 0x54
 8008a32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a34:	602f      	str	r7, [r5, #0]
 8008a36:	2900      	cmp	r1, #0
 8008a38:	d0c9      	beq.n	80089ce <__sflush_r+0x1a>
 8008a3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a3e:	4299      	cmp	r1, r3
 8008a40:	d002      	beq.n	8008a48 <__sflush_r+0x94>
 8008a42:	4628      	mov	r0, r5
 8008a44:	f7ff f9e2 	bl	8007e0c <_free_r>
 8008a48:	2000      	movs	r0, #0
 8008a4a:	6360      	str	r0, [r4, #52]	; 0x34
 8008a4c:	e7c0      	b.n	80089d0 <__sflush_r+0x1c>
 8008a4e:	2301      	movs	r3, #1
 8008a50:	4628      	mov	r0, r5
 8008a52:	47b0      	blx	r6
 8008a54:	1c41      	adds	r1, r0, #1
 8008a56:	d1c8      	bne.n	80089ea <__sflush_r+0x36>
 8008a58:	682b      	ldr	r3, [r5, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d0c5      	beq.n	80089ea <__sflush_r+0x36>
 8008a5e:	2b1d      	cmp	r3, #29
 8008a60:	d001      	beq.n	8008a66 <__sflush_r+0xb2>
 8008a62:	2b16      	cmp	r3, #22
 8008a64:	d101      	bne.n	8008a6a <__sflush_r+0xb6>
 8008a66:	602f      	str	r7, [r5, #0]
 8008a68:	e7b1      	b.n	80089ce <__sflush_r+0x1a>
 8008a6a:	89a3      	ldrh	r3, [r4, #12]
 8008a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a70:	81a3      	strh	r3, [r4, #12]
 8008a72:	e7ad      	b.n	80089d0 <__sflush_r+0x1c>
 8008a74:	690f      	ldr	r7, [r1, #16]
 8008a76:	2f00      	cmp	r7, #0
 8008a78:	d0a9      	beq.n	80089ce <__sflush_r+0x1a>
 8008a7a:	0793      	lsls	r3, r2, #30
 8008a7c:	680e      	ldr	r6, [r1, #0]
 8008a7e:	bf08      	it	eq
 8008a80:	694b      	ldreq	r3, [r1, #20]
 8008a82:	600f      	str	r7, [r1, #0]
 8008a84:	bf18      	it	ne
 8008a86:	2300      	movne	r3, #0
 8008a88:	eba6 0807 	sub.w	r8, r6, r7
 8008a8c:	608b      	str	r3, [r1, #8]
 8008a8e:	f1b8 0f00 	cmp.w	r8, #0
 8008a92:	dd9c      	ble.n	80089ce <__sflush_r+0x1a>
 8008a94:	6a21      	ldr	r1, [r4, #32]
 8008a96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a98:	4643      	mov	r3, r8
 8008a9a:	463a      	mov	r2, r7
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	47b0      	blx	r6
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	dc06      	bgt.n	8008ab2 <__sflush_r+0xfe>
 8008aa4:	89a3      	ldrh	r3, [r4, #12]
 8008aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aaa:	81a3      	strh	r3, [r4, #12]
 8008aac:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab0:	e78e      	b.n	80089d0 <__sflush_r+0x1c>
 8008ab2:	4407      	add	r7, r0
 8008ab4:	eba8 0800 	sub.w	r8, r8, r0
 8008ab8:	e7e9      	b.n	8008a8e <__sflush_r+0xda>
 8008aba:	bf00      	nop
 8008abc:	dfbffffe 	.word	0xdfbffffe

08008ac0 <_fflush_r>:
 8008ac0:	b538      	push	{r3, r4, r5, lr}
 8008ac2:	690b      	ldr	r3, [r1, #16]
 8008ac4:	4605      	mov	r5, r0
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	b913      	cbnz	r3, 8008ad0 <_fflush_r+0x10>
 8008aca:	2500      	movs	r5, #0
 8008acc:	4628      	mov	r0, r5
 8008ace:	bd38      	pop	{r3, r4, r5, pc}
 8008ad0:	b118      	cbz	r0, 8008ada <_fflush_r+0x1a>
 8008ad2:	6a03      	ldr	r3, [r0, #32]
 8008ad4:	b90b      	cbnz	r3, 8008ada <_fflush_r+0x1a>
 8008ad6:	f7fe f9f5 	bl	8006ec4 <__sinit>
 8008ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d0f3      	beq.n	8008aca <_fflush_r+0xa>
 8008ae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ae4:	07d0      	lsls	r0, r2, #31
 8008ae6:	d404      	bmi.n	8008af2 <_fflush_r+0x32>
 8008ae8:	0599      	lsls	r1, r3, #22
 8008aea:	d402      	bmi.n	8008af2 <_fflush_r+0x32>
 8008aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008aee:	f7fe fb00 	bl	80070f2 <__retarget_lock_acquire_recursive>
 8008af2:	4628      	mov	r0, r5
 8008af4:	4621      	mov	r1, r4
 8008af6:	f7ff ff5d 	bl	80089b4 <__sflush_r>
 8008afa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008afc:	07da      	lsls	r2, r3, #31
 8008afe:	4605      	mov	r5, r0
 8008b00:	d4e4      	bmi.n	8008acc <_fflush_r+0xc>
 8008b02:	89a3      	ldrh	r3, [r4, #12]
 8008b04:	059b      	lsls	r3, r3, #22
 8008b06:	d4e1      	bmi.n	8008acc <_fflush_r+0xc>
 8008b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b0a:	f7fe faf3 	bl	80070f4 <__retarget_lock_release_recursive>
 8008b0e:	e7dd      	b.n	8008acc <_fflush_r+0xc>

08008b10 <memmove>:
 8008b10:	4288      	cmp	r0, r1
 8008b12:	b510      	push	{r4, lr}
 8008b14:	eb01 0402 	add.w	r4, r1, r2
 8008b18:	d902      	bls.n	8008b20 <memmove+0x10>
 8008b1a:	4284      	cmp	r4, r0
 8008b1c:	4623      	mov	r3, r4
 8008b1e:	d807      	bhi.n	8008b30 <memmove+0x20>
 8008b20:	1e43      	subs	r3, r0, #1
 8008b22:	42a1      	cmp	r1, r4
 8008b24:	d008      	beq.n	8008b38 <memmove+0x28>
 8008b26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b2e:	e7f8      	b.n	8008b22 <memmove+0x12>
 8008b30:	4402      	add	r2, r0
 8008b32:	4601      	mov	r1, r0
 8008b34:	428a      	cmp	r2, r1
 8008b36:	d100      	bne.n	8008b3a <memmove+0x2a>
 8008b38:	bd10      	pop	{r4, pc}
 8008b3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b42:	e7f7      	b.n	8008b34 <memmove+0x24>

08008b44 <_sbrk_r>:
 8008b44:	b538      	push	{r3, r4, r5, lr}
 8008b46:	4d06      	ldr	r5, [pc, #24]	; (8008b60 <_sbrk_r+0x1c>)
 8008b48:	2300      	movs	r3, #0
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	4608      	mov	r0, r1
 8008b4e:	602b      	str	r3, [r5, #0]
 8008b50:	f7f9 fc7e 	bl	8002450 <_sbrk>
 8008b54:	1c43      	adds	r3, r0, #1
 8008b56:	d102      	bne.n	8008b5e <_sbrk_r+0x1a>
 8008b58:	682b      	ldr	r3, [r5, #0]
 8008b5a:	b103      	cbz	r3, 8008b5e <_sbrk_r+0x1a>
 8008b5c:	6023      	str	r3, [r4, #0]
 8008b5e:	bd38      	pop	{r3, r4, r5, pc}
 8008b60:	200008f8 	.word	0x200008f8

08008b64 <__assert_func>:
 8008b64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b66:	4614      	mov	r4, r2
 8008b68:	461a      	mov	r2, r3
 8008b6a:	4b09      	ldr	r3, [pc, #36]	; (8008b90 <__assert_func+0x2c>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4605      	mov	r5, r0
 8008b70:	68d8      	ldr	r0, [r3, #12]
 8008b72:	b14c      	cbz	r4, 8008b88 <__assert_func+0x24>
 8008b74:	4b07      	ldr	r3, [pc, #28]	; (8008b94 <__assert_func+0x30>)
 8008b76:	9100      	str	r1, [sp, #0]
 8008b78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b7c:	4906      	ldr	r1, [pc, #24]	; (8008b98 <__assert_func+0x34>)
 8008b7e:	462b      	mov	r3, r5
 8008b80:	f000 f872 	bl	8008c68 <fiprintf>
 8008b84:	f000 f882 	bl	8008c8c <abort>
 8008b88:	4b04      	ldr	r3, [pc, #16]	; (8008b9c <__assert_func+0x38>)
 8008b8a:	461c      	mov	r4, r3
 8008b8c:	e7f3      	b.n	8008b76 <__assert_func+0x12>
 8008b8e:	bf00      	nop
 8008b90:	200000c0 	.word	0x200000c0
 8008b94:	0800ae7f 	.word	0x0800ae7f
 8008b98:	0800ae8c 	.word	0x0800ae8c
 8008b9c:	0800aeba 	.word	0x0800aeba

08008ba0 <_calloc_r>:
 8008ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ba2:	fba1 2402 	umull	r2, r4, r1, r2
 8008ba6:	b94c      	cbnz	r4, 8008bbc <_calloc_r+0x1c>
 8008ba8:	4611      	mov	r1, r2
 8008baa:	9201      	str	r2, [sp, #4]
 8008bac:	f7ff f9a2 	bl	8007ef4 <_malloc_r>
 8008bb0:	9a01      	ldr	r2, [sp, #4]
 8008bb2:	4605      	mov	r5, r0
 8008bb4:	b930      	cbnz	r0, 8008bc4 <_calloc_r+0x24>
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	b003      	add	sp, #12
 8008bba:	bd30      	pop	{r4, r5, pc}
 8008bbc:	220c      	movs	r2, #12
 8008bbe:	6002      	str	r2, [r0, #0]
 8008bc0:	2500      	movs	r5, #0
 8008bc2:	e7f8      	b.n	8008bb6 <_calloc_r+0x16>
 8008bc4:	4621      	mov	r1, r4
 8008bc6:	f7fe fa16 	bl	8006ff6 <memset>
 8008bca:	e7f4      	b.n	8008bb6 <_calloc_r+0x16>

08008bcc <__ascii_mbtowc>:
 8008bcc:	b082      	sub	sp, #8
 8008bce:	b901      	cbnz	r1, 8008bd2 <__ascii_mbtowc+0x6>
 8008bd0:	a901      	add	r1, sp, #4
 8008bd2:	b142      	cbz	r2, 8008be6 <__ascii_mbtowc+0x1a>
 8008bd4:	b14b      	cbz	r3, 8008bea <__ascii_mbtowc+0x1e>
 8008bd6:	7813      	ldrb	r3, [r2, #0]
 8008bd8:	600b      	str	r3, [r1, #0]
 8008bda:	7812      	ldrb	r2, [r2, #0]
 8008bdc:	1e10      	subs	r0, r2, #0
 8008bde:	bf18      	it	ne
 8008be0:	2001      	movne	r0, #1
 8008be2:	b002      	add	sp, #8
 8008be4:	4770      	bx	lr
 8008be6:	4610      	mov	r0, r2
 8008be8:	e7fb      	b.n	8008be2 <__ascii_mbtowc+0x16>
 8008bea:	f06f 0001 	mvn.w	r0, #1
 8008bee:	e7f8      	b.n	8008be2 <__ascii_mbtowc+0x16>

08008bf0 <_realloc_r>:
 8008bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf4:	4680      	mov	r8, r0
 8008bf6:	4614      	mov	r4, r2
 8008bf8:	460e      	mov	r6, r1
 8008bfa:	b921      	cbnz	r1, 8008c06 <_realloc_r+0x16>
 8008bfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c00:	4611      	mov	r1, r2
 8008c02:	f7ff b977 	b.w	8007ef4 <_malloc_r>
 8008c06:	b92a      	cbnz	r2, 8008c14 <_realloc_r+0x24>
 8008c08:	f7ff f900 	bl	8007e0c <_free_r>
 8008c0c:	4625      	mov	r5, r4
 8008c0e:	4628      	mov	r0, r5
 8008c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c14:	f000 f841 	bl	8008c9a <_malloc_usable_size_r>
 8008c18:	4284      	cmp	r4, r0
 8008c1a:	4607      	mov	r7, r0
 8008c1c:	d802      	bhi.n	8008c24 <_realloc_r+0x34>
 8008c1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c22:	d812      	bhi.n	8008c4a <_realloc_r+0x5a>
 8008c24:	4621      	mov	r1, r4
 8008c26:	4640      	mov	r0, r8
 8008c28:	f7ff f964 	bl	8007ef4 <_malloc_r>
 8008c2c:	4605      	mov	r5, r0
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	d0ed      	beq.n	8008c0e <_realloc_r+0x1e>
 8008c32:	42bc      	cmp	r4, r7
 8008c34:	4622      	mov	r2, r4
 8008c36:	4631      	mov	r1, r6
 8008c38:	bf28      	it	cs
 8008c3a:	463a      	movcs	r2, r7
 8008c3c:	f7fe fa5b 	bl	80070f6 <memcpy>
 8008c40:	4631      	mov	r1, r6
 8008c42:	4640      	mov	r0, r8
 8008c44:	f7ff f8e2 	bl	8007e0c <_free_r>
 8008c48:	e7e1      	b.n	8008c0e <_realloc_r+0x1e>
 8008c4a:	4635      	mov	r5, r6
 8008c4c:	e7df      	b.n	8008c0e <_realloc_r+0x1e>

08008c4e <__ascii_wctomb>:
 8008c4e:	b149      	cbz	r1, 8008c64 <__ascii_wctomb+0x16>
 8008c50:	2aff      	cmp	r2, #255	; 0xff
 8008c52:	bf85      	ittet	hi
 8008c54:	238a      	movhi	r3, #138	; 0x8a
 8008c56:	6003      	strhi	r3, [r0, #0]
 8008c58:	700a      	strbls	r2, [r1, #0]
 8008c5a:	f04f 30ff 	movhi.w	r0, #4294967295
 8008c5e:	bf98      	it	ls
 8008c60:	2001      	movls	r0, #1
 8008c62:	4770      	bx	lr
 8008c64:	4608      	mov	r0, r1
 8008c66:	4770      	bx	lr

08008c68 <fiprintf>:
 8008c68:	b40e      	push	{r1, r2, r3}
 8008c6a:	b503      	push	{r0, r1, lr}
 8008c6c:	4601      	mov	r1, r0
 8008c6e:	ab03      	add	r3, sp, #12
 8008c70:	4805      	ldr	r0, [pc, #20]	; (8008c88 <fiprintf+0x20>)
 8008c72:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c76:	6800      	ldr	r0, [r0, #0]
 8008c78:	9301      	str	r3, [sp, #4]
 8008c7a:	f000 f83f 	bl	8008cfc <_vfiprintf_r>
 8008c7e:	b002      	add	sp, #8
 8008c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c84:	b003      	add	sp, #12
 8008c86:	4770      	bx	lr
 8008c88:	200000c0 	.word	0x200000c0

08008c8c <abort>:
 8008c8c:	b508      	push	{r3, lr}
 8008c8e:	2006      	movs	r0, #6
 8008c90:	f000 fa0c 	bl	80090ac <raise>
 8008c94:	2001      	movs	r0, #1
 8008c96:	f7f9 fb63 	bl	8002360 <_exit>

08008c9a <_malloc_usable_size_r>:
 8008c9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c9e:	1f18      	subs	r0, r3, #4
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	bfbc      	itt	lt
 8008ca4:	580b      	ldrlt	r3, [r1, r0]
 8008ca6:	18c0      	addlt	r0, r0, r3
 8008ca8:	4770      	bx	lr

08008caa <__sfputc_r>:
 8008caa:	6893      	ldr	r3, [r2, #8]
 8008cac:	3b01      	subs	r3, #1
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	b410      	push	{r4}
 8008cb2:	6093      	str	r3, [r2, #8]
 8008cb4:	da08      	bge.n	8008cc8 <__sfputc_r+0x1e>
 8008cb6:	6994      	ldr	r4, [r2, #24]
 8008cb8:	42a3      	cmp	r3, r4
 8008cba:	db01      	blt.n	8008cc0 <__sfputc_r+0x16>
 8008cbc:	290a      	cmp	r1, #10
 8008cbe:	d103      	bne.n	8008cc8 <__sfputc_r+0x1e>
 8008cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cc4:	f000 b934 	b.w	8008f30 <__swbuf_r>
 8008cc8:	6813      	ldr	r3, [r2, #0]
 8008cca:	1c58      	adds	r0, r3, #1
 8008ccc:	6010      	str	r0, [r2, #0]
 8008cce:	7019      	strb	r1, [r3, #0]
 8008cd0:	4608      	mov	r0, r1
 8008cd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <__sfputs_r>:
 8008cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cda:	4606      	mov	r6, r0
 8008cdc:	460f      	mov	r7, r1
 8008cde:	4614      	mov	r4, r2
 8008ce0:	18d5      	adds	r5, r2, r3
 8008ce2:	42ac      	cmp	r4, r5
 8008ce4:	d101      	bne.n	8008cea <__sfputs_r+0x12>
 8008ce6:	2000      	movs	r0, #0
 8008ce8:	e007      	b.n	8008cfa <__sfputs_r+0x22>
 8008cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cee:	463a      	mov	r2, r7
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	f7ff ffda 	bl	8008caa <__sfputc_r>
 8008cf6:	1c43      	adds	r3, r0, #1
 8008cf8:	d1f3      	bne.n	8008ce2 <__sfputs_r+0xa>
 8008cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008cfc <_vfiprintf_r>:
 8008cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d00:	460d      	mov	r5, r1
 8008d02:	b09d      	sub	sp, #116	; 0x74
 8008d04:	4614      	mov	r4, r2
 8008d06:	4698      	mov	r8, r3
 8008d08:	4606      	mov	r6, r0
 8008d0a:	b118      	cbz	r0, 8008d14 <_vfiprintf_r+0x18>
 8008d0c:	6a03      	ldr	r3, [r0, #32]
 8008d0e:	b90b      	cbnz	r3, 8008d14 <_vfiprintf_r+0x18>
 8008d10:	f7fe f8d8 	bl	8006ec4 <__sinit>
 8008d14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d16:	07d9      	lsls	r1, r3, #31
 8008d18:	d405      	bmi.n	8008d26 <_vfiprintf_r+0x2a>
 8008d1a:	89ab      	ldrh	r3, [r5, #12]
 8008d1c:	059a      	lsls	r2, r3, #22
 8008d1e:	d402      	bmi.n	8008d26 <_vfiprintf_r+0x2a>
 8008d20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d22:	f7fe f9e6 	bl	80070f2 <__retarget_lock_acquire_recursive>
 8008d26:	89ab      	ldrh	r3, [r5, #12]
 8008d28:	071b      	lsls	r3, r3, #28
 8008d2a:	d501      	bpl.n	8008d30 <_vfiprintf_r+0x34>
 8008d2c:	692b      	ldr	r3, [r5, #16]
 8008d2e:	b99b      	cbnz	r3, 8008d58 <_vfiprintf_r+0x5c>
 8008d30:	4629      	mov	r1, r5
 8008d32:	4630      	mov	r0, r6
 8008d34:	f000 f93a 	bl	8008fac <__swsetup_r>
 8008d38:	b170      	cbz	r0, 8008d58 <_vfiprintf_r+0x5c>
 8008d3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d3c:	07dc      	lsls	r4, r3, #31
 8008d3e:	d504      	bpl.n	8008d4a <_vfiprintf_r+0x4e>
 8008d40:	f04f 30ff 	mov.w	r0, #4294967295
 8008d44:	b01d      	add	sp, #116	; 0x74
 8008d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d4a:	89ab      	ldrh	r3, [r5, #12]
 8008d4c:	0598      	lsls	r0, r3, #22
 8008d4e:	d4f7      	bmi.n	8008d40 <_vfiprintf_r+0x44>
 8008d50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d52:	f7fe f9cf 	bl	80070f4 <__retarget_lock_release_recursive>
 8008d56:	e7f3      	b.n	8008d40 <_vfiprintf_r+0x44>
 8008d58:	2300      	movs	r3, #0
 8008d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8008d5c:	2320      	movs	r3, #32
 8008d5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d62:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d66:	2330      	movs	r3, #48	; 0x30
 8008d68:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008f1c <_vfiprintf_r+0x220>
 8008d6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d70:	f04f 0901 	mov.w	r9, #1
 8008d74:	4623      	mov	r3, r4
 8008d76:	469a      	mov	sl, r3
 8008d78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d7c:	b10a      	cbz	r2, 8008d82 <_vfiprintf_r+0x86>
 8008d7e:	2a25      	cmp	r2, #37	; 0x25
 8008d80:	d1f9      	bne.n	8008d76 <_vfiprintf_r+0x7a>
 8008d82:	ebba 0b04 	subs.w	fp, sl, r4
 8008d86:	d00b      	beq.n	8008da0 <_vfiprintf_r+0xa4>
 8008d88:	465b      	mov	r3, fp
 8008d8a:	4622      	mov	r2, r4
 8008d8c:	4629      	mov	r1, r5
 8008d8e:	4630      	mov	r0, r6
 8008d90:	f7ff ffa2 	bl	8008cd8 <__sfputs_r>
 8008d94:	3001      	adds	r0, #1
 8008d96:	f000 80a9 	beq.w	8008eec <_vfiprintf_r+0x1f0>
 8008d9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d9c:	445a      	add	r2, fp
 8008d9e:	9209      	str	r2, [sp, #36]	; 0x24
 8008da0:	f89a 3000 	ldrb.w	r3, [sl]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f000 80a1 	beq.w	8008eec <_vfiprintf_r+0x1f0>
 8008daa:	2300      	movs	r3, #0
 8008dac:	f04f 32ff 	mov.w	r2, #4294967295
 8008db0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008db4:	f10a 0a01 	add.w	sl, sl, #1
 8008db8:	9304      	str	r3, [sp, #16]
 8008dba:	9307      	str	r3, [sp, #28]
 8008dbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008dc0:	931a      	str	r3, [sp, #104]	; 0x68
 8008dc2:	4654      	mov	r4, sl
 8008dc4:	2205      	movs	r2, #5
 8008dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dca:	4854      	ldr	r0, [pc, #336]	; (8008f1c <_vfiprintf_r+0x220>)
 8008dcc:	f7f7 fa08 	bl	80001e0 <memchr>
 8008dd0:	9a04      	ldr	r2, [sp, #16]
 8008dd2:	b9d8      	cbnz	r0, 8008e0c <_vfiprintf_r+0x110>
 8008dd4:	06d1      	lsls	r1, r2, #27
 8008dd6:	bf44      	itt	mi
 8008dd8:	2320      	movmi	r3, #32
 8008dda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dde:	0713      	lsls	r3, r2, #28
 8008de0:	bf44      	itt	mi
 8008de2:	232b      	movmi	r3, #43	; 0x2b
 8008de4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008de8:	f89a 3000 	ldrb.w	r3, [sl]
 8008dec:	2b2a      	cmp	r3, #42	; 0x2a
 8008dee:	d015      	beq.n	8008e1c <_vfiprintf_r+0x120>
 8008df0:	9a07      	ldr	r2, [sp, #28]
 8008df2:	4654      	mov	r4, sl
 8008df4:	2000      	movs	r0, #0
 8008df6:	f04f 0c0a 	mov.w	ip, #10
 8008dfa:	4621      	mov	r1, r4
 8008dfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e00:	3b30      	subs	r3, #48	; 0x30
 8008e02:	2b09      	cmp	r3, #9
 8008e04:	d94d      	bls.n	8008ea2 <_vfiprintf_r+0x1a6>
 8008e06:	b1b0      	cbz	r0, 8008e36 <_vfiprintf_r+0x13a>
 8008e08:	9207      	str	r2, [sp, #28]
 8008e0a:	e014      	b.n	8008e36 <_vfiprintf_r+0x13a>
 8008e0c:	eba0 0308 	sub.w	r3, r0, r8
 8008e10:	fa09 f303 	lsl.w	r3, r9, r3
 8008e14:	4313      	orrs	r3, r2
 8008e16:	9304      	str	r3, [sp, #16]
 8008e18:	46a2      	mov	sl, r4
 8008e1a:	e7d2      	b.n	8008dc2 <_vfiprintf_r+0xc6>
 8008e1c:	9b03      	ldr	r3, [sp, #12]
 8008e1e:	1d19      	adds	r1, r3, #4
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	9103      	str	r1, [sp, #12]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	bfbb      	ittet	lt
 8008e28:	425b      	neglt	r3, r3
 8008e2a:	f042 0202 	orrlt.w	r2, r2, #2
 8008e2e:	9307      	strge	r3, [sp, #28]
 8008e30:	9307      	strlt	r3, [sp, #28]
 8008e32:	bfb8      	it	lt
 8008e34:	9204      	strlt	r2, [sp, #16]
 8008e36:	7823      	ldrb	r3, [r4, #0]
 8008e38:	2b2e      	cmp	r3, #46	; 0x2e
 8008e3a:	d10c      	bne.n	8008e56 <_vfiprintf_r+0x15a>
 8008e3c:	7863      	ldrb	r3, [r4, #1]
 8008e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8008e40:	d134      	bne.n	8008eac <_vfiprintf_r+0x1b0>
 8008e42:	9b03      	ldr	r3, [sp, #12]
 8008e44:	1d1a      	adds	r2, r3, #4
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	9203      	str	r2, [sp, #12]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	bfb8      	it	lt
 8008e4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e52:	3402      	adds	r4, #2
 8008e54:	9305      	str	r3, [sp, #20]
 8008e56:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008f2c <_vfiprintf_r+0x230>
 8008e5a:	7821      	ldrb	r1, [r4, #0]
 8008e5c:	2203      	movs	r2, #3
 8008e5e:	4650      	mov	r0, sl
 8008e60:	f7f7 f9be 	bl	80001e0 <memchr>
 8008e64:	b138      	cbz	r0, 8008e76 <_vfiprintf_r+0x17a>
 8008e66:	9b04      	ldr	r3, [sp, #16]
 8008e68:	eba0 000a 	sub.w	r0, r0, sl
 8008e6c:	2240      	movs	r2, #64	; 0x40
 8008e6e:	4082      	lsls	r2, r0
 8008e70:	4313      	orrs	r3, r2
 8008e72:	3401      	adds	r4, #1
 8008e74:	9304      	str	r3, [sp, #16]
 8008e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e7a:	4829      	ldr	r0, [pc, #164]	; (8008f20 <_vfiprintf_r+0x224>)
 8008e7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e80:	2206      	movs	r2, #6
 8008e82:	f7f7 f9ad 	bl	80001e0 <memchr>
 8008e86:	2800      	cmp	r0, #0
 8008e88:	d03f      	beq.n	8008f0a <_vfiprintf_r+0x20e>
 8008e8a:	4b26      	ldr	r3, [pc, #152]	; (8008f24 <_vfiprintf_r+0x228>)
 8008e8c:	bb1b      	cbnz	r3, 8008ed6 <_vfiprintf_r+0x1da>
 8008e8e:	9b03      	ldr	r3, [sp, #12]
 8008e90:	3307      	adds	r3, #7
 8008e92:	f023 0307 	bic.w	r3, r3, #7
 8008e96:	3308      	adds	r3, #8
 8008e98:	9303      	str	r3, [sp, #12]
 8008e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e9c:	443b      	add	r3, r7
 8008e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8008ea0:	e768      	b.n	8008d74 <_vfiprintf_r+0x78>
 8008ea2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ea6:	460c      	mov	r4, r1
 8008ea8:	2001      	movs	r0, #1
 8008eaa:	e7a6      	b.n	8008dfa <_vfiprintf_r+0xfe>
 8008eac:	2300      	movs	r3, #0
 8008eae:	3401      	adds	r4, #1
 8008eb0:	9305      	str	r3, [sp, #20]
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	f04f 0c0a 	mov.w	ip, #10
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ebe:	3a30      	subs	r2, #48	; 0x30
 8008ec0:	2a09      	cmp	r2, #9
 8008ec2:	d903      	bls.n	8008ecc <_vfiprintf_r+0x1d0>
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d0c6      	beq.n	8008e56 <_vfiprintf_r+0x15a>
 8008ec8:	9105      	str	r1, [sp, #20]
 8008eca:	e7c4      	b.n	8008e56 <_vfiprintf_r+0x15a>
 8008ecc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e7f0      	b.n	8008eb8 <_vfiprintf_r+0x1bc>
 8008ed6:	ab03      	add	r3, sp, #12
 8008ed8:	9300      	str	r3, [sp, #0]
 8008eda:	462a      	mov	r2, r5
 8008edc:	4b12      	ldr	r3, [pc, #72]	; (8008f28 <_vfiprintf_r+0x22c>)
 8008ede:	a904      	add	r1, sp, #16
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	f7fd fb9d 	bl	8006620 <_printf_float>
 8008ee6:	4607      	mov	r7, r0
 8008ee8:	1c78      	adds	r0, r7, #1
 8008eea:	d1d6      	bne.n	8008e9a <_vfiprintf_r+0x19e>
 8008eec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008eee:	07d9      	lsls	r1, r3, #31
 8008ef0:	d405      	bmi.n	8008efe <_vfiprintf_r+0x202>
 8008ef2:	89ab      	ldrh	r3, [r5, #12]
 8008ef4:	059a      	lsls	r2, r3, #22
 8008ef6:	d402      	bmi.n	8008efe <_vfiprintf_r+0x202>
 8008ef8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008efa:	f7fe f8fb 	bl	80070f4 <__retarget_lock_release_recursive>
 8008efe:	89ab      	ldrh	r3, [r5, #12]
 8008f00:	065b      	lsls	r3, r3, #25
 8008f02:	f53f af1d 	bmi.w	8008d40 <_vfiprintf_r+0x44>
 8008f06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f08:	e71c      	b.n	8008d44 <_vfiprintf_r+0x48>
 8008f0a:	ab03      	add	r3, sp, #12
 8008f0c:	9300      	str	r3, [sp, #0]
 8008f0e:	462a      	mov	r2, r5
 8008f10:	4b05      	ldr	r3, [pc, #20]	; (8008f28 <_vfiprintf_r+0x22c>)
 8008f12:	a904      	add	r1, sp, #16
 8008f14:	4630      	mov	r0, r6
 8008f16:	f7fd fe27 	bl	8006b68 <_printf_i>
 8008f1a:	e7e4      	b.n	8008ee6 <_vfiprintf_r+0x1ea>
 8008f1c:	0800ae64 	.word	0x0800ae64
 8008f20:	0800ae6e 	.word	0x0800ae6e
 8008f24:	08006621 	.word	0x08006621
 8008f28:	08008cd9 	.word	0x08008cd9
 8008f2c:	0800ae6a 	.word	0x0800ae6a

08008f30 <__swbuf_r>:
 8008f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f32:	460e      	mov	r6, r1
 8008f34:	4614      	mov	r4, r2
 8008f36:	4605      	mov	r5, r0
 8008f38:	b118      	cbz	r0, 8008f42 <__swbuf_r+0x12>
 8008f3a:	6a03      	ldr	r3, [r0, #32]
 8008f3c:	b90b      	cbnz	r3, 8008f42 <__swbuf_r+0x12>
 8008f3e:	f7fd ffc1 	bl	8006ec4 <__sinit>
 8008f42:	69a3      	ldr	r3, [r4, #24]
 8008f44:	60a3      	str	r3, [r4, #8]
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	071a      	lsls	r2, r3, #28
 8008f4a:	d525      	bpl.n	8008f98 <__swbuf_r+0x68>
 8008f4c:	6923      	ldr	r3, [r4, #16]
 8008f4e:	b31b      	cbz	r3, 8008f98 <__swbuf_r+0x68>
 8008f50:	6823      	ldr	r3, [r4, #0]
 8008f52:	6922      	ldr	r2, [r4, #16]
 8008f54:	1a98      	subs	r0, r3, r2
 8008f56:	6963      	ldr	r3, [r4, #20]
 8008f58:	b2f6      	uxtb	r6, r6
 8008f5a:	4283      	cmp	r3, r0
 8008f5c:	4637      	mov	r7, r6
 8008f5e:	dc04      	bgt.n	8008f6a <__swbuf_r+0x3a>
 8008f60:	4621      	mov	r1, r4
 8008f62:	4628      	mov	r0, r5
 8008f64:	f7ff fdac 	bl	8008ac0 <_fflush_r>
 8008f68:	b9e0      	cbnz	r0, 8008fa4 <__swbuf_r+0x74>
 8008f6a:	68a3      	ldr	r3, [r4, #8]
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	60a3      	str	r3, [r4, #8]
 8008f70:	6823      	ldr	r3, [r4, #0]
 8008f72:	1c5a      	adds	r2, r3, #1
 8008f74:	6022      	str	r2, [r4, #0]
 8008f76:	701e      	strb	r6, [r3, #0]
 8008f78:	6962      	ldr	r2, [r4, #20]
 8008f7a:	1c43      	adds	r3, r0, #1
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d004      	beq.n	8008f8a <__swbuf_r+0x5a>
 8008f80:	89a3      	ldrh	r3, [r4, #12]
 8008f82:	07db      	lsls	r3, r3, #31
 8008f84:	d506      	bpl.n	8008f94 <__swbuf_r+0x64>
 8008f86:	2e0a      	cmp	r6, #10
 8008f88:	d104      	bne.n	8008f94 <__swbuf_r+0x64>
 8008f8a:	4621      	mov	r1, r4
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	f7ff fd97 	bl	8008ac0 <_fflush_r>
 8008f92:	b938      	cbnz	r0, 8008fa4 <__swbuf_r+0x74>
 8008f94:	4638      	mov	r0, r7
 8008f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f98:	4621      	mov	r1, r4
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	f000 f806 	bl	8008fac <__swsetup_r>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	d0d5      	beq.n	8008f50 <__swbuf_r+0x20>
 8008fa4:	f04f 37ff 	mov.w	r7, #4294967295
 8008fa8:	e7f4      	b.n	8008f94 <__swbuf_r+0x64>
	...

08008fac <__swsetup_r>:
 8008fac:	b538      	push	{r3, r4, r5, lr}
 8008fae:	4b2a      	ldr	r3, [pc, #168]	; (8009058 <__swsetup_r+0xac>)
 8008fb0:	4605      	mov	r5, r0
 8008fb2:	6818      	ldr	r0, [r3, #0]
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	b118      	cbz	r0, 8008fc0 <__swsetup_r+0x14>
 8008fb8:	6a03      	ldr	r3, [r0, #32]
 8008fba:	b90b      	cbnz	r3, 8008fc0 <__swsetup_r+0x14>
 8008fbc:	f7fd ff82 	bl	8006ec4 <__sinit>
 8008fc0:	89a3      	ldrh	r3, [r4, #12]
 8008fc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fc6:	0718      	lsls	r0, r3, #28
 8008fc8:	d422      	bmi.n	8009010 <__swsetup_r+0x64>
 8008fca:	06d9      	lsls	r1, r3, #27
 8008fcc:	d407      	bmi.n	8008fde <__swsetup_r+0x32>
 8008fce:	2309      	movs	r3, #9
 8008fd0:	602b      	str	r3, [r5, #0]
 8008fd2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008fd6:	81a3      	strh	r3, [r4, #12]
 8008fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fdc:	e034      	b.n	8009048 <__swsetup_r+0x9c>
 8008fde:	0758      	lsls	r0, r3, #29
 8008fe0:	d512      	bpl.n	8009008 <__swsetup_r+0x5c>
 8008fe2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fe4:	b141      	cbz	r1, 8008ff8 <__swsetup_r+0x4c>
 8008fe6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fea:	4299      	cmp	r1, r3
 8008fec:	d002      	beq.n	8008ff4 <__swsetup_r+0x48>
 8008fee:	4628      	mov	r0, r5
 8008ff0:	f7fe ff0c 	bl	8007e0c <_free_r>
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	6363      	str	r3, [r4, #52]	; 0x34
 8008ff8:	89a3      	ldrh	r3, [r4, #12]
 8008ffa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ffe:	81a3      	strh	r3, [r4, #12]
 8009000:	2300      	movs	r3, #0
 8009002:	6063      	str	r3, [r4, #4]
 8009004:	6923      	ldr	r3, [r4, #16]
 8009006:	6023      	str	r3, [r4, #0]
 8009008:	89a3      	ldrh	r3, [r4, #12]
 800900a:	f043 0308 	orr.w	r3, r3, #8
 800900e:	81a3      	strh	r3, [r4, #12]
 8009010:	6923      	ldr	r3, [r4, #16]
 8009012:	b94b      	cbnz	r3, 8009028 <__swsetup_r+0x7c>
 8009014:	89a3      	ldrh	r3, [r4, #12]
 8009016:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800901a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800901e:	d003      	beq.n	8009028 <__swsetup_r+0x7c>
 8009020:	4621      	mov	r1, r4
 8009022:	4628      	mov	r0, r5
 8009024:	f000 f884 	bl	8009130 <__smakebuf_r>
 8009028:	89a0      	ldrh	r0, [r4, #12]
 800902a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800902e:	f010 0301 	ands.w	r3, r0, #1
 8009032:	d00a      	beq.n	800904a <__swsetup_r+0x9e>
 8009034:	2300      	movs	r3, #0
 8009036:	60a3      	str	r3, [r4, #8]
 8009038:	6963      	ldr	r3, [r4, #20]
 800903a:	425b      	negs	r3, r3
 800903c:	61a3      	str	r3, [r4, #24]
 800903e:	6923      	ldr	r3, [r4, #16]
 8009040:	b943      	cbnz	r3, 8009054 <__swsetup_r+0xa8>
 8009042:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009046:	d1c4      	bne.n	8008fd2 <__swsetup_r+0x26>
 8009048:	bd38      	pop	{r3, r4, r5, pc}
 800904a:	0781      	lsls	r1, r0, #30
 800904c:	bf58      	it	pl
 800904e:	6963      	ldrpl	r3, [r4, #20]
 8009050:	60a3      	str	r3, [r4, #8]
 8009052:	e7f4      	b.n	800903e <__swsetup_r+0x92>
 8009054:	2000      	movs	r0, #0
 8009056:	e7f7      	b.n	8009048 <__swsetup_r+0x9c>
 8009058:	200000c0 	.word	0x200000c0

0800905c <_raise_r>:
 800905c:	291f      	cmp	r1, #31
 800905e:	b538      	push	{r3, r4, r5, lr}
 8009060:	4604      	mov	r4, r0
 8009062:	460d      	mov	r5, r1
 8009064:	d904      	bls.n	8009070 <_raise_r+0x14>
 8009066:	2316      	movs	r3, #22
 8009068:	6003      	str	r3, [r0, #0]
 800906a:	f04f 30ff 	mov.w	r0, #4294967295
 800906e:	bd38      	pop	{r3, r4, r5, pc}
 8009070:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009072:	b112      	cbz	r2, 800907a <_raise_r+0x1e>
 8009074:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009078:	b94b      	cbnz	r3, 800908e <_raise_r+0x32>
 800907a:	4620      	mov	r0, r4
 800907c:	f000 f830 	bl	80090e0 <_getpid_r>
 8009080:	462a      	mov	r2, r5
 8009082:	4601      	mov	r1, r0
 8009084:	4620      	mov	r0, r4
 8009086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800908a:	f000 b817 	b.w	80090bc <_kill_r>
 800908e:	2b01      	cmp	r3, #1
 8009090:	d00a      	beq.n	80090a8 <_raise_r+0x4c>
 8009092:	1c59      	adds	r1, r3, #1
 8009094:	d103      	bne.n	800909e <_raise_r+0x42>
 8009096:	2316      	movs	r3, #22
 8009098:	6003      	str	r3, [r0, #0]
 800909a:	2001      	movs	r0, #1
 800909c:	e7e7      	b.n	800906e <_raise_r+0x12>
 800909e:	2400      	movs	r4, #0
 80090a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80090a4:	4628      	mov	r0, r5
 80090a6:	4798      	blx	r3
 80090a8:	2000      	movs	r0, #0
 80090aa:	e7e0      	b.n	800906e <_raise_r+0x12>

080090ac <raise>:
 80090ac:	4b02      	ldr	r3, [pc, #8]	; (80090b8 <raise+0xc>)
 80090ae:	4601      	mov	r1, r0
 80090b0:	6818      	ldr	r0, [r3, #0]
 80090b2:	f7ff bfd3 	b.w	800905c <_raise_r>
 80090b6:	bf00      	nop
 80090b8:	200000c0 	.word	0x200000c0

080090bc <_kill_r>:
 80090bc:	b538      	push	{r3, r4, r5, lr}
 80090be:	4d07      	ldr	r5, [pc, #28]	; (80090dc <_kill_r+0x20>)
 80090c0:	2300      	movs	r3, #0
 80090c2:	4604      	mov	r4, r0
 80090c4:	4608      	mov	r0, r1
 80090c6:	4611      	mov	r1, r2
 80090c8:	602b      	str	r3, [r5, #0]
 80090ca:	f7f9 f939 	bl	8002340 <_kill>
 80090ce:	1c43      	adds	r3, r0, #1
 80090d0:	d102      	bne.n	80090d8 <_kill_r+0x1c>
 80090d2:	682b      	ldr	r3, [r5, #0]
 80090d4:	b103      	cbz	r3, 80090d8 <_kill_r+0x1c>
 80090d6:	6023      	str	r3, [r4, #0]
 80090d8:	bd38      	pop	{r3, r4, r5, pc}
 80090da:	bf00      	nop
 80090dc:	200008f8 	.word	0x200008f8

080090e0 <_getpid_r>:
 80090e0:	f7f9 b926 	b.w	8002330 <_getpid>

080090e4 <__swhatbuf_r>:
 80090e4:	b570      	push	{r4, r5, r6, lr}
 80090e6:	460c      	mov	r4, r1
 80090e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ec:	2900      	cmp	r1, #0
 80090ee:	b096      	sub	sp, #88	; 0x58
 80090f0:	4615      	mov	r5, r2
 80090f2:	461e      	mov	r6, r3
 80090f4:	da0d      	bge.n	8009112 <__swhatbuf_r+0x2e>
 80090f6:	89a3      	ldrh	r3, [r4, #12]
 80090f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80090fc:	f04f 0100 	mov.w	r1, #0
 8009100:	bf0c      	ite	eq
 8009102:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009106:	2340      	movne	r3, #64	; 0x40
 8009108:	2000      	movs	r0, #0
 800910a:	6031      	str	r1, [r6, #0]
 800910c:	602b      	str	r3, [r5, #0]
 800910e:	b016      	add	sp, #88	; 0x58
 8009110:	bd70      	pop	{r4, r5, r6, pc}
 8009112:	466a      	mov	r2, sp
 8009114:	f000 f848 	bl	80091a8 <_fstat_r>
 8009118:	2800      	cmp	r0, #0
 800911a:	dbec      	blt.n	80090f6 <__swhatbuf_r+0x12>
 800911c:	9901      	ldr	r1, [sp, #4]
 800911e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009122:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009126:	4259      	negs	r1, r3
 8009128:	4159      	adcs	r1, r3
 800912a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800912e:	e7eb      	b.n	8009108 <__swhatbuf_r+0x24>

08009130 <__smakebuf_r>:
 8009130:	898b      	ldrh	r3, [r1, #12]
 8009132:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009134:	079d      	lsls	r5, r3, #30
 8009136:	4606      	mov	r6, r0
 8009138:	460c      	mov	r4, r1
 800913a:	d507      	bpl.n	800914c <__smakebuf_r+0x1c>
 800913c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009140:	6023      	str	r3, [r4, #0]
 8009142:	6123      	str	r3, [r4, #16]
 8009144:	2301      	movs	r3, #1
 8009146:	6163      	str	r3, [r4, #20]
 8009148:	b002      	add	sp, #8
 800914a:	bd70      	pop	{r4, r5, r6, pc}
 800914c:	ab01      	add	r3, sp, #4
 800914e:	466a      	mov	r2, sp
 8009150:	f7ff ffc8 	bl	80090e4 <__swhatbuf_r>
 8009154:	9900      	ldr	r1, [sp, #0]
 8009156:	4605      	mov	r5, r0
 8009158:	4630      	mov	r0, r6
 800915a:	f7fe fecb 	bl	8007ef4 <_malloc_r>
 800915e:	b948      	cbnz	r0, 8009174 <__smakebuf_r+0x44>
 8009160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009164:	059a      	lsls	r2, r3, #22
 8009166:	d4ef      	bmi.n	8009148 <__smakebuf_r+0x18>
 8009168:	f023 0303 	bic.w	r3, r3, #3
 800916c:	f043 0302 	orr.w	r3, r3, #2
 8009170:	81a3      	strh	r3, [r4, #12]
 8009172:	e7e3      	b.n	800913c <__smakebuf_r+0xc>
 8009174:	89a3      	ldrh	r3, [r4, #12]
 8009176:	6020      	str	r0, [r4, #0]
 8009178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800917c:	81a3      	strh	r3, [r4, #12]
 800917e:	9b00      	ldr	r3, [sp, #0]
 8009180:	6163      	str	r3, [r4, #20]
 8009182:	9b01      	ldr	r3, [sp, #4]
 8009184:	6120      	str	r0, [r4, #16]
 8009186:	b15b      	cbz	r3, 80091a0 <__smakebuf_r+0x70>
 8009188:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800918c:	4630      	mov	r0, r6
 800918e:	f000 f81d 	bl	80091cc <_isatty_r>
 8009192:	b128      	cbz	r0, 80091a0 <__smakebuf_r+0x70>
 8009194:	89a3      	ldrh	r3, [r4, #12]
 8009196:	f023 0303 	bic.w	r3, r3, #3
 800919a:	f043 0301 	orr.w	r3, r3, #1
 800919e:	81a3      	strh	r3, [r4, #12]
 80091a0:	89a3      	ldrh	r3, [r4, #12]
 80091a2:	431d      	orrs	r5, r3
 80091a4:	81a5      	strh	r5, [r4, #12]
 80091a6:	e7cf      	b.n	8009148 <__smakebuf_r+0x18>

080091a8 <_fstat_r>:
 80091a8:	b538      	push	{r3, r4, r5, lr}
 80091aa:	4d07      	ldr	r5, [pc, #28]	; (80091c8 <_fstat_r+0x20>)
 80091ac:	2300      	movs	r3, #0
 80091ae:	4604      	mov	r4, r0
 80091b0:	4608      	mov	r0, r1
 80091b2:	4611      	mov	r1, r2
 80091b4:	602b      	str	r3, [r5, #0]
 80091b6:	f7f9 f922 	bl	80023fe <_fstat>
 80091ba:	1c43      	adds	r3, r0, #1
 80091bc:	d102      	bne.n	80091c4 <_fstat_r+0x1c>
 80091be:	682b      	ldr	r3, [r5, #0]
 80091c0:	b103      	cbz	r3, 80091c4 <_fstat_r+0x1c>
 80091c2:	6023      	str	r3, [r4, #0]
 80091c4:	bd38      	pop	{r3, r4, r5, pc}
 80091c6:	bf00      	nop
 80091c8:	200008f8 	.word	0x200008f8

080091cc <_isatty_r>:
 80091cc:	b538      	push	{r3, r4, r5, lr}
 80091ce:	4d06      	ldr	r5, [pc, #24]	; (80091e8 <_isatty_r+0x1c>)
 80091d0:	2300      	movs	r3, #0
 80091d2:	4604      	mov	r4, r0
 80091d4:	4608      	mov	r0, r1
 80091d6:	602b      	str	r3, [r5, #0]
 80091d8:	f7f9 f921 	bl	800241e <_isatty>
 80091dc:	1c43      	adds	r3, r0, #1
 80091de:	d102      	bne.n	80091e6 <_isatty_r+0x1a>
 80091e0:	682b      	ldr	r3, [r5, #0]
 80091e2:	b103      	cbz	r3, 80091e6 <_isatty_r+0x1a>
 80091e4:	6023      	str	r3, [r4, #0]
 80091e6:	bd38      	pop	{r3, r4, r5, pc}
 80091e8:	200008f8 	.word	0x200008f8
 80091ec:	00000000 	.word	0x00000000

080091f0 <log10>:
 80091f0:	b538      	push	{r3, r4, r5, lr}
 80091f2:	ed2d 8b02 	vpush	{d8}
 80091f6:	ec55 4b10 	vmov	r4, r5, d0
 80091fa:	f000 f9c5 	bl	8009588 <__ieee754_log10>
 80091fe:	4622      	mov	r2, r4
 8009200:	462b      	mov	r3, r5
 8009202:	4620      	mov	r0, r4
 8009204:	4629      	mov	r1, r5
 8009206:	eeb0 8a40 	vmov.f32	s16, s0
 800920a:	eef0 8a60 	vmov.f32	s17, s1
 800920e:	f7f7 fc95 	bl	8000b3c <__aeabi_dcmpun>
 8009212:	b998      	cbnz	r0, 800923c <log10+0x4c>
 8009214:	2200      	movs	r2, #0
 8009216:	2300      	movs	r3, #0
 8009218:	4620      	mov	r0, r4
 800921a:	4629      	mov	r1, r5
 800921c:	f7f7 fc70 	bl	8000b00 <__aeabi_dcmple>
 8009220:	b160      	cbz	r0, 800923c <log10+0x4c>
 8009222:	2200      	movs	r2, #0
 8009224:	2300      	movs	r3, #0
 8009226:	4620      	mov	r0, r4
 8009228:	4629      	mov	r1, r5
 800922a:	f7f7 fc55 	bl	8000ad8 <__aeabi_dcmpeq>
 800922e:	b160      	cbz	r0, 800924a <log10+0x5a>
 8009230:	f7fd ff34 	bl	800709c <__errno>
 8009234:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8009260 <log10+0x70>
 8009238:	2322      	movs	r3, #34	; 0x22
 800923a:	6003      	str	r3, [r0, #0]
 800923c:	eeb0 0a48 	vmov.f32	s0, s16
 8009240:	eef0 0a68 	vmov.f32	s1, s17
 8009244:	ecbd 8b02 	vpop	{d8}
 8009248:	bd38      	pop	{r3, r4, r5, pc}
 800924a:	f7fd ff27 	bl	800709c <__errno>
 800924e:	ecbd 8b02 	vpop	{d8}
 8009252:	2321      	movs	r3, #33	; 0x21
 8009254:	6003      	str	r3, [r0, #0]
 8009256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800925a:	4803      	ldr	r0, [pc, #12]	; (8009268 <log10+0x78>)
 800925c:	f000 b8b0 	b.w	80093c0 <nan>
 8009260:	00000000 	.word	0x00000000
 8009264:	fff00000 	.word	0xfff00000
 8009268:	0800aeba 	.word	0x0800aeba

0800926c <pow>:
 800926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926e:	ed2d 8b02 	vpush	{d8}
 8009272:	eeb0 8a40 	vmov.f32	s16, s0
 8009276:	eef0 8a60 	vmov.f32	s17, s1
 800927a:	ec55 4b11 	vmov	r4, r5, d1
 800927e:	f000 fa0f 	bl	80096a0 <__ieee754_pow>
 8009282:	4622      	mov	r2, r4
 8009284:	462b      	mov	r3, r5
 8009286:	4620      	mov	r0, r4
 8009288:	4629      	mov	r1, r5
 800928a:	ec57 6b10 	vmov	r6, r7, d0
 800928e:	f7f7 fc55 	bl	8000b3c <__aeabi_dcmpun>
 8009292:	2800      	cmp	r0, #0
 8009294:	d13b      	bne.n	800930e <pow+0xa2>
 8009296:	ec51 0b18 	vmov	r0, r1, d8
 800929a:	2200      	movs	r2, #0
 800929c:	2300      	movs	r3, #0
 800929e:	f7f7 fc1b 	bl	8000ad8 <__aeabi_dcmpeq>
 80092a2:	b1b8      	cbz	r0, 80092d4 <pow+0x68>
 80092a4:	2200      	movs	r2, #0
 80092a6:	2300      	movs	r3, #0
 80092a8:	4620      	mov	r0, r4
 80092aa:	4629      	mov	r1, r5
 80092ac:	f7f7 fc14 	bl	8000ad8 <__aeabi_dcmpeq>
 80092b0:	2800      	cmp	r0, #0
 80092b2:	d146      	bne.n	8009342 <pow+0xd6>
 80092b4:	ec45 4b10 	vmov	d0, r4, r5
 80092b8:	f000 f874 	bl	80093a4 <finite>
 80092bc:	b338      	cbz	r0, 800930e <pow+0xa2>
 80092be:	2200      	movs	r2, #0
 80092c0:	2300      	movs	r3, #0
 80092c2:	4620      	mov	r0, r4
 80092c4:	4629      	mov	r1, r5
 80092c6:	f7f7 fc11 	bl	8000aec <__aeabi_dcmplt>
 80092ca:	b300      	cbz	r0, 800930e <pow+0xa2>
 80092cc:	f7fd fee6 	bl	800709c <__errno>
 80092d0:	2322      	movs	r3, #34	; 0x22
 80092d2:	e01b      	b.n	800930c <pow+0xa0>
 80092d4:	ec47 6b10 	vmov	d0, r6, r7
 80092d8:	f000 f864 	bl	80093a4 <finite>
 80092dc:	b9e0      	cbnz	r0, 8009318 <pow+0xac>
 80092de:	eeb0 0a48 	vmov.f32	s0, s16
 80092e2:	eef0 0a68 	vmov.f32	s1, s17
 80092e6:	f000 f85d 	bl	80093a4 <finite>
 80092ea:	b1a8      	cbz	r0, 8009318 <pow+0xac>
 80092ec:	ec45 4b10 	vmov	d0, r4, r5
 80092f0:	f000 f858 	bl	80093a4 <finite>
 80092f4:	b180      	cbz	r0, 8009318 <pow+0xac>
 80092f6:	4632      	mov	r2, r6
 80092f8:	463b      	mov	r3, r7
 80092fa:	4630      	mov	r0, r6
 80092fc:	4639      	mov	r1, r7
 80092fe:	f7f7 fc1d 	bl	8000b3c <__aeabi_dcmpun>
 8009302:	2800      	cmp	r0, #0
 8009304:	d0e2      	beq.n	80092cc <pow+0x60>
 8009306:	f7fd fec9 	bl	800709c <__errno>
 800930a:	2321      	movs	r3, #33	; 0x21
 800930c:	6003      	str	r3, [r0, #0]
 800930e:	ecbd 8b02 	vpop	{d8}
 8009312:	ec47 6b10 	vmov	d0, r6, r7
 8009316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009318:	2200      	movs	r2, #0
 800931a:	2300      	movs	r3, #0
 800931c:	4630      	mov	r0, r6
 800931e:	4639      	mov	r1, r7
 8009320:	f7f7 fbda 	bl	8000ad8 <__aeabi_dcmpeq>
 8009324:	2800      	cmp	r0, #0
 8009326:	d0f2      	beq.n	800930e <pow+0xa2>
 8009328:	eeb0 0a48 	vmov.f32	s0, s16
 800932c:	eef0 0a68 	vmov.f32	s1, s17
 8009330:	f000 f838 	bl	80093a4 <finite>
 8009334:	2800      	cmp	r0, #0
 8009336:	d0ea      	beq.n	800930e <pow+0xa2>
 8009338:	ec45 4b10 	vmov	d0, r4, r5
 800933c:	f000 f832 	bl	80093a4 <finite>
 8009340:	e7c3      	b.n	80092ca <pow+0x5e>
 8009342:	4f01      	ldr	r7, [pc, #4]	; (8009348 <pow+0xdc>)
 8009344:	2600      	movs	r6, #0
 8009346:	e7e2      	b.n	800930e <pow+0xa2>
 8009348:	3ff00000 	.word	0x3ff00000

0800934c <sqrt>:
 800934c:	b538      	push	{r3, r4, r5, lr}
 800934e:	ed2d 8b02 	vpush	{d8}
 8009352:	ec55 4b10 	vmov	r4, r5, d0
 8009356:	f000 f83b 	bl	80093d0 <__ieee754_sqrt>
 800935a:	4622      	mov	r2, r4
 800935c:	462b      	mov	r3, r5
 800935e:	4620      	mov	r0, r4
 8009360:	4629      	mov	r1, r5
 8009362:	eeb0 8a40 	vmov.f32	s16, s0
 8009366:	eef0 8a60 	vmov.f32	s17, s1
 800936a:	f7f7 fbe7 	bl	8000b3c <__aeabi_dcmpun>
 800936e:	b990      	cbnz	r0, 8009396 <sqrt+0x4a>
 8009370:	2200      	movs	r2, #0
 8009372:	2300      	movs	r3, #0
 8009374:	4620      	mov	r0, r4
 8009376:	4629      	mov	r1, r5
 8009378:	f7f7 fbb8 	bl	8000aec <__aeabi_dcmplt>
 800937c:	b158      	cbz	r0, 8009396 <sqrt+0x4a>
 800937e:	f7fd fe8d 	bl	800709c <__errno>
 8009382:	2321      	movs	r3, #33	; 0x21
 8009384:	6003      	str	r3, [r0, #0]
 8009386:	2200      	movs	r2, #0
 8009388:	2300      	movs	r3, #0
 800938a:	4610      	mov	r0, r2
 800938c:	4619      	mov	r1, r3
 800938e:	f7f7 fa65 	bl	800085c <__aeabi_ddiv>
 8009392:	ec41 0b18 	vmov	d8, r0, r1
 8009396:	eeb0 0a48 	vmov.f32	s0, s16
 800939a:	eef0 0a68 	vmov.f32	s1, s17
 800939e:	ecbd 8b02 	vpop	{d8}
 80093a2:	bd38      	pop	{r3, r4, r5, pc}

080093a4 <finite>:
 80093a4:	b082      	sub	sp, #8
 80093a6:	ed8d 0b00 	vstr	d0, [sp]
 80093aa:	9801      	ldr	r0, [sp, #4]
 80093ac:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80093b0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80093b4:	0fc0      	lsrs	r0, r0, #31
 80093b6:	b002      	add	sp, #8
 80093b8:	4770      	bx	lr
 80093ba:	0000      	movs	r0, r0
 80093bc:	0000      	movs	r0, r0
	...

080093c0 <nan>:
 80093c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80093c8 <nan+0x8>
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	00000000 	.word	0x00000000
 80093cc:	7ff80000 	.word	0x7ff80000

080093d0 <__ieee754_sqrt>:
 80093d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d4:	ec55 4b10 	vmov	r4, r5, d0
 80093d8:	4e67      	ldr	r6, [pc, #412]	; (8009578 <__ieee754_sqrt+0x1a8>)
 80093da:	43ae      	bics	r6, r5
 80093dc:	ee10 0a10 	vmov	r0, s0
 80093e0:	ee10 2a10 	vmov	r2, s0
 80093e4:	4629      	mov	r1, r5
 80093e6:	462b      	mov	r3, r5
 80093e8:	d10d      	bne.n	8009406 <__ieee754_sqrt+0x36>
 80093ea:	f7f7 f90d 	bl	8000608 <__aeabi_dmul>
 80093ee:	4602      	mov	r2, r0
 80093f0:	460b      	mov	r3, r1
 80093f2:	4620      	mov	r0, r4
 80093f4:	4629      	mov	r1, r5
 80093f6:	f7f6 ff51 	bl	800029c <__adddf3>
 80093fa:	4604      	mov	r4, r0
 80093fc:	460d      	mov	r5, r1
 80093fe:	ec45 4b10 	vmov	d0, r4, r5
 8009402:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009406:	2d00      	cmp	r5, #0
 8009408:	dc0b      	bgt.n	8009422 <__ieee754_sqrt+0x52>
 800940a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800940e:	4326      	orrs	r6, r4
 8009410:	d0f5      	beq.n	80093fe <__ieee754_sqrt+0x2e>
 8009412:	b135      	cbz	r5, 8009422 <__ieee754_sqrt+0x52>
 8009414:	f7f6 ff40 	bl	8000298 <__aeabi_dsub>
 8009418:	4602      	mov	r2, r0
 800941a:	460b      	mov	r3, r1
 800941c:	f7f7 fa1e 	bl	800085c <__aeabi_ddiv>
 8009420:	e7eb      	b.n	80093fa <__ieee754_sqrt+0x2a>
 8009422:	1509      	asrs	r1, r1, #20
 8009424:	f000 808d 	beq.w	8009542 <__ieee754_sqrt+0x172>
 8009428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800942c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8009430:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009434:	07c9      	lsls	r1, r1, #31
 8009436:	bf5c      	itt	pl
 8009438:	005b      	lslpl	r3, r3, #1
 800943a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800943e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009442:	bf58      	it	pl
 8009444:	0052      	lslpl	r2, r2, #1
 8009446:	2500      	movs	r5, #0
 8009448:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800944c:	1076      	asrs	r6, r6, #1
 800944e:	0052      	lsls	r2, r2, #1
 8009450:	f04f 0e16 	mov.w	lr, #22
 8009454:	46ac      	mov	ip, r5
 8009456:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800945a:	eb0c 0001 	add.w	r0, ip, r1
 800945e:	4298      	cmp	r0, r3
 8009460:	bfde      	ittt	le
 8009462:	1a1b      	suble	r3, r3, r0
 8009464:	eb00 0c01 	addle.w	ip, r0, r1
 8009468:	186d      	addle	r5, r5, r1
 800946a:	005b      	lsls	r3, r3, #1
 800946c:	f1be 0e01 	subs.w	lr, lr, #1
 8009470:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009474:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009478:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800947c:	d1ed      	bne.n	800945a <__ieee754_sqrt+0x8a>
 800947e:	4674      	mov	r4, lr
 8009480:	2720      	movs	r7, #32
 8009482:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009486:	4563      	cmp	r3, ip
 8009488:	eb01 000e 	add.w	r0, r1, lr
 800948c:	dc02      	bgt.n	8009494 <__ieee754_sqrt+0xc4>
 800948e:	d113      	bne.n	80094b8 <__ieee754_sqrt+0xe8>
 8009490:	4290      	cmp	r0, r2
 8009492:	d811      	bhi.n	80094b8 <__ieee754_sqrt+0xe8>
 8009494:	2800      	cmp	r0, #0
 8009496:	eb00 0e01 	add.w	lr, r0, r1
 800949a:	da57      	bge.n	800954c <__ieee754_sqrt+0x17c>
 800949c:	f1be 0f00 	cmp.w	lr, #0
 80094a0:	db54      	blt.n	800954c <__ieee754_sqrt+0x17c>
 80094a2:	f10c 0801 	add.w	r8, ip, #1
 80094a6:	eba3 030c 	sub.w	r3, r3, ip
 80094aa:	4290      	cmp	r0, r2
 80094ac:	bf88      	it	hi
 80094ae:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80094b2:	1a12      	subs	r2, r2, r0
 80094b4:	440c      	add	r4, r1
 80094b6:	46c4      	mov	ip, r8
 80094b8:	005b      	lsls	r3, r3, #1
 80094ba:	3f01      	subs	r7, #1
 80094bc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80094c0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80094c4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80094c8:	d1dd      	bne.n	8009486 <__ieee754_sqrt+0xb6>
 80094ca:	4313      	orrs	r3, r2
 80094cc:	d01b      	beq.n	8009506 <__ieee754_sqrt+0x136>
 80094ce:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800957c <__ieee754_sqrt+0x1ac>
 80094d2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009580 <__ieee754_sqrt+0x1b0>
 80094d6:	e9da 0100 	ldrd	r0, r1, [sl]
 80094da:	e9db 2300 	ldrd	r2, r3, [fp]
 80094de:	f7f6 fedb 	bl	8000298 <__aeabi_dsub>
 80094e2:	e9da 8900 	ldrd	r8, r9, [sl]
 80094e6:	4602      	mov	r2, r0
 80094e8:	460b      	mov	r3, r1
 80094ea:	4640      	mov	r0, r8
 80094ec:	4649      	mov	r1, r9
 80094ee:	f7f7 fb07 	bl	8000b00 <__aeabi_dcmple>
 80094f2:	b140      	cbz	r0, 8009506 <__ieee754_sqrt+0x136>
 80094f4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80094f8:	e9da 0100 	ldrd	r0, r1, [sl]
 80094fc:	e9db 2300 	ldrd	r2, r3, [fp]
 8009500:	d126      	bne.n	8009550 <__ieee754_sqrt+0x180>
 8009502:	3501      	adds	r5, #1
 8009504:	463c      	mov	r4, r7
 8009506:	106a      	asrs	r2, r5, #1
 8009508:	0863      	lsrs	r3, r4, #1
 800950a:	07e9      	lsls	r1, r5, #31
 800950c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009510:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009514:	bf48      	it	mi
 8009516:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800951a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800951e:	461c      	mov	r4, r3
 8009520:	e76d      	b.n	80093fe <__ieee754_sqrt+0x2e>
 8009522:	0ad3      	lsrs	r3, r2, #11
 8009524:	3815      	subs	r0, #21
 8009526:	0552      	lsls	r2, r2, #21
 8009528:	2b00      	cmp	r3, #0
 800952a:	d0fa      	beq.n	8009522 <__ieee754_sqrt+0x152>
 800952c:	02dc      	lsls	r4, r3, #11
 800952e:	d50a      	bpl.n	8009546 <__ieee754_sqrt+0x176>
 8009530:	f1c1 0420 	rsb	r4, r1, #32
 8009534:	fa22 f404 	lsr.w	r4, r2, r4
 8009538:	1e4d      	subs	r5, r1, #1
 800953a:	408a      	lsls	r2, r1
 800953c:	4323      	orrs	r3, r4
 800953e:	1b41      	subs	r1, r0, r5
 8009540:	e772      	b.n	8009428 <__ieee754_sqrt+0x58>
 8009542:	4608      	mov	r0, r1
 8009544:	e7f0      	b.n	8009528 <__ieee754_sqrt+0x158>
 8009546:	005b      	lsls	r3, r3, #1
 8009548:	3101      	adds	r1, #1
 800954a:	e7ef      	b.n	800952c <__ieee754_sqrt+0x15c>
 800954c:	46e0      	mov	r8, ip
 800954e:	e7aa      	b.n	80094a6 <__ieee754_sqrt+0xd6>
 8009550:	f7f6 fea4 	bl	800029c <__adddf3>
 8009554:	e9da 8900 	ldrd	r8, r9, [sl]
 8009558:	4602      	mov	r2, r0
 800955a:	460b      	mov	r3, r1
 800955c:	4640      	mov	r0, r8
 800955e:	4649      	mov	r1, r9
 8009560:	f7f7 fac4 	bl	8000aec <__aeabi_dcmplt>
 8009564:	b120      	cbz	r0, 8009570 <__ieee754_sqrt+0x1a0>
 8009566:	1ca0      	adds	r0, r4, #2
 8009568:	bf08      	it	eq
 800956a:	3501      	addeq	r5, #1
 800956c:	3402      	adds	r4, #2
 800956e:	e7ca      	b.n	8009506 <__ieee754_sqrt+0x136>
 8009570:	3401      	adds	r4, #1
 8009572:	f024 0401 	bic.w	r4, r4, #1
 8009576:	e7c6      	b.n	8009506 <__ieee754_sqrt+0x136>
 8009578:	7ff00000 	.word	0x7ff00000
 800957c:	20000230 	.word	0x20000230
 8009580:	20000238 	.word	0x20000238
 8009584:	00000000 	.word	0x00000000

08009588 <__ieee754_log10>:
 8009588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800958c:	ec55 4b10 	vmov	r4, r5, d0
 8009590:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8009594:	462b      	mov	r3, r5
 8009596:	da2f      	bge.n	80095f8 <__ieee754_log10+0x70>
 8009598:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800959c:	4322      	orrs	r2, r4
 800959e:	d109      	bne.n	80095b4 <__ieee754_log10+0x2c>
 80095a0:	493b      	ldr	r1, [pc, #236]	; (8009690 <__ieee754_log10+0x108>)
 80095a2:	2200      	movs	r2, #0
 80095a4:	2300      	movs	r3, #0
 80095a6:	2000      	movs	r0, #0
 80095a8:	f7f7 f958 	bl	800085c <__aeabi_ddiv>
 80095ac:	ec41 0b10 	vmov	d0, r0, r1
 80095b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095b4:	2d00      	cmp	r5, #0
 80095b6:	da09      	bge.n	80095cc <__ieee754_log10+0x44>
 80095b8:	ee10 2a10 	vmov	r2, s0
 80095bc:	ee10 0a10 	vmov	r0, s0
 80095c0:	4629      	mov	r1, r5
 80095c2:	f7f6 fe69 	bl	8000298 <__aeabi_dsub>
 80095c6:	2200      	movs	r2, #0
 80095c8:	2300      	movs	r3, #0
 80095ca:	e7ed      	b.n	80095a8 <__ieee754_log10+0x20>
 80095cc:	4b31      	ldr	r3, [pc, #196]	; (8009694 <__ieee754_log10+0x10c>)
 80095ce:	2200      	movs	r2, #0
 80095d0:	4629      	mov	r1, r5
 80095d2:	ee10 0a10 	vmov	r0, s0
 80095d6:	f7f7 f817 	bl	8000608 <__aeabi_dmul>
 80095da:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80095de:	4604      	mov	r4, r0
 80095e0:	460d      	mov	r5, r1
 80095e2:	460b      	mov	r3, r1
 80095e4:	492c      	ldr	r1, [pc, #176]	; (8009698 <__ieee754_log10+0x110>)
 80095e6:	428b      	cmp	r3, r1
 80095e8:	dd08      	ble.n	80095fc <__ieee754_log10+0x74>
 80095ea:	4622      	mov	r2, r4
 80095ec:	462b      	mov	r3, r5
 80095ee:	4620      	mov	r0, r4
 80095f0:	4629      	mov	r1, r5
 80095f2:	f7f6 fe53 	bl	800029c <__adddf3>
 80095f6:	e7d9      	b.n	80095ac <__ieee754_log10+0x24>
 80095f8:	2200      	movs	r2, #0
 80095fa:	e7f3      	b.n	80095e4 <__ieee754_log10+0x5c>
 80095fc:	1518      	asrs	r0, r3, #20
 80095fe:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8009602:	4410      	add	r0, r2
 8009604:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8009608:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800960c:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8009610:	f7f6 ff90 	bl	8000534 <__aeabi_i2d>
 8009614:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8009618:	3303      	adds	r3, #3
 800961a:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800961e:	ec45 4b10 	vmov	d0, r4, r5
 8009622:	4606      	mov	r6, r0
 8009624:	460f      	mov	r7, r1
 8009626:	f000 fe1f 	bl	800a268 <__ieee754_log>
 800962a:	a313      	add	r3, pc, #76	; (adr r3, 8009678 <__ieee754_log10+0xf0>)
 800962c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009630:	4630      	mov	r0, r6
 8009632:	4639      	mov	r1, r7
 8009634:	ec59 8b10 	vmov	r8, r9, d0
 8009638:	f7f6 ffe6 	bl	8000608 <__aeabi_dmul>
 800963c:	a310      	add	r3, pc, #64	; (adr r3, 8009680 <__ieee754_log10+0xf8>)
 800963e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009642:	4604      	mov	r4, r0
 8009644:	460d      	mov	r5, r1
 8009646:	4640      	mov	r0, r8
 8009648:	4649      	mov	r1, r9
 800964a:	f7f6 ffdd 	bl	8000608 <__aeabi_dmul>
 800964e:	4602      	mov	r2, r0
 8009650:	460b      	mov	r3, r1
 8009652:	4620      	mov	r0, r4
 8009654:	4629      	mov	r1, r5
 8009656:	f7f6 fe21 	bl	800029c <__adddf3>
 800965a:	a30b      	add	r3, pc, #44	; (adr r3, 8009688 <__ieee754_log10+0x100>)
 800965c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009660:	4604      	mov	r4, r0
 8009662:	460d      	mov	r5, r1
 8009664:	4630      	mov	r0, r6
 8009666:	4639      	mov	r1, r7
 8009668:	f7f6 ffce 	bl	8000608 <__aeabi_dmul>
 800966c:	4602      	mov	r2, r0
 800966e:	460b      	mov	r3, r1
 8009670:	4620      	mov	r0, r4
 8009672:	4629      	mov	r1, r5
 8009674:	e7bd      	b.n	80095f2 <__ieee754_log10+0x6a>
 8009676:	bf00      	nop
 8009678:	11f12b36 	.word	0x11f12b36
 800967c:	3d59fef3 	.word	0x3d59fef3
 8009680:	1526e50e 	.word	0x1526e50e
 8009684:	3fdbcb7b 	.word	0x3fdbcb7b
 8009688:	509f6000 	.word	0x509f6000
 800968c:	3fd34413 	.word	0x3fd34413
 8009690:	c3500000 	.word	0xc3500000
 8009694:	43500000 	.word	0x43500000
 8009698:	7fefffff 	.word	0x7fefffff
 800969c:	00000000 	.word	0x00000000

080096a0 <__ieee754_pow>:
 80096a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a4:	ed2d 8b06 	vpush	{d8-d10}
 80096a8:	b089      	sub	sp, #36	; 0x24
 80096aa:	ed8d 1b00 	vstr	d1, [sp]
 80096ae:	e9dd 2900 	ldrd	r2, r9, [sp]
 80096b2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80096b6:	ea58 0102 	orrs.w	r1, r8, r2
 80096ba:	ec57 6b10 	vmov	r6, r7, d0
 80096be:	d115      	bne.n	80096ec <__ieee754_pow+0x4c>
 80096c0:	19b3      	adds	r3, r6, r6
 80096c2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80096c6:	4152      	adcs	r2, r2
 80096c8:	4299      	cmp	r1, r3
 80096ca:	4b89      	ldr	r3, [pc, #548]	; (80098f0 <__ieee754_pow+0x250>)
 80096cc:	4193      	sbcs	r3, r2
 80096ce:	f080 84d1 	bcs.w	800a074 <__ieee754_pow+0x9d4>
 80096d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096d6:	4630      	mov	r0, r6
 80096d8:	4639      	mov	r1, r7
 80096da:	f7f6 fddf 	bl	800029c <__adddf3>
 80096de:	ec41 0b10 	vmov	d0, r0, r1
 80096e2:	b009      	add	sp, #36	; 0x24
 80096e4:	ecbd 8b06 	vpop	{d8-d10}
 80096e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ec:	4b81      	ldr	r3, [pc, #516]	; (80098f4 <__ieee754_pow+0x254>)
 80096ee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80096f2:	429c      	cmp	r4, r3
 80096f4:	ee10 aa10 	vmov	sl, s0
 80096f8:	463d      	mov	r5, r7
 80096fa:	dc06      	bgt.n	800970a <__ieee754_pow+0x6a>
 80096fc:	d101      	bne.n	8009702 <__ieee754_pow+0x62>
 80096fe:	2e00      	cmp	r6, #0
 8009700:	d1e7      	bne.n	80096d2 <__ieee754_pow+0x32>
 8009702:	4598      	cmp	r8, r3
 8009704:	dc01      	bgt.n	800970a <__ieee754_pow+0x6a>
 8009706:	d10f      	bne.n	8009728 <__ieee754_pow+0x88>
 8009708:	b172      	cbz	r2, 8009728 <__ieee754_pow+0x88>
 800970a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800970e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009712:	ea55 050a 	orrs.w	r5, r5, sl
 8009716:	d1dc      	bne.n	80096d2 <__ieee754_pow+0x32>
 8009718:	e9dd 3200 	ldrd	r3, r2, [sp]
 800971c:	18db      	adds	r3, r3, r3
 800971e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009722:	4152      	adcs	r2, r2
 8009724:	429d      	cmp	r5, r3
 8009726:	e7d0      	b.n	80096ca <__ieee754_pow+0x2a>
 8009728:	2d00      	cmp	r5, #0
 800972a:	da3b      	bge.n	80097a4 <__ieee754_pow+0x104>
 800972c:	4b72      	ldr	r3, [pc, #456]	; (80098f8 <__ieee754_pow+0x258>)
 800972e:	4598      	cmp	r8, r3
 8009730:	dc51      	bgt.n	80097d6 <__ieee754_pow+0x136>
 8009732:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009736:	4598      	cmp	r8, r3
 8009738:	f340 84ab 	ble.w	800a092 <__ieee754_pow+0x9f2>
 800973c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009740:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009744:	2b14      	cmp	r3, #20
 8009746:	dd0f      	ble.n	8009768 <__ieee754_pow+0xc8>
 8009748:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800974c:	fa22 f103 	lsr.w	r1, r2, r3
 8009750:	fa01 f303 	lsl.w	r3, r1, r3
 8009754:	4293      	cmp	r3, r2
 8009756:	f040 849c 	bne.w	800a092 <__ieee754_pow+0x9f2>
 800975a:	f001 0101 	and.w	r1, r1, #1
 800975e:	f1c1 0302 	rsb	r3, r1, #2
 8009762:	9304      	str	r3, [sp, #16]
 8009764:	b182      	cbz	r2, 8009788 <__ieee754_pow+0xe8>
 8009766:	e05f      	b.n	8009828 <__ieee754_pow+0x188>
 8009768:	2a00      	cmp	r2, #0
 800976a:	d15b      	bne.n	8009824 <__ieee754_pow+0x184>
 800976c:	f1c3 0314 	rsb	r3, r3, #20
 8009770:	fa48 f103 	asr.w	r1, r8, r3
 8009774:	fa01 f303 	lsl.w	r3, r1, r3
 8009778:	4543      	cmp	r3, r8
 800977a:	f040 8487 	bne.w	800a08c <__ieee754_pow+0x9ec>
 800977e:	f001 0101 	and.w	r1, r1, #1
 8009782:	f1c1 0302 	rsb	r3, r1, #2
 8009786:	9304      	str	r3, [sp, #16]
 8009788:	4b5c      	ldr	r3, [pc, #368]	; (80098fc <__ieee754_pow+0x25c>)
 800978a:	4598      	cmp	r8, r3
 800978c:	d132      	bne.n	80097f4 <__ieee754_pow+0x154>
 800978e:	f1b9 0f00 	cmp.w	r9, #0
 8009792:	f280 8477 	bge.w	800a084 <__ieee754_pow+0x9e4>
 8009796:	4959      	ldr	r1, [pc, #356]	; (80098fc <__ieee754_pow+0x25c>)
 8009798:	4632      	mov	r2, r6
 800979a:	463b      	mov	r3, r7
 800979c:	2000      	movs	r0, #0
 800979e:	f7f7 f85d 	bl	800085c <__aeabi_ddiv>
 80097a2:	e79c      	b.n	80096de <__ieee754_pow+0x3e>
 80097a4:	2300      	movs	r3, #0
 80097a6:	9304      	str	r3, [sp, #16]
 80097a8:	2a00      	cmp	r2, #0
 80097aa:	d13d      	bne.n	8009828 <__ieee754_pow+0x188>
 80097ac:	4b51      	ldr	r3, [pc, #324]	; (80098f4 <__ieee754_pow+0x254>)
 80097ae:	4598      	cmp	r8, r3
 80097b0:	d1ea      	bne.n	8009788 <__ieee754_pow+0xe8>
 80097b2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80097b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80097ba:	ea53 030a 	orrs.w	r3, r3, sl
 80097be:	f000 8459 	beq.w	800a074 <__ieee754_pow+0x9d4>
 80097c2:	4b4f      	ldr	r3, [pc, #316]	; (8009900 <__ieee754_pow+0x260>)
 80097c4:	429c      	cmp	r4, r3
 80097c6:	dd08      	ble.n	80097da <__ieee754_pow+0x13a>
 80097c8:	f1b9 0f00 	cmp.w	r9, #0
 80097cc:	f2c0 8456 	blt.w	800a07c <__ieee754_pow+0x9dc>
 80097d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097d4:	e783      	b.n	80096de <__ieee754_pow+0x3e>
 80097d6:	2302      	movs	r3, #2
 80097d8:	e7e5      	b.n	80097a6 <__ieee754_pow+0x106>
 80097da:	f1b9 0f00 	cmp.w	r9, #0
 80097de:	f04f 0000 	mov.w	r0, #0
 80097e2:	f04f 0100 	mov.w	r1, #0
 80097e6:	f6bf af7a 	bge.w	80096de <__ieee754_pow+0x3e>
 80097ea:	e9dd 0300 	ldrd	r0, r3, [sp]
 80097ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80097f2:	e774      	b.n	80096de <__ieee754_pow+0x3e>
 80097f4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80097f8:	d106      	bne.n	8009808 <__ieee754_pow+0x168>
 80097fa:	4632      	mov	r2, r6
 80097fc:	463b      	mov	r3, r7
 80097fe:	4630      	mov	r0, r6
 8009800:	4639      	mov	r1, r7
 8009802:	f7f6 ff01 	bl	8000608 <__aeabi_dmul>
 8009806:	e76a      	b.n	80096de <__ieee754_pow+0x3e>
 8009808:	4b3e      	ldr	r3, [pc, #248]	; (8009904 <__ieee754_pow+0x264>)
 800980a:	4599      	cmp	r9, r3
 800980c:	d10c      	bne.n	8009828 <__ieee754_pow+0x188>
 800980e:	2d00      	cmp	r5, #0
 8009810:	db0a      	blt.n	8009828 <__ieee754_pow+0x188>
 8009812:	ec47 6b10 	vmov	d0, r6, r7
 8009816:	b009      	add	sp, #36	; 0x24
 8009818:	ecbd 8b06 	vpop	{d8-d10}
 800981c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009820:	f7ff bdd6 	b.w	80093d0 <__ieee754_sqrt>
 8009824:	2300      	movs	r3, #0
 8009826:	9304      	str	r3, [sp, #16]
 8009828:	ec47 6b10 	vmov	d0, r6, r7
 800982c:	f000 fc62 	bl	800a0f4 <fabs>
 8009830:	ec51 0b10 	vmov	r0, r1, d0
 8009834:	f1ba 0f00 	cmp.w	sl, #0
 8009838:	d129      	bne.n	800988e <__ieee754_pow+0x1ee>
 800983a:	b124      	cbz	r4, 8009846 <__ieee754_pow+0x1a6>
 800983c:	4b2f      	ldr	r3, [pc, #188]	; (80098fc <__ieee754_pow+0x25c>)
 800983e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009842:	429a      	cmp	r2, r3
 8009844:	d123      	bne.n	800988e <__ieee754_pow+0x1ee>
 8009846:	f1b9 0f00 	cmp.w	r9, #0
 800984a:	da05      	bge.n	8009858 <__ieee754_pow+0x1b8>
 800984c:	4602      	mov	r2, r0
 800984e:	460b      	mov	r3, r1
 8009850:	2000      	movs	r0, #0
 8009852:	492a      	ldr	r1, [pc, #168]	; (80098fc <__ieee754_pow+0x25c>)
 8009854:	f7f7 f802 	bl	800085c <__aeabi_ddiv>
 8009858:	2d00      	cmp	r5, #0
 800985a:	f6bf af40 	bge.w	80096de <__ieee754_pow+0x3e>
 800985e:	9b04      	ldr	r3, [sp, #16]
 8009860:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009864:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009868:	431c      	orrs	r4, r3
 800986a:	d108      	bne.n	800987e <__ieee754_pow+0x1de>
 800986c:	4602      	mov	r2, r0
 800986e:	460b      	mov	r3, r1
 8009870:	4610      	mov	r0, r2
 8009872:	4619      	mov	r1, r3
 8009874:	f7f6 fd10 	bl	8000298 <__aeabi_dsub>
 8009878:	4602      	mov	r2, r0
 800987a:	460b      	mov	r3, r1
 800987c:	e78f      	b.n	800979e <__ieee754_pow+0xfe>
 800987e:	9b04      	ldr	r3, [sp, #16]
 8009880:	2b01      	cmp	r3, #1
 8009882:	f47f af2c 	bne.w	80096de <__ieee754_pow+0x3e>
 8009886:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800988a:	4619      	mov	r1, r3
 800988c:	e727      	b.n	80096de <__ieee754_pow+0x3e>
 800988e:	0feb      	lsrs	r3, r5, #31
 8009890:	3b01      	subs	r3, #1
 8009892:	9306      	str	r3, [sp, #24]
 8009894:	9a06      	ldr	r2, [sp, #24]
 8009896:	9b04      	ldr	r3, [sp, #16]
 8009898:	4313      	orrs	r3, r2
 800989a:	d102      	bne.n	80098a2 <__ieee754_pow+0x202>
 800989c:	4632      	mov	r2, r6
 800989e:	463b      	mov	r3, r7
 80098a0:	e7e6      	b.n	8009870 <__ieee754_pow+0x1d0>
 80098a2:	4b19      	ldr	r3, [pc, #100]	; (8009908 <__ieee754_pow+0x268>)
 80098a4:	4598      	cmp	r8, r3
 80098a6:	f340 80fb 	ble.w	8009aa0 <__ieee754_pow+0x400>
 80098aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80098ae:	4598      	cmp	r8, r3
 80098b0:	4b13      	ldr	r3, [pc, #76]	; (8009900 <__ieee754_pow+0x260>)
 80098b2:	dd0c      	ble.n	80098ce <__ieee754_pow+0x22e>
 80098b4:	429c      	cmp	r4, r3
 80098b6:	dc0f      	bgt.n	80098d8 <__ieee754_pow+0x238>
 80098b8:	f1b9 0f00 	cmp.w	r9, #0
 80098bc:	da0f      	bge.n	80098de <__ieee754_pow+0x23e>
 80098be:	2000      	movs	r0, #0
 80098c0:	b009      	add	sp, #36	; 0x24
 80098c2:	ecbd 8b06 	vpop	{d8-d10}
 80098c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ca:	f000 bcc2 	b.w	800a252 <__math_oflow>
 80098ce:	429c      	cmp	r4, r3
 80098d0:	dbf2      	blt.n	80098b8 <__ieee754_pow+0x218>
 80098d2:	4b0a      	ldr	r3, [pc, #40]	; (80098fc <__ieee754_pow+0x25c>)
 80098d4:	429c      	cmp	r4, r3
 80098d6:	dd19      	ble.n	800990c <__ieee754_pow+0x26c>
 80098d8:	f1b9 0f00 	cmp.w	r9, #0
 80098dc:	dcef      	bgt.n	80098be <__ieee754_pow+0x21e>
 80098de:	2000      	movs	r0, #0
 80098e0:	b009      	add	sp, #36	; 0x24
 80098e2:	ecbd 8b06 	vpop	{d8-d10}
 80098e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ea:	f000 bca9 	b.w	800a240 <__math_uflow>
 80098ee:	bf00      	nop
 80098f0:	fff00000 	.word	0xfff00000
 80098f4:	7ff00000 	.word	0x7ff00000
 80098f8:	433fffff 	.word	0x433fffff
 80098fc:	3ff00000 	.word	0x3ff00000
 8009900:	3fefffff 	.word	0x3fefffff
 8009904:	3fe00000 	.word	0x3fe00000
 8009908:	41e00000 	.word	0x41e00000
 800990c:	4b60      	ldr	r3, [pc, #384]	; (8009a90 <__ieee754_pow+0x3f0>)
 800990e:	2200      	movs	r2, #0
 8009910:	f7f6 fcc2 	bl	8000298 <__aeabi_dsub>
 8009914:	a354      	add	r3, pc, #336	; (adr r3, 8009a68 <__ieee754_pow+0x3c8>)
 8009916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991a:	4604      	mov	r4, r0
 800991c:	460d      	mov	r5, r1
 800991e:	f7f6 fe73 	bl	8000608 <__aeabi_dmul>
 8009922:	a353      	add	r3, pc, #332	; (adr r3, 8009a70 <__ieee754_pow+0x3d0>)
 8009924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009928:	4606      	mov	r6, r0
 800992a:	460f      	mov	r7, r1
 800992c:	4620      	mov	r0, r4
 800992e:	4629      	mov	r1, r5
 8009930:	f7f6 fe6a 	bl	8000608 <__aeabi_dmul>
 8009934:	4b57      	ldr	r3, [pc, #348]	; (8009a94 <__ieee754_pow+0x3f4>)
 8009936:	4682      	mov	sl, r0
 8009938:	468b      	mov	fp, r1
 800993a:	2200      	movs	r2, #0
 800993c:	4620      	mov	r0, r4
 800993e:	4629      	mov	r1, r5
 8009940:	f7f6 fe62 	bl	8000608 <__aeabi_dmul>
 8009944:	4602      	mov	r2, r0
 8009946:	460b      	mov	r3, r1
 8009948:	a14b      	add	r1, pc, #300	; (adr r1, 8009a78 <__ieee754_pow+0x3d8>)
 800994a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800994e:	f7f6 fca3 	bl	8000298 <__aeabi_dsub>
 8009952:	4622      	mov	r2, r4
 8009954:	462b      	mov	r3, r5
 8009956:	f7f6 fe57 	bl	8000608 <__aeabi_dmul>
 800995a:	4602      	mov	r2, r0
 800995c:	460b      	mov	r3, r1
 800995e:	2000      	movs	r0, #0
 8009960:	494d      	ldr	r1, [pc, #308]	; (8009a98 <__ieee754_pow+0x3f8>)
 8009962:	f7f6 fc99 	bl	8000298 <__aeabi_dsub>
 8009966:	4622      	mov	r2, r4
 8009968:	4680      	mov	r8, r0
 800996a:	4689      	mov	r9, r1
 800996c:	462b      	mov	r3, r5
 800996e:	4620      	mov	r0, r4
 8009970:	4629      	mov	r1, r5
 8009972:	f7f6 fe49 	bl	8000608 <__aeabi_dmul>
 8009976:	4602      	mov	r2, r0
 8009978:	460b      	mov	r3, r1
 800997a:	4640      	mov	r0, r8
 800997c:	4649      	mov	r1, r9
 800997e:	f7f6 fe43 	bl	8000608 <__aeabi_dmul>
 8009982:	a33f      	add	r3, pc, #252	; (adr r3, 8009a80 <__ieee754_pow+0x3e0>)
 8009984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009988:	f7f6 fe3e 	bl	8000608 <__aeabi_dmul>
 800998c:	4602      	mov	r2, r0
 800998e:	460b      	mov	r3, r1
 8009990:	4650      	mov	r0, sl
 8009992:	4659      	mov	r1, fp
 8009994:	f7f6 fc80 	bl	8000298 <__aeabi_dsub>
 8009998:	4602      	mov	r2, r0
 800999a:	460b      	mov	r3, r1
 800999c:	4680      	mov	r8, r0
 800999e:	4689      	mov	r9, r1
 80099a0:	4630      	mov	r0, r6
 80099a2:	4639      	mov	r1, r7
 80099a4:	f7f6 fc7a 	bl	800029c <__adddf3>
 80099a8:	2000      	movs	r0, #0
 80099aa:	4632      	mov	r2, r6
 80099ac:	463b      	mov	r3, r7
 80099ae:	4604      	mov	r4, r0
 80099b0:	460d      	mov	r5, r1
 80099b2:	f7f6 fc71 	bl	8000298 <__aeabi_dsub>
 80099b6:	4602      	mov	r2, r0
 80099b8:	460b      	mov	r3, r1
 80099ba:	4640      	mov	r0, r8
 80099bc:	4649      	mov	r1, r9
 80099be:	f7f6 fc6b 	bl	8000298 <__aeabi_dsub>
 80099c2:	9b04      	ldr	r3, [sp, #16]
 80099c4:	9a06      	ldr	r2, [sp, #24]
 80099c6:	3b01      	subs	r3, #1
 80099c8:	4313      	orrs	r3, r2
 80099ca:	4682      	mov	sl, r0
 80099cc:	468b      	mov	fp, r1
 80099ce:	f040 81e7 	bne.w	8009da0 <__ieee754_pow+0x700>
 80099d2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009a88 <__ieee754_pow+0x3e8>
 80099d6:	eeb0 8a47 	vmov.f32	s16, s14
 80099da:	eef0 8a67 	vmov.f32	s17, s15
 80099de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80099e2:	2600      	movs	r6, #0
 80099e4:	4632      	mov	r2, r6
 80099e6:	463b      	mov	r3, r7
 80099e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099ec:	f7f6 fc54 	bl	8000298 <__aeabi_dsub>
 80099f0:	4622      	mov	r2, r4
 80099f2:	462b      	mov	r3, r5
 80099f4:	f7f6 fe08 	bl	8000608 <__aeabi_dmul>
 80099f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099fc:	4680      	mov	r8, r0
 80099fe:	4689      	mov	r9, r1
 8009a00:	4650      	mov	r0, sl
 8009a02:	4659      	mov	r1, fp
 8009a04:	f7f6 fe00 	bl	8000608 <__aeabi_dmul>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	4640      	mov	r0, r8
 8009a0e:	4649      	mov	r1, r9
 8009a10:	f7f6 fc44 	bl	800029c <__adddf3>
 8009a14:	4632      	mov	r2, r6
 8009a16:	463b      	mov	r3, r7
 8009a18:	4680      	mov	r8, r0
 8009a1a:	4689      	mov	r9, r1
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	4629      	mov	r1, r5
 8009a20:	f7f6 fdf2 	bl	8000608 <__aeabi_dmul>
 8009a24:	460b      	mov	r3, r1
 8009a26:	4604      	mov	r4, r0
 8009a28:	460d      	mov	r5, r1
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	4649      	mov	r1, r9
 8009a2e:	4640      	mov	r0, r8
 8009a30:	f7f6 fc34 	bl	800029c <__adddf3>
 8009a34:	4b19      	ldr	r3, [pc, #100]	; (8009a9c <__ieee754_pow+0x3fc>)
 8009a36:	4299      	cmp	r1, r3
 8009a38:	ec45 4b19 	vmov	d9, r4, r5
 8009a3c:	4606      	mov	r6, r0
 8009a3e:	460f      	mov	r7, r1
 8009a40:	468b      	mov	fp, r1
 8009a42:	f340 82f0 	ble.w	800a026 <__ieee754_pow+0x986>
 8009a46:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009a4a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009a4e:	4303      	orrs	r3, r0
 8009a50:	f000 81e4 	beq.w	8009e1c <__ieee754_pow+0x77c>
 8009a54:	ec51 0b18 	vmov	r0, r1, d8
 8009a58:	2200      	movs	r2, #0
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	f7f7 f846 	bl	8000aec <__aeabi_dcmplt>
 8009a60:	3800      	subs	r0, #0
 8009a62:	bf18      	it	ne
 8009a64:	2001      	movne	r0, #1
 8009a66:	e72b      	b.n	80098c0 <__ieee754_pow+0x220>
 8009a68:	60000000 	.word	0x60000000
 8009a6c:	3ff71547 	.word	0x3ff71547
 8009a70:	f85ddf44 	.word	0xf85ddf44
 8009a74:	3e54ae0b 	.word	0x3e54ae0b
 8009a78:	55555555 	.word	0x55555555
 8009a7c:	3fd55555 	.word	0x3fd55555
 8009a80:	652b82fe 	.word	0x652b82fe
 8009a84:	3ff71547 	.word	0x3ff71547
 8009a88:	00000000 	.word	0x00000000
 8009a8c:	bff00000 	.word	0xbff00000
 8009a90:	3ff00000 	.word	0x3ff00000
 8009a94:	3fd00000 	.word	0x3fd00000
 8009a98:	3fe00000 	.word	0x3fe00000
 8009a9c:	408fffff 	.word	0x408fffff
 8009aa0:	4bd5      	ldr	r3, [pc, #852]	; (8009df8 <__ieee754_pow+0x758>)
 8009aa2:	402b      	ands	r3, r5
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	b92b      	cbnz	r3, 8009ab4 <__ieee754_pow+0x414>
 8009aa8:	4bd4      	ldr	r3, [pc, #848]	; (8009dfc <__ieee754_pow+0x75c>)
 8009aaa:	f7f6 fdad 	bl	8000608 <__aeabi_dmul>
 8009aae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009ab2:	460c      	mov	r4, r1
 8009ab4:	1523      	asrs	r3, r4, #20
 8009ab6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009aba:	4413      	add	r3, r2
 8009abc:	9305      	str	r3, [sp, #20]
 8009abe:	4bd0      	ldr	r3, [pc, #832]	; (8009e00 <__ieee754_pow+0x760>)
 8009ac0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009ac4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009ac8:	429c      	cmp	r4, r3
 8009aca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009ace:	dd08      	ble.n	8009ae2 <__ieee754_pow+0x442>
 8009ad0:	4bcc      	ldr	r3, [pc, #816]	; (8009e04 <__ieee754_pow+0x764>)
 8009ad2:	429c      	cmp	r4, r3
 8009ad4:	f340 8162 	ble.w	8009d9c <__ieee754_pow+0x6fc>
 8009ad8:	9b05      	ldr	r3, [sp, #20]
 8009ada:	3301      	adds	r3, #1
 8009adc:	9305      	str	r3, [sp, #20]
 8009ade:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009ae2:	2400      	movs	r4, #0
 8009ae4:	00e3      	lsls	r3, r4, #3
 8009ae6:	9307      	str	r3, [sp, #28]
 8009ae8:	4bc7      	ldr	r3, [pc, #796]	; (8009e08 <__ieee754_pow+0x768>)
 8009aea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009aee:	ed93 7b00 	vldr	d7, [r3]
 8009af2:	4629      	mov	r1, r5
 8009af4:	ec53 2b17 	vmov	r2, r3, d7
 8009af8:	eeb0 9a47 	vmov.f32	s18, s14
 8009afc:	eef0 9a67 	vmov.f32	s19, s15
 8009b00:	4682      	mov	sl, r0
 8009b02:	f7f6 fbc9 	bl	8000298 <__aeabi_dsub>
 8009b06:	4652      	mov	r2, sl
 8009b08:	4606      	mov	r6, r0
 8009b0a:	460f      	mov	r7, r1
 8009b0c:	462b      	mov	r3, r5
 8009b0e:	ec51 0b19 	vmov	r0, r1, d9
 8009b12:	f7f6 fbc3 	bl	800029c <__adddf3>
 8009b16:	4602      	mov	r2, r0
 8009b18:	460b      	mov	r3, r1
 8009b1a:	2000      	movs	r0, #0
 8009b1c:	49bb      	ldr	r1, [pc, #748]	; (8009e0c <__ieee754_pow+0x76c>)
 8009b1e:	f7f6 fe9d 	bl	800085c <__aeabi_ddiv>
 8009b22:	ec41 0b1a 	vmov	d10, r0, r1
 8009b26:	4602      	mov	r2, r0
 8009b28:	460b      	mov	r3, r1
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	4639      	mov	r1, r7
 8009b2e:	f7f6 fd6b 	bl	8000608 <__aeabi_dmul>
 8009b32:	2300      	movs	r3, #0
 8009b34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b38:	9302      	str	r3, [sp, #8]
 8009b3a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009b3e:	46ab      	mov	fp, r5
 8009b40:	106d      	asrs	r5, r5, #1
 8009b42:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009b46:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009b4a:	ec41 0b18 	vmov	d8, r0, r1
 8009b4e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009b52:	2200      	movs	r2, #0
 8009b54:	4640      	mov	r0, r8
 8009b56:	4649      	mov	r1, r9
 8009b58:	4614      	mov	r4, r2
 8009b5a:	461d      	mov	r5, r3
 8009b5c:	f7f6 fd54 	bl	8000608 <__aeabi_dmul>
 8009b60:	4602      	mov	r2, r0
 8009b62:	460b      	mov	r3, r1
 8009b64:	4630      	mov	r0, r6
 8009b66:	4639      	mov	r1, r7
 8009b68:	f7f6 fb96 	bl	8000298 <__aeabi_dsub>
 8009b6c:	ec53 2b19 	vmov	r2, r3, d9
 8009b70:	4606      	mov	r6, r0
 8009b72:	460f      	mov	r7, r1
 8009b74:	4620      	mov	r0, r4
 8009b76:	4629      	mov	r1, r5
 8009b78:	f7f6 fb8e 	bl	8000298 <__aeabi_dsub>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	460b      	mov	r3, r1
 8009b80:	4650      	mov	r0, sl
 8009b82:	4659      	mov	r1, fp
 8009b84:	f7f6 fb88 	bl	8000298 <__aeabi_dsub>
 8009b88:	4642      	mov	r2, r8
 8009b8a:	464b      	mov	r3, r9
 8009b8c:	f7f6 fd3c 	bl	8000608 <__aeabi_dmul>
 8009b90:	4602      	mov	r2, r0
 8009b92:	460b      	mov	r3, r1
 8009b94:	4630      	mov	r0, r6
 8009b96:	4639      	mov	r1, r7
 8009b98:	f7f6 fb7e 	bl	8000298 <__aeabi_dsub>
 8009b9c:	ec53 2b1a 	vmov	r2, r3, d10
 8009ba0:	f7f6 fd32 	bl	8000608 <__aeabi_dmul>
 8009ba4:	ec53 2b18 	vmov	r2, r3, d8
 8009ba8:	ec41 0b19 	vmov	d9, r0, r1
 8009bac:	ec51 0b18 	vmov	r0, r1, d8
 8009bb0:	f7f6 fd2a 	bl	8000608 <__aeabi_dmul>
 8009bb4:	a37c      	add	r3, pc, #496	; (adr r3, 8009da8 <__ieee754_pow+0x708>)
 8009bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bba:	4604      	mov	r4, r0
 8009bbc:	460d      	mov	r5, r1
 8009bbe:	f7f6 fd23 	bl	8000608 <__aeabi_dmul>
 8009bc2:	a37b      	add	r3, pc, #492	; (adr r3, 8009db0 <__ieee754_pow+0x710>)
 8009bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc8:	f7f6 fb68 	bl	800029c <__adddf3>
 8009bcc:	4622      	mov	r2, r4
 8009bce:	462b      	mov	r3, r5
 8009bd0:	f7f6 fd1a 	bl	8000608 <__aeabi_dmul>
 8009bd4:	a378      	add	r3, pc, #480	; (adr r3, 8009db8 <__ieee754_pow+0x718>)
 8009bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bda:	f7f6 fb5f 	bl	800029c <__adddf3>
 8009bde:	4622      	mov	r2, r4
 8009be0:	462b      	mov	r3, r5
 8009be2:	f7f6 fd11 	bl	8000608 <__aeabi_dmul>
 8009be6:	a376      	add	r3, pc, #472	; (adr r3, 8009dc0 <__ieee754_pow+0x720>)
 8009be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bec:	f7f6 fb56 	bl	800029c <__adddf3>
 8009bf0:	4622      	mov	r2, r4
 8009bf2:	462b      	mov	r3, r5
 8009bf4:	f7f6 fd08 	bl	8000608 <__aeabi_dmul>
 8009bf8:	a373      	add	r3, pc, #460	; (adr r3, 8009dc8 <__ieee754_pow+0x728>)
 8009bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfe:	f7f6 fb4d 	bl	800029c <__adddf3>
 8009c02:	4622      	mov	r2, r4
 8009c04:	462b      	mov	r3, r5
 8009c06:	f7f6 fcff 	bl	8000608 <__aeabi_dmul>
 8009c0a:	a371      	add	r3, pc, #452	; (adr r3, 8009dd0 <__ieee754_pow+0x730>)
 8009c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c10:	f7f6 fb44 	bl	800029c <__adddf3>
 8009c14:	4622      	mov	r2, r4
 8009c16:	4606      	mov	r6, r0
 8009c18:	460f      	mov	r7, r1
 8009c1a:	462b      	mov	r3, r5
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	4629      	mov	r1, r5
 8009c20:	f7f6 fcf2 	bl	8000608 <__aeabi_dmul>
 8009c24:	4602      	mov	r2, r0
 8009c26:	460b      	mov	r3, r1
 8009c28:	4630      	mov	r0, r6
 8009c2a:	4639      	mov	r1, r7
 8009c2c:	f7f6 fcec 	bl	8000608 <__aeabi_dmul>
 8009c30:	4642      	mov	r2, r8
 8009c32:	4604      	mov	r4, r0
 8009c34:	460d      	mov	r5, r1
 8009c36:	464b      	mov	r3, r9
 8009c38:	ec51 0b18 	vmov	r0, r1, d8
 8009c3c:	f7f6 fb2e 	bl	800029c <__adddf3>
 8009c40:	ec53 2b19 	vmov	r2, r3, d9
 8009c44:	f7f6 fce0 	bl	8000608 <__aeabi_dmul>
 8009c48:	4622      	mov	r2, r4
 8009c4a:	462b      	mov	r3, r5
 8009c4c:	f7f6 fb26 	bl	800029c <__adddf3>
 8009c50:	4642      	mov	r2, r8
 8009c52:	4682      	mov	sl, r0
 8009c54:	468b      	mov	fp, r1
 8009c56:	464b      	mov	r3, r9
 8009c58:	4640      	mov	r0, r8
 8009c5a:	4649      	mov	r1, r9
 8009c5c:	f7f6 fcd4 	bl	8000608 <__aeabi_dmul>
 8009c60:	4b6b      	ldr	r3, [pc, #428]	; (8009e10 <__ieee754_pow+0x770>)
 8009c62:	2200      	movs	r2, #0
 8009c64:	4606      	mov	r6, r0
 8009c66:	460f      	mov	r7, r1
 8009c68:	f7f6 fb18 	bl	800029c <__adddf3>
 8009c6c:	4652      	mov	r2, sl
 8009c6e:	465b      	mov	r3, fp
 8009c70:	f7f6 fb14 	bl	800029c <__adddf3>
 8009c74:	2000      	movs	r0, #0
 8009c76:	4604      	mov	r4, r0
 8009c78:	460d      	mov	r5, r1
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	4640      	mov	r0, r8
 8009c80:	4649      	mov	r1, r9
 8009c82:	f7f6 fcc1 	bl	8000608 <__aeabi_dmul>
 8009c86:	4b62      	ldr	r3, [pc, #392]	; (8009e10 <__ieee754_pow+0x770>)
 8009c88:	4680      	mov	r8, r0
 8009c8a:	4689      	mov	r9, r1
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	4620      	mov	r0, r4
 8009c90:	4629      	mov	r1, r5
 8009c92:	f7f6 fb01 	bl	8000298 <__aeabi_dsub>
 8009c96:	4632      	mov	r2, r6
 8009c98:	463b      	mov	r3, r7
 8009c9a:	f7f6 fafd 	bl	8000298 <__aeabi_dsub>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	4650      	mov	r0, sl
 8009ca4:	4659      	mov	r1, fp
 8009ca6:	f7f6 faf7 	bl	8000298 <__aeabi_dsub>
 8009caa:	ec53 2b18 	vmov	r2, r3, d8
 8009cae:	f7f6 fcab 	bl	8000608 <__aeabi_dmul>
 8009cb2:	4622      	mov	r2, r4
 8009cb4:	4606      	mov	r6, r0
 8009cb6:	460f      	mov	r7, r1
 8009cb8:	462b      	mov	r3, r5
 8009cba:	ec51 0b19 	vmov	r0, r1, d9
 8009cbe:	f7f6 fca3 	bl	8000608 <__aeabi_dmul>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	4630      	mov	r0, r6
 8009cc8:	4639      	mov	r1, r7
 8009cca:	f7f6 fae7 	bl	800029c <__adddf3>
 8009cce:	4606      	mov	r6, r0
 8009cd0:	460f      	mov	r7, r1
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	4640      	mov	r0, r8
 8009cd8:	4649      	mov	r1, r9
 8009cda:	f7f6 fadf 	bl	800029c <__adddf3>
 8009cde:	a33e      	add	r3, pc, #248	; (adr r3, 8009dd8 <__ieee754_pow+0x738>)
 8009ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	460d      	mov	r5, r1
 8009cea:	f7f6 fc8d 	bl	8000608 <__aeabi_dmul>
 8009cee:	4642      	mov	r2, r8
 8009cf0:	ec41 0b18 	vmov	d8, r0, r1
 8009cf4:	464b      	mov	r3, r9
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	4629      	mov	r1, r5
 8009cfa:	f7f6 facd 	bl	8000298 <__aeabi_dsub>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	460b      	mov	r3, r1
 8009d02:	4630      	mov	r0, r6
 8009d04:	4639      	mov	r1, r7
 8009d06:	f7f6 fac7 	bl	8000298 <__aeabi_dsub>
 8009d0a:	a335      	add	r3, pc, #212	; (adr r3, 8009de0 <__ieee754_pow+0x740>)
 8009d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d10:	f7f6 fc7a 	bl	8000608 <__aeabi_dmul>
 8009d14:	a334      	add	r3, pc, #208	; (adr r3, 8009de8 <__ieee754_pow+0x748>)
 8009d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1a:	4606      	mov	r6, r0
 8009d1c:	460f      	mov	r7, r1
 8009d1e:	4620      	mov	r0, r4
 8009d20:	4629      	mov	r1, r5
 8009d22:	f7f6 fc71 	bl	8000608 <__aeabi_dmul>
 8009d26:	4602      	mov	r2, r0
 8009d28:	460b      	mov	r3, r1
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	4639      	mov	r1, r7
 8009d2e:	f7f6 fab5 	bl	800029c <__adddf3>
 8009d32:	9a07      	ldr	r2, [sp, #28]
 8009d34:	4b37      	ldr	r3, [pc, #220]	; (8009e14 <__ieee754_pow+0x774>)
 8009d36:	4413      	add	r3, r2
 8009d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3c:	f7f6 faae 	bl	800029c <__adddf3>
 8009d40:	4682      	mov	sl, r0
 8009d42:	9805      	ldr	r0, [sp, #20]
 8009d44:	468b      	mov	fp, r1
 8009d46:	f7f6 fbf5 	bl	8000534 <__aeabi_i2d>
 8009d4a:	9a07      	ldr	r2, [sp, #28]
 8009d4c:	4b32      	ldr	r3, [pc, #200]	; (8009e18 <__ieee754_pow+0x778>)
 8009d4e:	4413      	add	r3, r2
 8009d50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d54:	4606      	mov	r6, r0
 8009d56:	460f      	mov	r7, r1
 8009d58:	4652      	mov	r2, sl
 8009d5a:	465b      	mov	r3, fp
 8009d5c:	ec51 0b18 	vmov	r0, r1, d8
 8009d60:	f7f6 fa9c 	bl	800029c <__adddf3>
 8009d64:	4642      	mov	r2, r8
 8009d66:	464b      	mov	r3, r9
 8009d68:	f7f6 fa98 	bl	800029c <__adddf3>
 8009d6c:	4632      	mov	r2, r6
 8009d6e:	463b      	mov	r3, r7
 8009d70:	f7f6 fa94 	bl	800029c <__adddf3>
 8009d74:	2000      	movs	r0, #0
 8009d76:	4632      	mov	r2, r6
 8009d78:	463b      	mov	r3, r7
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	460d      	mov	r5, r1
 8009d7e:	f7f6 fa8b 	bl	8000298 <__aeabi_dsub>
 8009d82:	4642      	mov	r2, r8
 8009d84:	464b      	mov	r3, r9
 8009d86:	f7f6 fa87 	bl	8000298 <__aeabi_dsub>
 8009d8a:	ec53 2b18 	vmov	r2, r3, d8
 8009d8e:	f7f6 fa83 	bl	8000298 <__aeabi_dsub>
 8009d92:	4602      	mov	r2, r0
 8009d94:	460b      	mov	r3, r1
 8009d96:	4650      	mov	r0, sl
 8009d98:	4659      	mov	r1, fp
 8009d9a:	e610      	b.n	80099be <__ieee754_pow+0x31e>
 8009d9c:	2401      	movs	r4, #1
 8009d9e:	e6a1      	b.n	8009ae4 <__ieee754_pow+0x444>
 8009da0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009df0 <__ieee754_pow+0x750>
 8009da4:	e617      	b.n	80099d6 <__ieee754_pow+0x336>
 8009da6:	bf00      	nop
 8009da8:	4a454eef 	.word	0x4a454eef
 8009dac:	3fca7e28 	.word	0x3fca7e28
 8009db0:	93c9db65 	.word	0x93c9db65
 8009db4:	3fcd864a 	.word	0x3fcd864a
 8009db8:	a91d4101 	.word	0xa91d4101
 8009dbc:	3fd17460 	.word	0x3fd17460
 8009dc0:	518f264d 	.word	0x518f264d
 8009dc4:	3fd55555 	.word	0x3fd55555
 8009dc8:	db6fabff 	.word	0xdb6fabff
 8009dcc:	3fdb6db6 	.word	0x3fdb6db6
 8009dd0:	33333303 	.word	0x33333303
 8009dd4:	3fe33333 	.word	0x3fe33333
 8009dd8:	e0000000 	.word	0xe0000000
 8009ddc:	3feec709 	.word	0x3feec709
 8009de0:	dc3a03fd 	.word	0xdc3a03fd
 8009de4:	3feec709 	.word	0x3feec709
 8009de8:	145b01f5 	.word	0x145b01f5
 8009dec:	be3e2fe0 	.word	0xbe3e2fe0
 8009df0:	00000000 	.word	0x00000000
 8009df4:	3ff00000 	.word	0x3ff00000
 8009df8:	7ff00000 	.word	0x7ff00000
 8009dfc:	43400000 	.word	0x43400000
 8009e00:	0003988e 	.word	0x0003988e
 8009e04:	000bb679 	.word	0x000bb679
 8009e08:	0800afc0 	.word	0x0800afc0
 8009e0c:	3ff00000 	.word	0x3ff00000
 8009e10:	40080000 	.word	0x40080000
 8009e14:	0800afe0 	.word	0x0800afe0
 8009e18:	0800afd0 	.word	0x0800afd0
 8009e1c:	a3b3      	add	r3, pc, #716	; (adr r3, 800a0ec <__ieee754_pow+0xa4c>)
 8009e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e22:	4640      	mov	r0, r8
 8009e24:	4649      	mov	r1, r9
 8009e26:	f7f6 fa39 	bl	800029c <__adddf3>
 8009e2a:	4622      	mov	r2, r4
 8009e2c:	ec41 0b1a 	vmov	d10, r0, r1
 8009e30:	462b      	mov	r3, r5
 8009e32:	4630      	mov	r0, r6
 8009e34:	4639      	mov	r1, r7
 8009e36:	f7f6 fa2f 	bl	8000298 <__aeabi_dsub>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	ec51 0b1a 	vmov	r0, r1, d10
 8009e42:	f7f6 fe71 	bl	8000b28 <__aeabi_dcmpgt>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	f47f ae04 	bne.w	8009a54 <__ieee754_pow+0x3b4>
 8009e4c:	4aa2      	ldr	r2, [pc, #648]	; (800a0d8 <__ieee754_pow+0xa38>)
 8009e4e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e52:	4293      	cmp	r3, r2
 8009e54:	f340 8107 	ble.w	800a066 <__ieee754_pow+0x9c6>
 8009e58:	151b      	asrs	r3, r3, #20
 8009e5a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009e5e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009e62:	fa4a fa03 	asr.w	sl, sl, r3
 8009e66:	44da      	add	sl, fp
 8009e68:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009e6c:	489b      	ldr	r0, [pc, #620]	; (800a0dc <__ieee754_pow+0xa3c>)
 8009e6e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009e72:	4108      	asrs	r0, r1
 8009e74:	ea00 030a 	and.w	r3, r0, sl
 8009e78:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009e7c:	f1c1 0114 	rsb	r1, r1, #20
 8009e80:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009e84:	fa4a fa01 	asr.w	sl, sl, r1
 8009e88:	f1bb 0f00 	cmp.w	fp, #0
 8009e8c:	f04f 0200 	mov.w	r2, #0
 8009e90:	4620      	mov	r0, r4
 8009e92:	4629      	mov	r1, r5
 8009e94:	bfb8      	it	lt
 8009e96:	f1ca 0a00 	rsblt	sl, sl, #0
 8009e9a:	f7f6 f9fd 	bl	8000298 <__aeabi_dsub>
 8009e9e:	ec41 0b19 	vmov	d9, r0, r1
 8009ea2:	4642      	mov	r2, r8
 8009ea4:	464b      	mov	r3, r9
 8009ea6:	ec51 0b19 	vmov	r0, r1, d9
 8009eaa:	f7f6 f9f7 	bl	800029c <__adddf3>
 8009eae:	a37a      	add	r3, pc, #488	; (adr r3, 800a098 <__ieee754_pow+0x9f8>)
 8009eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb4:	2000      	movs	r0, #0
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	460d      	mov	r5, r1
 8009eba:	f7f6 fba5 	bl	8000608 <__aeabi_dmul>
 8009ebe:	ec53 2b19 	vmov	r2, r3, d9
 8009ec2:	4606      	mov	r6, r0
 8009ec4:	460f      	mov	r7, r1
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	4629      	mov	r1, r5
 8009eca:	f7f6 f9e5 	bl	8000298 <__aeabi_dsub>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	4640      	mov	r0, r8
 8009ed4:	4649      	mov	r1, r9
 8009ed6:	f7f6 f9df 	bl	8000298 <__aeabi_dsub>
 8009eda:	a371      	add	r3, pc, #452	; (adr r3, 800a0a0 <__ieee754_pow+0xa00>)
 8009edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee0:	f7f6 fb92 	bl	8000608 <__aeabi_dmul>
 8009ee4:	a370      	add	r3, pc, #448	; (adr r3, 800a0a8 <__ieee754_pow+0xa08>)
 8009ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eea:	4680      	mov	r8, r0
 8009eec:	4689      	mov	r9, r1
 8009eee:	4620      	mov	r0, r4
 8009ef0:	4629      	mov	r1, r5
 8009ef2:	f7f6 fb89 	bl	8000608 <__aeabi_dmul>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	460b      	mov	r3, r1
 8009efa:	4640      	mov	r0, r8
 8009efc:	4649      	mov	r1, r9
 8009efe:	f7f6 f9cd 	bl	800029c <__adddf3>
 8009f02:	4604      	mov	r4, r0
 8009f04:	460d      	mov	r5, r1
 8009f06:	4602      	mov	r2, r0
 8009f08:	460b      	mov	r3, r1
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	4639      	mov	r1, r7
 8009f0e:	f7f6 f9c5 	bl	800029c <__adddf3>
 8009f12:	4632      	mov	r2, r6
 8009f14:	463b      	mov	r3, r7
 8009f16:	4680      	mov	r8, r0
 8009f18:	4689      	mov	r9, r1
 8009f1a:	f7f6 f9bd 	bl	8000298 <__aeabi_dsub>
 8009f1e:	4602      	mov	r2, r0
 8009f20:	460b      	mov	r3, r1
 8009f22:	4620      	mov	r0, r4
 8009f24:	4629      	mov	r1, r5
 8009f26:	f7f6 f9b7 	bl	8000298 <__aeabi_dsub>
 8009f2a:	4642      	mov	r2, r8
 8009f2c:	4606      	mov	r6, r0
 8009f2e:	460f      	mov	r7, r1
 8009f30:	464b      	mov	r3, r9
 8009f32:	4640      	mov	r0, r8
 8009f34:	4649      	mov	r1, r9
 8009f36:	f7f6 fb67 	bl	8000608 <__aeabi_dmul>
 8009f3a:	a35d      	add	r3, pc, #372	; (adr r3, 800a0b0 <__ieee754_pow+0xa10>)
 8009f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f40:	4604      	mov	r4, r0
 8009f42:	460d      	mov	r5, r1
 8009f44:	f7f6 fb60 	bl	8000608 <__aeabi_dmul>
 8009f48:	a35b      	add	r3, pc, #364	; (adr r3, 800a0b8 <__ieee754_pow+0xa18>)
 8009f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4e:	f7f6 f9a3 	bl	8000298 <__aeabi_dsub>
 8009f52:	4622      	mov	r2, r4
 8009f54:	462b      	mov	r3, r5
 8009f56:	f7f6 fb57 	bl	8000608 <__aeabi_dmul>
 8009f5a:	a359      	add	r3, pc, #356	; (adr r3, 800a0c0 <__ieee754_pow+0xa20>)
 8009f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f60:	f7f6 f99c 	bl	800029c <__adddf3>
 8009f64:	4622      	mov	r2, r4
 8009f66:	462b      	mov	r3, r5
 8009f68:	f7f6 fb4e 	bl	8000608 <__aeabi_dmul>
 8009f6c:	a356      	add	r3, pc, #344	; (adr r3, 800a0c8 <__ieee754_pow+0xa28>)
 8009f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f72:	f7f6 f991 	bl	8000298 <__aeabi_dsub>
 8009f76:	4622      	mov	r2, r4
 8009f78:	462b      	mov	r3, r5
 8009f7a:	f7f6 fb45 	bl	8000608 <__aeabi_dmul>
 8009f7e:	a354      	add	r3, pc, #336	; (adr r3, 800a0d0 <__ieee754_pow+0xa30>)
 8009f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f84:	f7f6 f98a 	bl	800029c <__adddf3>
 8009f88:	4622      	mov	r2, r4
 8009f8a:	462b      	mov	r3, r5
 8009f8c:	f7f6 fb3c 	bl	8000608 <__aeabi_dmul>
 8009f90:	4602      	mov	r2, r0
 8009f92:	460b      	mov	r3, r1
 8009f94:	4640      	mov	r0, r8
 8009f96:	4649      	mov	r1, r9
 8009f98:	f7f6 f97e 	bl	8000298 <__aeabi_dsub>
 8009f9c:	4604      	mov	r4, r0
 8009f9e:	460d      	mov	r5, r1
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	4640      	mov	r0, r8
 8009fa6:	4649      	mov	r1, r9
 8009fa8:	f7f6 fb2e 	bl	8000608 <__aeabi_dmul>
 8009fac:	2200      	movs	r2, #0
 8009fae:	ec41 0b19 	vmov	d9, r0, r1
 8009fb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	4629      	mov	r1, r5
 8009fba:	f7f6 f96d 	bl	8000298 <__aeabi_dsub>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	ec51 0b19 	vmov	r0, r1, d9
 8009fc6:	f7f6 fc49 	bl	800085c <__aeabi_ddiv>
 8009fca:	4632      	mov	r2, r6
 8009fcc:	4604      	mov	r4, r0
 8009fce:	460d      	mov	r5, r1
 8009fd0:	463b      	mov	r3, r7
 8009fd2:	4640      	mov	r0, r8
 8009fd4:	4649      	mov	r1, r9
 8009fd6:	f7f6 fb17 	bl	8000608 <__aeabi_dmul>
 8009fda:	4632      	mov	r2, r6
 8009fdc:	463b      	mov	r3, r7
 8009fde:	f7f6 f95d 	bl	800029c <__adddf3>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	4629      	mov	r1, r5
 8009fea:	f7f6 f955 	bl	8000298 <__aeabi_dsub>
 8009fee:	4642      	mov	r2, r8
 8009ff0:	464b      	mov	r3, r9
 8009ff2:	f7f6 f951 	bl	8000298 <__aeabi_dsub>
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	4939      	ldr	r1, [pc, #228]	; (800a0e0 <__ieee754_pow+0xa40>)
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	f7f6 f94b 	bl	8000298 <__aeabi_dsub>
 800a002:	ec41 0b10 	vmov	d0, r0, r1
 800a006:	ee10 3a90 	vmov	r3, s1
 800a00a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a00e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a012:	da2b      	bge.n	800a06c <__ieee754_pow+0x9cc>
 800a014:	4650      	mov	r0, sl
 800a016:	f000 f877 	bl	800a108 <scalbn>
 800a01a:	ec51 0b10 	vmov	r0, r1, d0
 800a01e:	ec53 2b18 	vmov	r2, r3, d8
 800a022:	f7ff bbee 	b.w	8009802 <__ieee754_pow+0x162>
 800a026:	4b2f      	ldr	r3, [pc, #188]	; (800a0e4 <__ieee754_pow+0xa44>)
 800a028:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a02c:	429e      	cmp	r6, r3
 800a02e:	f77f af0d 	ble.w	8009e4c <__ieee754_pow+0x7ac>
 800a032:	4b2d      	ldr	r3, [pc, #180]	; (800a0e8 <__ieee754_pow+0xa48>)
 800a034:	440b      	add	r3, r1
 800a036:	4303      	orrs	r3, r0
 800a038:	d009      	beq.n	800a04e <__ieee754_pow+0x9ae>
 800a03a:	ec51 0b18 	vmov	r0, r1, d8
 800a03e:	2200      	movs	r2, #0
 800a040:	2300      	movs	r3, #0
 800a042:	f7f6 fd53 	bl	8000aec <__aeabi_dcmplt>
 800a046:	3800      	subs	r0, #0
 800a048:	bf18      	it	ne
 800a04a:	2001      	movne	r0, #1
 800a04c:	e448      	b.n	80098e0 <__ieee754_pow+0x240>
 800a04e:	4622      	mov	r2, r4
 800a050:	462b      	mov	r3, r5
 800a052:	f7f6 f921 	bl	8000298 <__aeabi_dsub>
 800a056:	4642      	mov	r2, r8
 800a058:	464b      	mov	r3, r9
 800a05a:	f7f6 fd5b 	bl	8000b14 <__aeabi_dcmpge>
 800a05e:	2800      	cmp	r0, #0
 800a060:	f43f aef4 	beq.w	8009e4c <__ieee754_pow+0x7ac>
 800a064:	e7e9      	b.n	800a03a <__ieee754_pow+0x99a>
 800a066:	f04f 0a00 	mov.w	sl, #0
 800a06a:	e71a      	b.n	8009ea2 <__ieee754_pow+0x802>
 800a06c:	ec51 0b10 	vmov	r0, r1, d0
 800a070:	4619      	mov	r1, r3
 800a072:	e7d4      	b.n	800a01e <__ieee754_pow+0x97e>
 800a074:	491a      	ldr	r1, [pc, #104]	; (800a0e0 <__ieee754_pow+0xa40>)
 800a076:	2000      	movs	r0, #0
 800a078:	f7ff bb31 	b.w	80096de <__ieee754_pow+0x3e>
 800a07c:	2000      	movs	r0, #0
 800a07e:	2100      	movs	r1, #0
 800a080:	f7ff bb2d 	b.w	80096de <__ieee754_pow+0x3e>
 800a084:	4630      	mov	r0, r6
 800a086:	4639      	mov	r1, r7
 800a088:	f7ff bb29 	b.w	80096de <__ieee754_pow+0x3e>
 800a08c:	9204      	str	r2, [sp, #16]
 800a08e:	f7ff bb7b 	b.w	8009788 <__ieee754_pow+0xe8>
 800a092:	2300      	movs	r3, #0
 800a094:	f7ff bb65 	b.w	8009762 <__ieee754_pow+0xc2>
 800a098:	00000000 	.word	0x00000000
 800a09c:	3fe62e43 	.word	0x3fe62e43
 800a0a0:	fefa39ef 	.word	0xfefa39ef
 800a0a4:	3fe62e42 	.word	0x3fe62e42
 800a0a8:	0ca86c39 	.word	0x0ca86c39
 800a0ac:	be205c61 	.word	0xbe205c61
 800a0b0:	72bea4d0 	.word	0x72bea4d0
 800a0b4:	3e663769 	.word	0x3e663769
 800a0b8:	c5d26bf1 	.word	0xc5d26bf1
 800a0bc:	3ebbbd41 	.word	0x3ebbbd41
 800a0c0:	af25de2c 	.word	0xaf25de2c
 800a0c4:	3f11566a 	.word	0x3f11566a
 800a0c8:	16bebd93 	.word	0x16bebd93
 800a0cc:	3f66c16c 	.word	0x3f66c16c
 800a0d0:	5555553e 	.word	0x5555553e
 800a0d4:	3fc55555 	.word	0x3fc55555
 800a0d8:	3fe00000 	.word	0x3fe00000
 800a0dc:	fff00000 	.word	0xfff00000
 800a0e0:	3ff00000 	.word	0x3ff00000
 800a0e4:	4090cbff 	.word	0x4090cbff
 800a0e8:	3f6f3400 	.word	0x3f6f3400
 800a0ec:	652b82fe 	.word	0x652b82fe
 800a0f0:	3c971547 	.word	0x3c971547

0800a0f4 <fabs>:
 800a0f4:	ec51 0b10 	vmov	r0, r1, d0
 800a0f8:	ee10 2a10 	vmov	r2, s0
 800a0fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a100:	ec43 2b10 	vmov	d0, r2, r3
 800a104:	4770      	bx	lr
	...

0800a108 <scalbn>:
 800a108:	b570      	push	{r4, r5, r6, lr}
 800a10a:	ec55 4b10 	vmov	r4, r5, d0
 800a10e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a112:	4606      	mov	r6, r0
 800a114:	462b      	mov	r3, r5
 800a116:	b999      	cbnz	r1, 800a140 <scalbn+0x38>
 800a118:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a11c:	4323      	orrs	r3, r4
 800a11e:	d03f      	beq.n	800a1a0 <scalbn+0x98>
 800a120:	4b35      	ldr	r3, [pc, #212]	; (800a1f8 <scalbn+0xf0>)
 800a122:	4629      	mov	r1, r5
 800a124:	ee10 0a10 	vmov	r0, s0
 800a128:	2200      	movs	r2, #0
 800a12a:	f7f6 fa6d 	bl	8000608 <__aeabi_dmul>
 800a12e:	4b33      	ldr	r3, [pc, #204]	; (800a1fc <scalbn+0xf4>)
 800a130:	429e      	cmp	r6, r3
 800a132:	4604      	mov	r4, r0
 800a134:	460d      	mov	r5, r1
 800a136:	da10      	bge.n	800a15a <scalbn+0x52>
 800a138:	a327      	add	r3, pc, #156	; (adr r3, 800a1d8 <scalbn+0xd0>)
 800a13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13e:	e01f      	b.n	800a180 <scalbn+0x78>
 800a140:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a144:	4291      	cmp	r1, r2
 800a146:	d10c      	bne.n	800a162 <scalbn+0x5a>
 800a148:	ee10 2a10 	vmov	r2, s0
 800a14c:	4620      	mov	r0, r4
 800a14e:	4629      	mov	r1, r5
 800a150:	f7f6 f8a4 	bl	800029c <__adddf3>
 800a154:	4604      	mov	r4, r0
 800a156:	460d      	mov	r5, r1
 800a158:	e022      	b.n	800a1a0 <scalbn+0x98>
 800a15a:	460b      	mov	r3, r1
 800a15c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a160:	3936      	subs	r1, #54	; 0x36
 800a162:	f24c 3250 	movw	r2, #50000	; 0xc350
 800a166:	4296      	cmp	r6, r2
 800a168:	dd0d      	ble.n	800a186 <scalbn+0x7e>
 800a16a:	2d00      	cmp	r5, #0
 800a16c:	a11c      	add	r1, pc, #112	; (adr r1, 800a1e0 <scalbn+0xd8>)
 800a16e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a172:	da02      	bge.n	800a17a <scalbn+0x72>
 800a174:	a11c      	add	r1, pc, #112	; (adr r1, 800a1e8 <scalbn+0xe0>)
 800a176:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a17a:	a319      	add	r3, pc, #100	; (adr r3, 800a1e0 <scalbn+0xd8>)
 800a17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a180:	f7f6 fa42 	bl	8000608 <__aeabi_dmul>
 800a184:	e7e6      	b.n	800a154 <scalbn+0x4c>
 800a186:	1872      	adds	r2, r6, r1
 800a188:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a18c:	428a      	cmp	r2, r1
 800a18e:	dcec      	bgt.n	800a16a <scalbn+0x62>
 800a190:	2a00      	cmp	r2, #0
 800a192:	dd08      	ble.n	800a1a6 <scalbn+0x9e>
 800a194:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a198:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a19c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a1a0:	ec45 4b10 	vmov	d0, r4, r5
 800a1a4:	bd70      	pop	{r4, r5, r6, pc}
 800a1a6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a1aa:	da08      	bge.n	800a1be <scalbn+0xb6>
 800a1ac:	2d00      	cmp	r5, #0
 800a1ae:	a10a      	add	r1, pc, #40	; (adr r1, 800a1d8 <scalbn+0xd0>)
 800a1b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1b4:	dac0      	bge.n	800a138 <scalbn+0x30>
 800a1b6:	a10e      	add	r1, pc, #56	; (adr r1, 800a1f0 <scalbn+0xe8>)
 800a1b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1bc:	e7bc      	b.n	800a138 <scalbn+0x30>
 800a1be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a1c2:	3236      	adds	r2, #54	; 0x36
 800a1c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a1c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	4b0c      	ldr	r3, [pc, #48]	; (800a200 <scalbn+0xf8>)
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	e7d5      	b.n	800a180 <scalbn+0x78>
 800a1d4:	f3af 8000 	nop.w
 800a1d8:	c2f8f359 	.word	0xc2f8f359
 800a1dc:	01a56e1f 	.word	0x01a56e1f
 800a1e0:	8800759c 	.word	0x8800759c
 800a1e4:	7e37e43c 	.word	0x7e37e43c
 800a1e8:	8800759c 	.word	0x8800759c
 800a1ec:	fe37e43c 	.word	0xfe37e43c
 800a1f0:	c2f8f359 	.word	0xc2f8f359
 800a1f4:	81a56e1f 	.word	0x81a56e1f
 800a1f8:	43500000 	.word	0x43500000
 800a1fc:	ffff3cb0 	.word	0xffff3cb0
 800a200:	3c900000 	.word	0x3c900000

0800a204 <with_errno>:
 800a204:	b570      	push	{r4, r5, r6, lr}
 800a206:	4604      	mov	r4, r0
 800a208:	460d      	mov	r5, r1
 800a20a:	4616      	mov	r6, r2
 800a20c:	f7fc ff46 	bl	800709c <__errno>
 800a210:	4629      	mov	r1, r5
 800a212:	6006      	str	r6, [r0, #0]
 800a214:	4620      	mov	r0, r4
 800a216:	bd70      	pop	{r4, r5, r6, pc}

0800a218 <xflow>:
 800a218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a21a:	4614      	mov	r4, r2
 800a21c:	461d      	mov	r5, r3
 800a21e:	b108      	cbz	r0, 800a224 <xflow+0xc>
 800a220:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a224:	e9cd 2300 	strd	r2, r3, [sp]
 800a228:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a22c:	4620      	mov	r0, r4
 800a22e:	4629      	mov	r1, r5
 800a230:	f7f6 f9ea 	bl	8000608 <__aeabi_dmul>
 800a234:	2222      	movs	r2, #34	; 0x22
 800a236:	b003      	add	sp, #12
 800a238:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a23c:	f7ff bfe2 	b.w	800a204 <with_errno>

0800a240 <__math_uflow>:
 800a240:	b508      	push	{r3, lr}
 800a242:	2200      	movs	r2, #0
 800a244:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a248:	f7ff ffe6 	bl	800a218 <xflow>
 800a24c:	ec41 0b10 	vmov	d0, r0, r1
 800a250:	bd08      	pop	{r3, pc}

0800a252 <__math_oflow>:
 800a252:	b508      	push	{r3, lr}
 800a254:	2200      	movs	r2, #0
 800a256:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a25a:	f7ff ffdd 	bl	800a218 <xflow>
 800a25e:	ec41 0b10 	vmov	d0, r0, r1
 800a262:	bd08      	pop	{r3, pc}
 800a264:	0000      	movs	r0, r0
	...

0800a268 <__ieee754_log>:
 800a268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a26c:	ec51 0b10 	vmov	r0, r1, d0
 800a270:	ed2d 8b04 	vpush	{d8-d9}
 800a274:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a278:	b083      	sub	sp, #12
 800a27a:	460d      	mov	r5, r1
 800a27c:	da29      	bge.n	800a2d2 <__ieee754_log+0x6a>
 800a27e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a282:	4303      	orrs	r3, r0
 800a284:	ee10 2a10 	vmov	r2, s0
 800a288:	d10c      	bne.n	800a2a4 <__ieee754_log+0x3c>
 800a28a:	49cf      	ldr	r1, [pc, #828]	; (800a5c8 <__ieee754_log+0x360>)
 800a28c:	2200      	movs	r2, #0
 800a28e:	2300      	movs	r3, #0
 800a290:	2000      	movs	r0, #0
 800a292:	f7f6 fae3 	bl	800085c <__aeabi_ddiv>
 800a296:	ec41 0b10 	vmov	d0, r0, r1
 800a29a:	b003      	add	sp, #12
 800a29c:	ecbd 8b04 	vpop	{d8-d9}
 800a2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2a4:	2900      	cmp	r1, #0
 800a2a6:	da05      	bge.n	800a2b4 <__ieee754_log+0x4c>
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	f7f5 fff5 	bl	8000298 <__aeabi_dsub>
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	e7ee      	b.n	800a292 <__ieee754_log+0x2a>
 800a2b4:	4bc5      	ldr	r3, [pc, #788]	; (800a5cc <__ieee754_log+0x364>)
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f7f6 f9a6 	bl	8000608 <__aeabi_dmul>
 800a2bc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800a2c0:	460d      	mov	r5, r1
 800a2c2:	4ac3      	ldr	r2, [pc, #780]	; (800a5d0 <__ieee754_log+0x368>)
 800a2c4:	4295      	cmp	r5, r2
 800a2c6:	dd06      	ble.n	800a2d6 <__ieee754_log+0x6e>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	f7f5 ffe6 	bl	800029c <__adddf3>
 800a2d0:	e7e1      	b.n	800a296 <__ieee754_log+0x2e>
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	e7f5      	b.n	800a2c2 <__ieee754_log+0x5a>
 800a2d6:	152c      	asrs	r4, r5, #20
 800a2d8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a2dc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a2e0:	441c      	add	r4, r3
 800a2e2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800a2e6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800a2ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2ee:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800a2f2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800a2f6:	ea42 0105 	orr.w	r1, r2, r5
 800a2fa:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800a2fe:	2200      	movs	r2, #0
 800a300:	4bb4      	ldr	r3, [pc, #720]	; (800a5d4 <__ieee754_log+0x36c>)
 800a302:	f7f5 ffc9 	bl	8000298 <__aeabi_dsub>
 800a306:	1cab      	adds	r3, r5, #2
 800a308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a30c:	2b02      	cmp	r3, #2
 800a30e:	4682      	mov	sl, r0
 800a310:	468b      	mov	fp, r1
 800a312:	f04f 0200 	mov.w	r2, #0
 800a316:	dc53      	bgt.n	800a3c0 <__ieee754_log+0x158>
 800a318:	2300      	movs	r3, #0
 800a31a:	f7f6 fbdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800a31e:	b1d0      	cbz	r0, 800a356 <__ieee754_log+0xee>
 800a320:	2c00      	cmp	r4, #0
 800a322:	f000 8122 	beq.w	800a56a <__ieee754_log+0x302>
 800a326:	4620      	mov	r0, r4
 800a328:	f7f6 f904 	bl	8000534 <__aeabi_i2d>
 800a32c:	a390      	add	r3, pc, #576	; (adr r3, 800a570 <__ieee754_log+0x308>)
 800a32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a332:	4606      	mov	r6, r0
 800a334:	460f      	mov	r7, r1
 800a336:	f7f6 f967 	bl	8000608 <__aeabi_dmul>
 800a33a:	a38f      	add	r3, pc, #572	; (adr r3, 800a578 <__ieee754_log+0x310>)
 800a33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a340:	4604      	mov	r4, r0
 800a342:	460d      	mov	r5, r1
 800a344:	4630      	mov	r0, r6
 800a346:	4639      	mov	r1, r7
 800a348:	f7f6 f95e 	bl	8000608 <__aeabi_dmul>
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	4620      	mov	r0, r4
 800a352:	4629      	mov	r1, r5
 800a354:	e7ba      	b.n	800a2cc <__ieee754_log+0x64>
 800a356:	a38a      	add	r3, pc, #552	; (adr r3, 800a580 <__ieee754_log+0x318>)
 800a358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35c:	4650      	mov	r0, sl
 800a35e:	4659      	mov	r1, fp
 800a360:	f7f6 f952 	bl	8000608 <__aeabi_dmul>
 800a364:	4602      	mov	r2, r0
 800a366:	460b      	mov	r3, r1
 800a368:	2000      	movs	r0, #0
 800a36a:	499b      	ldr	r1, [pc, #620]	; (800a5d8 <__ieee754_log+0x370>)
 800a36c:	f7f5 ff94 	bl	8000298 <__aeabi_dsub>
 800a370:	4652      	mov	r2, sl
 800a372:	4606      	mov	r6, r0
 800a374:	460f      	mov	r7, r1
 800a376:	465b      	mov	r3, fp
 800a378:	4650      	mov	r0, sl
 800a37a:	4659      	mov	r1, fp
 800a37c:	f7f6 f944 	bl	8000608 <__aeabi_dmul>
 800a380:	4602      	mov	r2, r0
 800a382:	460b      	mov	r3, r1
 800a384:	4630      	mov	r0, r6
 800a386:	4639      	mov	r1, r7
 800a388:	f7f6 f93e 	bl	8000608 <__aeabi_dmul>
 800a38c:	4606      	mov	r6, r0
 800a38e:	460f      	mov	r7, r1
 800a390:	b914      	cbnz	r4, 800a398 <__ieee754_log+0x130>
 800a392:	4632      	mov	r2, r6
 800a394:	463b      	mov	r3, r7
 800a396:	e0a2      	b.n	800a4de <__ieee754_log+0x276>
 800a398:	4620      	mov	r0, r4
 800a39a:	f7f6 f8cb 	bl	8000534 <__aeabi_i2d>
 800a39e:	a374      	add	r3, pc, #464	; (adr r3, 800a570 <__ieee754_log+0x308>)
 800a3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a4:	4680      	mov	r8, r0
 800a3a6:	4689      	mov	r9, r1
 800a3a8:	f7f6 f92e 	bl	8000608 <__aeabi_dmul>
 800a3ac:	a372      	add	r3, pc, #456	; (adr r3, 800a578 <__ieee754_log+0x310>)
 800a3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	460d      	mov	r5, r1
 800a3b6:	4640      	mov	r0, r8
 800a3b8:	4649      	mov	r1, r9
 800a3ba:	f7f6 f925 	bl	8000608 <__aeabi_dmul>
 800a3be:	e0a7      	b.n	800a510 <__ieee754_log+0x2a8>
 800a3c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a3c4:	f7f5 ff6a 	bl	800029c <__adddf3>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	4650      	mov	r0, sl
 800a3ce:	4659      	mov	r1, fp
 800a3d0:	f7f6 fa44 	bl	800085c <__aeabi_ddiv>
 800a3d4:	ec41 0b18 	vmov	d8, r0, r1
 800a3d8:	4620      	mov	r0, r4
 800a3da:	f7f6 f8ab 	bl	8000534 <__aeabi_i2d>
 800a3de:	ec53 2b18 	vmov	r2, r3, d8
 800a3e2:	ec41 0b19 	vmov	d9, r0, r1
 800a3e6:	ec51 0b18 	vmov	r0, r1, d8
 800a3ea:	f7f6 f90d 	bl	8000608 <__aeabi_dmul>
 800a3ee:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800a3f2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800a3f6:	9301      	str	r3, [sp, #4]
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	4680      	mov	r8, r0
 800a3fe:	4689      	mov	r9, r1
 800a400:	f7f6 f902 	bl	8000608 <__aeabi_dmul>
 800a404:	a360      	add	r3, pc, #384	; (adr r3, 800a588 <__ieee754_log+0x320>)
 800a406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40a:	4606      	mov	r6, r0
 800a40c:	460f      	mov	r7, r1
 800a40e:	f7f6 f8fb 	bl	8000608 <__aeabi_dmul>
 800a412:	a35f      	add	r3, pc, #380	; (adr r3, 800a590 <__ieee754_log+0x328>)
 800a414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a418:	f7f5 ff40 	bl	800029c <__adddf3>
 800a41c:	4632      	mov	r2, r6
 800a41e:	463b      	mov	r3, r7
 800a420:	f7f6 f8f2 	bl	8000608 <__aeabi_dmul>
 800a424:	a35c      	add	r3, pc, #368	; (adr r3, 800a598 <__ieee754_log+0x330>)
 800a426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42a:	f7f5 ff37 	bl	800029c <__adddf3>
 800a42e:	4632      	mov	r2, r6
 800a430:	463b      	mov	r3, r7
 800a432:	f7f6 f8e9 	bl	8000608 <__aeabi_dmul>
 800a436:	a35a      	add	r3, pc, #360	; (adr r3, 800a5a0 <__ieee754_log+0x338>)
 800a438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43c:	f7f5 ff2e 	bl	800029c <__adddf3>
 800a440:	4642      	mov	r2, r8
 800a442:	464b      	mov	r3, r9
 800a444:	f7f6 f8e0 	bl	8000608 <__aeabi_dmul>
 800a448:	a357      	add	r3, pc, #348	; (adr r3, 800a5a8 <__ieee754_log+0x340>)
 800a44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44e:	4680      	mov	r8, r0
 800a450:	4689      	mov	r9, r1
 800a452:	4630      	mov	r0, r6
 800a454:	4639      	mov	r1, r7
 800a456:	f7f6 f8d7 	bl	8000608 <__aeabi_dmul>
 800a45a:	a355      	add	r3, pc, #340	; (adr r3, 800a5b0 <__ieee754_log+0x348>)
 800a45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a460:	f7f5 ff1c 	bl	800029c <__adddf3>
 800a464:	4632      	mov	r2, r6
 800a466:	463b      	mov	r3, r7
 800a468:	f7f6 f8ce 	bl	8000608 <__aeabi_dmul>
 800a46c:	a352      	add	r3, pc, #328	; (adr r3, 800a5b8 <__ieee754_log+0x350>)
 800a46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a472:	f7f5 ff13 	bl	800029c <__adddf3>
 800a476:	4632      	mov	r2, r6
 800a478:	463b      	mov	r3, r7
 800a47a:	f7f6 f8c5 	bl	8000608 <__aeabi_dmul>
 800a47e:	460b      	mov	r3, r1
 800a480:	4602      	mov	r2, r0
 800a482:	4649      	mov	r1, r9
 800a484:	4640      	mov	r0, r8
 800a486:	f7f5 ff09 	bl	800029c <__adddf3>
 800a48a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800a48e:	9b01      	ldr	r3, [sp, #4]
 800a490:	3551      	adds	r5, #81	; 0x51
 800a492:	431d      	orrs	r5, r3
 800a494:	2d00      	cmp	r5, #0
 800a496:	4680      	mov	r8, r0
 800a498:	4689      	mov	r9, r1
 800a49a:	dd48      	ble.n	800a52e <__ieee754_log+0x2c6>
 800a49c:	4b4e      	ldr	r3, [pc, #312]	; (800a5d8 <__ieee754_log+0x370>)
 800a49e:	2200      	movs	r2, #0
 800a4a0:	4650      	mov	r0, sl
 800a4a2:	4659      	mov	r1, fp
 800a4a4:	f7f6 f8b0 	bl	8000608 <__aeabi_dmul>
 800a4a8:	4652      	mov	r2, sl
 800a4aa:	465b      	mov	r3, fp
 800a4ac:	f7f6 f8ac 	bl	8000608 <__aeabi_dmul>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	4606      	mov	r6, r0
 800a4b6:	460f      	mov	r7, r1
 800a4b8:	4640      	mov	r0, r8
 800a4ba:	4649      	mov	r1, r9
 800a4bc:	f7f5 feee 	bl	800029c <__adddf3>
 800a4c0:	ec53 2b18 	vmov	r2, r3, d8
 800a4c4:	f7f6 f8a0 	bl	8000608 <__aeabi_dmul>
 800a4c8:	4680      	mov	r8, r0
 800a4ca:	4689      	mov	r9, r1
 800a4cc:	b964      	cbnz	r4, 800a4e8 <__ieee754_log+0x280>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	4639      	mov	r1, r7
 800a4d6:	f7f5 fedf 	bl	8000298 <__aeabi_dsub>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	460b      	mov	r3, r1
 800a4de:	4650      	mov	r0, sl
 800a4e0:	4659      	mov	r1, fp
 800a4e2:	f7f5 fed9 	bl	8000298 <__aeabi_dsub>
 800a4e6:	e6d6      	b.n	800a296 <__ieee754_log+0x2e>
 800a4e8:	a321      	add	r3, pc, #132	; (adr r3, 800a570 <__ieee754_log+0x308>)
 800a4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ee:	ec51 0b19 	vmov	r0, r1, d9
 800a4f2:	f7f6 f889 	bl	8000608 <__aeabi_dmul>
 800a4f6:	a320      	add	r3, pc, #128	; (adr r3, 800a578 <__ieee754_log+0x310>)
 800a4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fc:	4604      	mov	r4, r0
 800a4fe:	460d      	mov	r5, r1
 800a500:	ec51 0b19 	vmov	r0, r1, d9
 800a504:	f7f6 f880 	bl	8000608 <__aeabi_dmul>
 800a508:	4642      	mov	r2, r8
 800a50a:	464b      	mov	r3, r9
 800a50c:	f7f5 fec6 	bl	800029c <__adddf3>
 800a510:	4602      	mov	r2, r0
 800a512:	460b      	mov	r3, r1
 800a514:	4630      	mov	r0, r6
 800a516:	4639      	mov	r1, r7
 800a518:	f7f5 febe 	bl	8000298 <__aeabi_dsub>
 800a51c:	4652      	mov	r2, sl
 800a51e:	465b      	mov	r3, fp
 800a520:	f7f5 feba 	bl	8000298 <__aeabi_dsub>
 800a524:	4602      	mov	r2, r0
 800a526:	460b      	mov	r3, r1
 800a528:	4620      	mov	r0, r4
 800a52a:	4629      	mov	r1, r5
 800a52c:	e7d9      	b.n	800a4e2 <__ieee754_log+0x27a>
 800a52e:	4602      	mov	r2, r0
 800a530:	460b      	mov	r3, r1
 800a532:	4650      	mov	r0, sl
 800a534:	4659      	mov	r1, fp
 800a536:	f7f5 feaf 	bl	8000298 <__aeabi_dsub>
 800a53a:	ec53 2b18 	vmov	r2, r3, d8
 800a53e:	f7f6 f863 	bl	8000608 <__aeabi_dmul>
 800a542:	4606      	mov	r6, r0
 800a544:	460f      	mov	r7, r1
 800a546:	2c00      	cmp	r4, #0
 800a548:	f43f af23 	beq.w	800a392 <__ieee754_log+0x12a>
 800a54c:	a308      	add	r3, pc, #32	; (adr r3, 800a570 <__ieee754_log+0x308>)
 800a54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a552:	ec51 0b19 	vmov	r0, r1, d9
 800a556:	f7f6 f857 	bl	8000608 <__aeabi_dmul>
 800a55a:	a307      	add	r3, pc, #28	; (adr r3, 800a578 <__ieee754_log+0x310>)
 800a55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a560:	4604      	mov	r4, r0
 800a562:	460d      	mov	r5, r1
 800a564:	ec51 0b19 	vmov	r0, r1, d9
 800a568:	e727      	b.n	800a3ba <__ieee754_log+0x152>
 800a56a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800a5c0 <__ieee754_log+0x358>
 800a56e:	e694      	b.n	800a29a <__ieee754_log+0x32>
 800a570:	fee00000 	.word	0xfee00000
 800a574:	3fe62e42 	.word	0x3fe62e42
 800a578:	35793c76 	.word	0x35793c76
 800a57c:	3dea39ef 	.word	0x3dea39ef
 800a580:	55555555 	.word	0x55555555
 800a584:	3fd55555 	.word	0x3fd55555
 800a588:	df3e5244 	.word	0xdf3e5244
 800a58c:	3fc2f112 	.word	0x3fc2f112
 800a590:	96cb03de 	.word	0x96cb03de
 800a594:	3fc74664 	.word	0x3fc74664
 800a598:	94229359 	.word	0x94229359
 800a59c:	3fd24924 	.word	0x3fd24924
 800a5a0:	55555593 	.word	0x55555593
 800a5a4:	3fe55555 	.word	0x3fe55555
 800a5a8:	d078c69f 	.word	0xd078c69f
 800a5ac:	3fc39a09 	.word	0x3fc39a09
 800a5b0:	1d8e78af 	.word	0x1d8e78af
 800a5b4:	3fcc71c5 	.word	0x3fcc71c5
 800a5b8:	9997fa04 	.word	0x9997fa04
 800a5bc:	3fd99999 	.word	0x3fd99999
	...
 800a5c8:	c3500000 	.word	0xc3500000
 800a5cc:	43500000 	.word	0x43500000
 800a5d0:	7fefffff 	.word	0x7fefffff
 800a5d4:	3ff00000 	.word	0x3ff00000
 800a5d8:	3fe00000 	.word	0x3fe00000

0800a5dc <_init>:
 800a5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5de:	bf00      	nop
 800a5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5e2:	bc08      	pop	{r3}
 800a5e4:	469e      	mov	lr, r3
 800a5e6:	4770      	bx	lr

0800a5e8 <_fini>:
 800a5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ea:	bf00      	nop
 800a5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ee:	bc08      	pop	{r3}
 800a5f0:	469e      	mov	lr, r3
 800a5f2:	4770      	bx	lr
