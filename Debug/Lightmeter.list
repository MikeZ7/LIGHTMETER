
Lightmeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079c8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08007a88  08007a88  00017a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b88  08007b88  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08007b88  08007b88  00017b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b90  08007b90  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b90  08007b90  00017b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b94  08007b94  00017b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ec  2000005c  08007bf4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000748  08007bf4  00020748  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014aa3  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003334  00000000  00000000  00034b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001258  00000000  00000000  00037ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e3e  00000000  00000000  000390f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115cb  00000000  00000000  00039f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004e47  00000000  00000000  0004b501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  000047e0  00000000  00000000  00050348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000068  00000000  00000000  00054b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007a70 	.word	0x08007a70

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08007a70 	.word	0x08007a70

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	0008      	movs	r0, r1
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	; (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f852 	bl	80004e0 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	46ce      	mov	lr, r9
 800044c:	4699      	mov	r9, r3
 800044e:	0c03      	lsrs	r3, r0, #16
 8000450:	469c      	mov	ip, r3
 8000452:	0413      	lsls	r3, r2, #16
 8000454:	4647      	mov	r7, r8
 8000456:	0c1b      	lsrs	r3, r3, #16
 8000458:	001d      	movs	r5, r3
 800045a:	000e      	movs	r6, r1
 800045c:	4661      	mov	r1, ip
 800045e:	0404      	lsls	r4, r0, #16
 8000460:	0c24      	lsrs	r4, r4, #16
 8000462:	b580      	push	{r7, lr}
 8000464:	0007      	movs	r7, r0
 8000466:	0c10      	lsrs	r0, r2, #16
 8000468:	434b      	muls	r3, r1
 800046a:	4365      	muls	r5, r4
 800046c:	4341      	muls	r1, r0
 800046e:	4360      	muls	r0, r4
 8000470:	0c2c      	lsrs	r4, r5, #16
 8000472:	18c0      	adds	r0, r0, r3
 8000474:	1820      	adds	r0, r4, r0
 8000476:	468c      	mov	ip, r1
 8000478:	4283      	cmp	r3, r0
 800047a:	d903      	bls.n	8000484 <__aeabi_lmul+0x3c>
 800047c:	2380      	movs	r3, #128	; 0x80
 800047e:	025b      	lsls	r3, r3, #9
 8000480:	4698      	mov	r8, r3
 8000482:	44c4      	add	ip, r8
 8000484:	4649      	mov	r1, r9
 8000486:	4379      	muls	r1, r7
 8000488:	4356      	muls	r6, r2
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	042d      	lsls	r5, r5, #16
 800048e:	0c2d      	lsrs	r5, r5, #16
 8000490:	1989      	adds	r1, r1, r6
 8000492:	4463      	add	r3, ip
 8000494:	0400      	lsls	r0, r0, #16
 8000496:	1940      	adds	r0, r0, r5
 8000498:	18c9      	adds	r1, r1, r3
 800049a:	bcc0      	pop	{r6, r7}
 800049c:	46b9      	mov	r9, r7
 800049e:	46b0      	mov	r8, r6
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_d2uiz>:
 80004a4:	b570      	push	{r4, r5, r6, lr}
 80004a6:	2200      	movs	r2, #0
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <__aeabi_d2uiz+0x38>)
 80004aa:	0004      	movs	r4, r0
 80004ac:	000d      	movs	r5, r1
 80004ae:	f000 ffe3 	bl	8001478 <__aeabi_dcmpge>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d104      	bne.n	80004c0 <__aeabi_d2uiz+0x1c>
 80004b6:	0020      	movs	r0, r4
 80004b8:	0029      	movs	r1, r5
 80004ba:	f000 ff4d 	bl	8001358 <__aeabi_d2iz>
 80004be:	bd70      	pop	{r4, r5, r6, pc}
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <__aeabi_d2uiz+0x38>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	0020      	movs	r0, r4
 80004c6:	0029      	movs	r1, r5
 80004c8:	f000 fbc4 	bl	8000c54 <__aeabi_dsub>
 80004cc:	f000 ff44 	bl	8001358 <__aeabi_d2iz>
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	061b      	lsls	r3, r3, #24
 80004d4:	469c      	mov	ip, r3
 80004d6:	4460      	add	r0, ip
 80004d8:	e7f1      	b.n	80004be <__aeabi_d2uiz+0x1a>
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	41e00000 	.word	0x41e00000

080004e0 <__udivmoddi4>:
 80004e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e2:	4657      	mov	r7, sl
 80004e4:	464e      	mov	r6, r9
 80004e6:	4645      	mov	r5, r8
 80004e8:	46de      	mov	lr, fp
 80004ea:	b5e0      	push	{r5, r6, r7, lr}
 80004ec:	0004      	movs	r4, r0
 80004ee:	000d      	movs	r5, r1
 80004f0:	4692      	mov	sl, r2
 80004f2:	4699      	mov	r9, r3
 80004f4:	b083      	sub	sp, #12
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d830      	bhi.n	800055c <__udivmoddi4+0x7c>
 80004fa:	d02d      	beq.n	8000558 <__udivmoddi4+0x78>
 80004fc:	4649      	mov	r1, r9
 80004fe:	4650      	mov	r0, sl
 8000500:	f000 ffe2 	bl	80014c8 <__clzdi2>
 8000504:	0029      	movs	r1, r5
 8000506:	0006      	movs	r6, r0
 8000508:	0020      	movs	r0, r4
 800050a:	f000 ffdd 	bl	80014c8 <__clzdi2>
 800050e:	1a33      	subs	r3, r6, r0
 8000510:	4698      	mov	r8, r3
 8000512:	3b20      	subs	r3, #32
 8000514:	d434      	bmi.n	8000580 <__udivmoddi4+0xa0>
 8000516:	469b      	mov	fp, r3
 8000518:	4653      	mov	r3, sl
 800051a:	465a      	mov	r2, fp
 800051c:	4093      	lsls	r3, r2
 800051e:	4642      	mov	r2, r8
 8000520:	001f      	movs	r7, r3
 8000522:	4653      	mov	r3, sl
 8000524:	4093      	lsls	r3, r2
 8000526:	001e      	movs	r6, r3
 8000528:	42af      	cmp	r7, r5
 800052a:	d83b      	bhi.n	80005a4 <__udivmoddi4+0xc4>
 800052c:	42af      	cmp	r7, r5
 800052e:	d100      	bne.n	8000532 <__udivmoddi4+0x52>
 8000530:	e079      	b.n	8000626 <__udivmoddi4+0x146>
 8000532:	465b      	mov	r3, fp
 8000534:	1ba4      	subs	r4, r4, r6
 8000536:	41bd      	sbcs	r5, r7
 8000538:	2b00      	cmp	r3, #0
 800053a:	da00      	bge.n	800053e <__udivmoddi4+0x5e>
 800053c:	e076      	b.n	800062c <__udivmoddi4+0x14c>
 800053e:	2200      	movs	r2, #0
 8000540:	2300      	movs	r3, #0
 8000542:	9200      	str	r2, [sp, #0]
 8000544:	9301      	str	r3, [sp, #4]
 8000546:	2301      	movs	r3, #1
 8000548:	465a      	mov	r2, fp
 800054a:	4093      	lsls	r3, r2
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	4642      	mov	r2, r8
 8000552:	4093      	lsls	r3, r2
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	e029      	b.n	80005ac <__udivmoddi4+0xcc>
 8000558:	4282      	cmp	r2, r0
 800055a:	d9cf      	bls.n	80004fc <__udivmoddi4+0x1c>
 800055c:	2200      	movs	r2, #0
 800055e:	2300      	movs	r3, #0
 8000560:	9200      	str	r2, [sp, #0]
 8000562:	9301      	str	r3, [sp, #4]
 8000564:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <__udivmoddi4+0x8e>
 800056a:	601c      	str	r4, [r3, #0]
 800056c:	605d      	str	r5, [r3, #4]
 800056e:	9800      	ldr	r0, [sp, #0]
 8000570:	9901      	ldr	r1, [sp, #4]
 8000572:	b003      	add	sp, #12
 8000574:	bcf0      	pop	{r4, r5, r6, r7}
 8000576:	46bb      	mov	fp, r7
 8000578:	46b2      	mov	sl, r6
 800057a:	46a9      	mov	r9, r5
 800057c:	46a0      	mov	r8, r4
 800057e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000580:	4642      	mov	r2, r8
 8000582:	469b      	mov	fp, r3
 8000584:	2320      	movs	r3, #32
 8000586:	1a9b      	subs	r3, r3, r2
 8000588:	4652      	mov	r2, sl
 800058a:	40da      	lsrs	r2, r3
 800058c:	4641      	mov	r1, r8
 800058e:	0013      	movs	r3, r2
 8000590:	464a      	mov	r2, r9
 8000592:	408a      	lsls	r2, r1
 8000594:	0017      	movs	r7, r2
 8000596:	4642      	mov	r2, r8
 8000598:	431f      	orrs	r7, r3
 800059a:	4653      	mov	r3, sl
 800059c:	4093      	lsls	r3, r2
 800059e:	001e      	movs	r6, r3
 80005a0:	42af      	cmp	r7, r5
 80005a2:	d9c3      	bls.n	800052c <__udivmoddi4+0x4c>
 80005a4:	2200      	movs	r2, #0
 80005a6:	2300      	movs	r3, #0
 80005a8:	9200      	str	r2, [sp, #0]
 80005aa:	9301      	str	r3, [sp, #4]
 80005ac:	4643      	mov	r3, r8
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0d8      	beq.n	8000564 <__udivmoddi4+0x84>
 80005b2:	07fb      	lsls	r3, r7, #31
 80005b4:	0872      	lsrs	r2, r6, #1
 80005b6:	431a      	orrs	r2, r3
 80005b8:	4646      	mov	r6, r8
 80005ba:	087b      	lsrs	r3, r7, #1
 80005bc:	e00e      	b.n	80005dc <__udivmoddi4+0xfc>
 80005be:	42ab      	cmp	r3, r5
 80005c0:	d101      	bne.n	80005c6 <__udivmoddi4+0xe6>
 80005c2:	42a2      	cmp	r2, r4
 80005c4:	d80c      	bhi.n	80005e0 <__udivmoddi4+0x100>
 80005c6:	1aa4      	subs	r4, r4, r2
 80005c8:	419d      	sbcs	r5, r3
 80005ca:	2001      	movs	r0, #1
 80005cc:	1924      	adds	r4, r4, r4
 80005ce:	416d      	adcs	r5, r5
 80005d0:	2100      	movs	r1, #0
 80005d2:	3e01      	subs	r6, #1
 80005d4:	1824      	adds	r4, r4, r0
 80005d6:	414d      	adcs	r5, r1
 80005d8:	2e00      	cmp	r6, #0
 80005da:	d006      	beq.n	80005ea <__udivmoddi4+0x10a>
 80005dc:	42ab      	cmp	r3, r5
 80005de:	d9ee      	bls.n	80005be <__udivmoddi4+0xde>
 80005e0:	3e01      	subs	r6, #1
 80005e2:	1924      	adds	r4, r4, r4
 80005e4:	416d      	adcs	r5, r5
 80005e6:	2e00      	cmp	r6, #0
 80005e8:	d1f8      	bne.n	80005dc <__udivmoddi4+0xfc>
 80005ea:	9800      	ldr	r0, [sp, #0]
 80005ec:	9901      	ldr	r1, [sp, #4]
 80005ee:	465b      	mov	r3, fp
 80005f0:	1900      	adds	r0, r0, r4
 80005f2:	4169      	adcs	r1, r5
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	db24      	blt.n	8000642 <__udivmoddi4+0x162>
 80005f8:	002b      	movs	r3, r5
 80005fa:	465a      	mov	r2, fp
 80005fc:	4644      	mov	r4, r8
 80005fe:	40d3      	lsrs	r3, r2
 8000600:	002a      	movs	r2, r5
 8000602:	40e2      	lsrs	r2, r4
 8000604:	001c      	movs	r4, r3
 8000606:	465b      	mov	r3, fp
 8000608:	0015      	movs	r5, r2
 800060a:	2b00      	cmp	r3, #0
 800060c:	db2a      	blt.n	8000664 <__udivmoddi4+0x184>
 800060e:	0026      	movs	r6, r4
 8000610:	409e      	lsls	r6, r3
 8000612:	0033      	movs	r3, r6
 8000614:	0026      	movs	r6, r4
 8000616:	4647      	mov	r7, r8
 8000618:	40be      	lsls	r6, r7
 800061a:	0032      	movs	r2, r6
 800061c:	1a80      	subs	r0, r0, r2
 800061e:	4199      	sbcs	r1, r3
 8000620:	9000      	str	r0, [sp, #0]
 8000622:	9101      	str	r1, [sp, #4]
 8000624:	e79e      	b.n	8000564 <__udivmoddi4+0x84>
 8000626:	42a3      	cmp	r3, r4
 8000628:	d8bc      	bhi.n	80005a4 <__udivmoddi4+0xc4>
 800062a:	e782      	b.n	8000532 <__udivmoddi4+0x52>
 800062c:	4642      	mov	r2, r8
 800062e:	2320      	movs	r3, #32
 8000630:	2100      	movs	r1, #0
 8000632:	1a9b      	subs	r3, r3, r2
 8000634:	2200      	movs	r2, #0
 8000636:	9100      	str	r1, [sp, #0]
 8000638:	9201      	str	r2, [sp, #4]
 800063a:	2201      	movs	r2, #1
 800063c:	40da      	lsrs	r2, r3
 800063e:	9201      	str	r2, [sp, #4]
 8000640:	e785      	b.n	800054e <__udivmoddi4+0x6e>
 8000642:	4642      	mov	r2, r8
 8000644:	2320      	movs	r3, #32
 8000646:	1a9b      	subs	r3, r3, r2
 8000648:	002a      	movs	r2, r5
 800064a:	4646      	mov	r6, r8
 800064c:	409a      	lsls	r2, r3
 800064e:	0023      	movs	r3, r4
 8000650:	40f3      	lsrs	r3, r6
 8000652:	4644      	mov	r4, r8
 8000654:	4313      	orrs	r3, r2
 8000656:	002a      	movs	r2, r5
 8000658:	40e2      	lsrs	r2, r4
 800065a:	001c      	movs	r4, r3
 800065c:	465b      	mov	r3, fp
 800065e:	0015      	movs	r5, r2
 8000660:	2b00      	cmp	r3, #0
 8000662:	dad4      	bge.n	800060e <__udivmoddi4+0x12e>
 8000664:	4642      	mov	r2, r8
 8000666:	002f      	movs	r7, r5
 8000668:	2320      	movs	r3, #32
 800066a:	0026      	movs	r6, r4
 800066c:	4097      	lsls	r7, r2
 800066e:	1a9b      	subs	r3, r3, r2
 8000670:	40de      	lsrs	r6, r3
 8000672:	003b      	movs	r3, r7
 8000674:	4333      	orrs	r3, r6
 8000676:	e7cd      	b.n	8000614 <__udivmoddi4+0x134>

08000678 <__aeabi_ddiv>:
 8000678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067a:	4657      	mov	r7, sl
 800067c:	464e      	mov	r6, r9
 800067e:	4645      	mov	r5, r8
 8000680:	46de      	mov	lr, fp
 8000682:	b5e0      	push	{r5, r6, r7, lr}
 8000684:	030c      	lsls	r4, r1, #12
 8000686:	001f      	movs	r7, r3
 8000688:	004b      	lsls	r3, r1, #1
 800068a:	4681      	mov	r9, r0
 800068c:	4692      	mov	sl, r2
 800068e:	0005      	movs	r5, r0
 8000690:	b085      	sub	sp, #20
 8000692:	0b24      	lsrs	r4, r4, #12
 8000694:	0d5b      	lsrs	r3, r3, #21
 8000696:	0fce      	lsrs	r6, r1, #31
 8000698:	2b00      	cmp	r3, #0
 800069a:	d100      	bne.n	800069e <__aeabi_ddiv+0x26>
 800069c:	e152      	b.n	8000944 <__aeabi_ddiv+0x2cc>
 800069e:	4ad2      	ldr	r2, [pc, #840]	; (80009e8 <__aeabi_ddiv+0x370>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d100      	bne.n	80006a6 <__aeabi_ddiv+0x2e>
 80006a4:	e16e      	b.n	8000984 <__aeabi_ddiv+0x30c>
 80006a6:	0f42      	lsrs	r2, r0, #29
 80006a8:	00e4      	lsls	r4, r4, #3
 80006aa:	4314      	orrs	r4, r2
 80006ac:	2280      	movs	r2, #128	; 0x80
 80006ae:	0412      	lsls	r2, r2, #16
 80006b0:	4322      	orrs	r2, r4
 80006b2:	4690      	mov	r8, r2
 80006b4:	4acd      	ldr	r2, [pc, #820]	; (80009ec <__aeabi_ddiv+0x374>)
 80006b6:	00c5      	lsls	r5, r0, #3
 80006b8:	4693      	mov	fp, r2
 80006ba:	449b      	add	fp, r3
 80006bc:	2300      	movs	r3, #0
 80006be:	4699      	mov	r9, r3
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	033c      	lsls	r4, r7, #12
 80006c4:	007b      	lsls	r3, r7, #1
 80006c6:	4650      	mov	r0, sl
 80006c8:	0b24      	lsrs	r4, r4, #12
 80006ca:	0d5b      	lsrs	r3, r3, #21
 80006cc:	0fff      	lsrs	r7, r7, #31
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d100      	bne.n	80006d4 <__aeabi_ddiv+0x5c>
 80006d2:	e11a      	b.n	800090a <__aeabi_ddiv+0x292>
 80006d4:	4ac4      	ldr	r2, [pc, #784]	; (80009e8 <__aeabi_ddiv+0x370>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d100      	bne.n	80006dc <__aeabi_ddiv+0x64>
 80006da:	e15e      	b.n	800099a <__aeabi_ddiv+0x322>
 80006dc:	0f42      	lsrs	r2, r0, #29
 80006de:	00e4      	lsls	r4, r4, #3
 80006e0:	4322      	orrs	r2, r4
 80006e2:	2480      	movs	r4, #128	; 0x80
 80006e4:	0424      	lsls	r4, r4, #16
 80006e6:	4314      	orrs	r4, r2
 80006e8:	4ac0      	ldr	r2, [pc, #768]	; (80009ec <__aeabi_ddiv+0x374>)
 80006ea:	00c1      	lsls	r1, r0, #3
 80006ec:	4694      	mov	ip, r2
 80006ee:	465a      	mov	r2, fp
 80006f0:	4463      	add	r3, ip
 80006f2:	1ad3      	subs	r3, r2, r3
 80006f4:	469b      	mov	fp, r3
 80006f6:	2000      	movs	r0, #0
 80006f8:	0033      	movs	r3, r6
 80006fa:	407b      	eors	r3, r7
 80006fc:	469a      	mov	sl, r3
 80006fe:	464b      	mov	r3, r9
 8000700:	2b0f      	cmp	r3, #15
 8000702:	d827      	bhi.n	8000754 <__aeabi_ddiv+0xdc>
 8000704:	4aba      	ldr	r2, [pc, #744]	; (80009f0 <__aeabi_ddiv+0x378>)
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	58d3      	ldr	r3, [r2, r3]
 800070a:	469f      	mov	pc, r3
 800070c:	46b2      	mov	sl, r6
 800070e:	9b00      	ldr	r3, [sp, #0]
 8000710:	2b02      	cmp	r3, #2
 8000712:	d016      	beq.n	8000742 <__aeabi_ddiv+0xca>
 8000714:	2b03      	cmp	r3, #3
 8000716:	d100      	bne.n	800071a <__aeabi_ddiv+0xa2>
 8000718:	e287      	b.n	8000c2a <__aeabi_ddiv+0x5b2>
 800071a:	2b01      	cmp	r3, #1
 800071c:	d000      	beq.n	8000720 <__aeabi_ddiv+0xa8>
 800071e:	e0d5      	b.n	80008cc <__aeabi_ddiv+0x254>
 8000720:	2300      	movs	r3, #0
 8000722:	2200      	movs	r2, #0
 8000724:	2500      	movs	r5, #0
 8000726:	051b      	lsls	r3, r3, #20
 8000728:	4313      	orrs	r3, r2
 800072a:	4652      	mov	r2, sl
 800072c:	07d2      	lsls	r2, r2, #31
 800072e:	4313      	orrs	r3, r2
 8000730:	0028      	movs	r0, r5
 8000732:	0019      	movs	r1, r3
 8000734:	b005      	add	sp, #20
 8000736:	bcf0      	pop	{r4, r5, r6, r7}
 8000738:	46bb      	mov	fp, r7
 800073a:	46b2      	mov	sl, r6
 800073c:	46a9      	mov	r9, r5
 800073e:	46a0      	mov	r8, r4
 8000740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000742:	2200      	movs	r2, #0
 8000744:	2500      	movs	r5, #0
 8000746:	4ba8      	ldr	r3, [pc, #672]	; (80009e8 <__aeabi_ddiv+0x370>)
 8000748:	e7ed      	b.n	8000726 <__aeabi_ddiv+0xae>
 800074a:	46ba      	mov	sl, r7
 800074c:	46a0      	mov	r8, r4
 800074e:	000d      	movs	r5, r1
 8000750:	9000      	str	r0, [sp, #0]
 8000752:	e7dc      	b.n	800070e <__aeabi_ddiv+0x96>
 8000754:	4544      	cmp	r4, r8
 8000756:	d200      	bcs.n	800075a <__aeabi_ddiv+0xe2>
 8000758:	e1c4      	b.n	8000ae4 <__aeabi_ddiv+0x46c>
 800075a:	d100      	bne.n	800075e <__aeabi_ddiv+0xe6>
 800075c:	e1bf      	b.n	8000ade <__aeabi_ddiv+0x466>
 800075e:	2301      	movs	r3, #1
 8000760:	425b      	negs	r3, r3
 8000762:	469c      	mov	ip, r3
 8000764:	002e      	movs	r6, r5
 8000766:	4640      	mov	r0, r8
 8000768:	2500      	movs	r5, #0
 800076a:	44e3      	add	fp, ip
 800076c:	0223      	lsls	r3, r4, #8
 800076e:	0e0c      	lsrs	r4, r1, #24
 8000770:	431c      	orrs	r4, r3
 8000772:	0c1b      	lsrs	r3, r3, #16
 8000774:	4699      	mov	r9, r3
 8000776:	0423      	lsls	r3, r4, #16
 8000778:	020a      	lsls	r2, r1, #8
 800077a:	0c1f      	lsrs	r7, r3, #16
 800077c:	4649      	mov	r1, r9
 800077e:	9200      	str	r2, [sp, #0]
 8000780:	9701      	str	r7, [sp, #4]
 8000782:	f7ff fd51 	bl	8000228 <__aeabi_uidivmod>
 8000786:	0002      	movs	r2, r0
 8000788:	437a      	muls	r2, r7
 800078a:	040b      	lsls	r3, r1, #16
 800078c:	0c31      	lsrs	r1, r6, #16
 800078e:	4680      	mov	r8, r0
 8000790:	4319      	orrs	r1, r3
 8000792:	428a      	cmp	r2, r1
 8000794:	d907      	bls.n	80007a6 <__aeabi_ddiv+0x12e>
 8000796:	2301      	movs	r3, #1
 8000798:	425b      	negs	r3, r3
 800079a:	469c      	mov	ip, r3
 800079c:	1909      	adds	r1, r1, r4
 800079e:	44e0      	add	r8, ip
 80007a0:	428c      	cmp	r4, r1
 80007a2:	d800      	bhi.n	80007a6 <__aeabi_ddiv+0x12e>
 80007a4:	e201      	b.n	8000baa <__aeabi_ddiv+0x532>
 80007a6:	1a88      	subs	r0, r1, r2
 80007a8:	4649      	mov	r1, r9
 80007aa:	f7ff fd3d 	bl	8000228 <__aeabi_uidivmod>
 80007ae:	9a01      	ldr	r2, [sp, #4]
 80007b0:	0436      	lsls	r6, r6, #16
 80007b2:	4342      	muls	r2, r0
 80007b4:	0409      	lsls	r1, r1, #16
 80007b6:	0c36      	lsrs	r6, r6, #16
 80007b8:	0003      	movs	r3, r0
 80007ba:	430e      	orrs	r6, r1
 80007bc:	42b2      	cmp	r2, r6
 80007be:	d904      	bls.n	80007ca <__aeabi_ddiv+0x152>
 80007c0:	1936      	adds	r6, r6, r4
 80007c2:	3b01      	subs	r3, #1
 80007c4:	42b4      	cmp	r4, r6
 80007c6:	d800      	bhi.n	80007ca <__aeabi_ddiv+0x152>
 80007c8:	e1e9      	b.n	8000b9e <__aeabi_ddiv+0x526>
 80007ca:	1ab0      	subs	r0, r6, r2
 80007cc:	4642      	mov	r2, r8
 80007ce:	9e00      	ldr	r6, [sp, #0]
 80007d0:	0412      	lsls	r2, r2, #16
 80007d2:	431a      	orrs	r2, r3
 80007d4:	0c33      	lsrs	r3, r6, #16
 80007d6:	001f      	movs	r7, r3
 80007d8:	0c11      	lsrs	r1, r2, #16
 80007da:	4690      	mov	r8, r2
 80007dc:	9302      	str	r3, [sp, #8]
 80007de:	0413      	lsls	r3, r2, #16
 80007e0:	0432      	lsls	r2, r6, #16
 80007e2:	0c16      	lsrs	r6, r2, #16
 80007e4:	0032      	movs	r2, r6
 80007e6:	0c1b      	lsrs	r3, r3, #16
 80007e8:	435a      	muls	r2, r3
 80007ea:	9603      	str	r6, [sp, #12]
 80007ec:	437b      	muls	r3, r7
 80007ee:	434e      	muls	r6, r1
 80007f0:	4379      	muls	r1, r7
 80007f2:	0c17      	lsrs	r7, r2, #16
 80007f4:	46bc      	mov	ip, r7
 80007f6:	199b      	adds	r3, r3, r6
 80007f8:	4463      	add	r3, ip
 80007fa:	429e      	cmp	r6, r3
 80007fc:	d903      	bls.n	8000806 <__aeabi_ddiv+0x18e>
 80007fe:	2680      	movs	r6, #128	; 0x80
 8000800:	0276      	lsls	r6, r6, #9
 8000802:	46b4      	mov	ip, r6
 8000804:	4461      	add	r1, ip
 8000806:	0c1e      	lsrs	r6, r3, #16
 8000808:	1871      	adds	r1, r6, r1
 800080a:	0416      	lsls	r6, r2, #16
 800080c:	041b      	lsls	r3, r3, #16
 800080e:	0c36      	lsrs	r6, r6, #16
 8000810:	199e      	adds	r6, r3, r6
 8000812:	4288      	cmp	r0, r1
 8000814:	d302      	bcc.n	800081c <__aeabi_ddiv+0x1a4>
 8000816:	d112      	bne.n	800083e <__aeabi_ddiv+0x1c6>
 8000818:	42b5      	cmp	r5, r6
 800081a:	d210      	bcs.n	800083e <__aeabi_ddiv+0x1c6>
 800081c:	4643      	mov	r3, r8
 800081e:	1e5a      	subs	r2, r3, #1
 8000820:	9b00      	ldr	r3, [sp, #0]
 8000822:	469c      	mov	ip, r3
 8000824:	4465      	add	r5, ip
 8000826:	001f      	movs	r7, r3
 8000828:	429d      	cmp	r5, r3
 800082a:	419b      	sbcs	r3, r3
 800082c:	425b      	negs	r3, r3
 800082e:	191b      	adds	r3, r3, r4
 8000830:	18c0      	adds	r0, r0, r3
 8000832:	4284      	cmp	r4, r0
 8000834:	d200      	bcs.n	8000838 <__aeabi_ddiv+0x1c0>
 8000836:	e19e      	b.n	8000b76 <__aeabi_ddiv+0x4fe>
 8000838:	d100      	bne.n	800083c <__aeabi_ddiv+0x1c4>
 800083a:	e199      	b.n	8000b70 <__aeabi_ddiv+0x4f8>
 800083c:	4690      	mov	r8, r2
 800083e:	1bae      	subs	r6, r5, r6
 8000840:	42b5      	cmp	r5, r6
 8000842:	41ad      	sbcs	r5, r5
 8000844:	1a40      	subs	r0, r0, r1
 8000846:	426d      	negs	r5, r5
 8000848:	1b40      	subs	r0, r0, r5
 800084a:	4284      	cmp	r4, r0
 800084c:	d100      	bne.n	8000850 <__aeabi_ddiv+0x1d8>
 800084e:	e1d2      	b.n	8000bf6 <__aeabi_ddiv+0x57e>
 8000850:	4649      	mov	r1, r9
 8000852:	f7ff fce9 	bl	8000228 <__aeabi_uidivmod>
 8000856:	9a01      	ldr	r2, [sp, #4]
 8000858:	040b      	lsls	r3, r1, #16
 800085a:	4342      	muls	r2, r0
 800085c:	0c31      	lsrs	r1, r6, #16
 800085e:	0005      	movs	r5, r0
 8000860:	4319      	orrs	r1, r3
 8000862:	428a      	cmp	r2, r1
 8000864:	d900      	bls.n	8000868 <__aeabi_ddiv+0x1f0>
 8000866:	e16c      	b.n	8000b42 <__aeabi_ddiv+0x4ca>
 8000868:	1a88      	subs	r0, r1, r2
 800086a:	4649      	mov	r1, r9
 800086c:	f7ff fcdc 	bl	8000228 <__aeabi_uidivmod>
 8000870:	9a01      	ldr	r2, [sp, #4]
 8000872:	0436      	lsls	r6, r6, #16
 8000874:	4342      	muls	r2, r0
 8000876:	0409      	lsls	r1, r1, #16
 8000878:	0c36      	lsrs	r6, r6, #16
 800087a:	0003      	movs	r3, r0
 800087c:	430e      	orrs	r6, r1
 800087e:	42b2      	cmp	r2, r6
 8000880:	d900      	bls.n	8000884 <__aeabi_ddiv+0x20c>
 8000882:	e153      	b.n	8000b2c <__aeabi_ddiv+0x4b4>
 8000884:	9803      	ldr	r0, [sp, #12]
 8000886:	1ab6      	subs	r6, r6, r2
 8000888:	0002      	movs	r2, r0
 800088a:	042d      	lsls	r5, r5, #16
 800088c:	431d      	orrs	r5, r3
 800088e:	9f02      	ldr	r7, [sp, #8]
 8000890:	042b      	lsls	r3, r5, #16
 8000892:	0c1b      	lsrs	r3, r3, #16
 8000894:	435a      	muls	r2, r3
 8000896:	437b      	muls	r3, r7
 8000898:	469c      	mov	ip, r3
 800089a:	0c29      	lsrs	r1, r5, #16
 800089c:	4348      	muls	r0, r1
 800089e:	0c13      	lsrs	r3, r2, #16
 80008a0:	4484      	add	ip, r0
 80008a2:	4463      	add	r3, ip
 80008a4:	4379      	muls	r1, r7
 80008a6:	4298      	cmp	r0, r3
 80008a8:	d903      	bls.n	80008b2 <__aeabi_ddiv+0x23a>
 80008aa:	2080      	movs	r0, #128	; 0x80
 80008ac:	0240      	lsls	r0, r0, #9
 80008ae:	4684      	mov	ip, r0
 80008b0:	4461      	add	r1, ip
 80008b2:	0c18      	lsrs	r0, r3, #16
 80008b4:	0412      	lsls	r2, r2, #16
 80008b6:	041b      	lsls	r3, r3, #16
 80008b8:	0c12      	lsrs	r2, r2, #16
 80008ba:	1840      	adds	r0, r0, r1
 80008bc:	189b      	adds	r3, r3, r2
 80008be:	4286      	cmp	r6, r0
 80008c0:	d200      	bcs.n	80008c4 <__aeabi_ddiv+0x24c>
 80008c2:	e100      	b.n	8000ac6 <__aeabi_ddiv+0x44e>
 80008c4:	d100      	bne.n	80008c8 <__aeabi_ddiv+0x250>
 80008c6:	e0fb      	b.n	8000ac0 <__aeabi_ddiv+0x448>
 80008c8:	2301      	movs	r3, #1
 80008ca:	431d      	orrs	r5, r3
 80008cc:	4b49      	ldr	r3, [pc, #292]	; (80009f4 <__aeabi_ddiv+0x37c>)
 80008ce:	445b      	add	r3, fp
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	dc00      	bgt.n	80008d6 <__aeabi_ddiv+0x25e>
 80008d4:	e0aa      	b.n	8000a2c <__aeabi_ddiv+0x3b4>
 80008d6:	076a      	lsls	r2, r5, #29
 80008d8:	d000      	beq.n	80008dc <__aeabi_ddiv+0x264>
 80008da:	e13d      	b.n	8000b58 <__aeabi_ddiv+0x4e0>
 80008dc:	08e9      	lsrs	r1, r5, #3
 80008de:	4642      	mov	r2, r8
 80008e0:	01d2      	lsls	r2, r2, #7
 80008e2:	d506      	bpl.n	80008f2 <__aeabi_ddiv+0x27a>
 80008e4:	4642      	mov	r2, r8
 80008e6:	4b44      	ldr	r3, [pc, #272]	; (80009f8 <__aeabi_ddiv+0x380>)
 80008e8:	401a      	ands	r2, r3
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	4690      	mov	r8, r2
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	445b      	add	r3, fp
 80008f2:	4a42      	ldr	r2, [pc, #264]	; (80009fc <__aeabi_ddiv+0x384>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	dd00      	ble.n	80008fa <__aeabi_ddiv+0x282>
 80008f8:	e723      	b.n	8000742 <__aeabi_ddiv+0xca>
 80008fa:	4642      	mov	r2, r8
 80008fc:	055b      	lsls	r3, r3, #21
 80008fe:	0755      	lsls	r5, r2, #29
 8000900:	0252      	lsls	r2, r2, #9
 8000902:	430d      	orrs	r5, r1
 8000904:	0b12      	lsrs	r2, r2, #12
 8000906:	0d5b      	lsrs	r3, r3, #21
 8000908:	e70d      	b.n	8000726 <__aeabi_ddiv+0xae>
 800090a:	4651      	mov	r1, sl
 800090c:	4321      	orrs	r1, r4
 800090e:	d100      	bne.n	8000912 <__aeabi_ddiv+0x29a>
 8000910:	e07c      	b.n	8000a0c <__aeabi_ddiv+0x394>
 8000912:	2c00      	cmp	r4, #0
 8000914:	d100      	bne.n	8000918 <__aeabi_ddiv+0x2a0>
 8000916:	e0fb      	b.n	8000b10 <__aeabi_ddiv+0x498>
 8000918:	0020      	movs	r0, r4
 800091a:	f000 fdb7 	bl	800148c <__clzsi2>
 800091e:	0002      	movs	r2, r0
 8000920:	3a0b      	subs	r2, #11
 8000922:	231d      	movs	r3, #29
 8000924:	1a9b      	subs	r3, r3, r2
 8000926:	4652      	mov	r2, sl
 8000928:	0001      	movs	r1, r0
 800092a:	40da      	lsrs	r2, r3
 800092c:	4653      	mov	r3, sl
 800092e:	3908      	subs	r1, #8
 8000930:	408b      	lsls	r3, r1
 8000932:	408c      	lsls	r4, r1
 8000934:	0019      	movs	r1, r3
 8000936:	4314      	orrs	r4, r2
 8000938:	4b31      	ldr	r3, [pc, #196]	; (8000a00 <__aeabi_ddiv+0x388>)
 800093a:	4458      	add	r0, fp
 800093c:	469b      	mov	fp, r3
 800093e:	4483      	add	fp, r0
 8000940:	2000      	movs	r0, #0
 8000942:	e6d9      	b.n	80006f8 <__aeabi_ddiv+0x80>
 8000944:	0003      	movs	r3, r0
 8000946:	4323      	orrs	r3, r4
 8000948:	4698      	mov	r8, r3
 800094a:	d044      	beq.n	80009d6 <__aeabi_ddiv+0x35e>
 800094c:	2c00      	cmp	r4, #0
 800094e:	d100      	bne.n	8000952 <__aeabi_ddiv+0x2da>
 8000950:	e0cf      	b.n	8000af2 <__aeabi_ddiv+0x47a>
 8000952:	0020      	movs	r0, r4
 8000954:	f000 fd9a 	bl	800148c <__clzsi2>
 8000958:	0001      	movs	r1, r0
 800095a:	0002      	movs	r2, r0
 800095c:	390b      	subs	r1, #11
 800095e:	231d      	movs	r3, #29
 8000960:	1a5b      	subs	r3, r3, r1
 8000962:	4649      	mov	r1, r9
 8000964:	0010      	movs	r0, r2
 8000966:	40d9      	lsrs	r1, r3
 8000968:	3808      	subs	r0, #8
 800096a:	4084      	lsls	r4, r0
 800096c:	000b      	movs	r3, r1
 800096e:	464d      	mov	r5, r9
 8000970:	4323      	orrs	r3, r4
 8000972:	4698      	mov	r8, r3
 8000974:	4085      	lsls	r5, r0
 8000976:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <__aeabi_ddiv+0x38c>)
 8000978:	1a9b      	subs	r3, r3, r2
 800097a:	469b      	mov	fp, r3
 800097c:	2300      	movs	r3, #0
 800097e:	4699      	mov	r9, r3
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	e69e      	b.n	80006c2 <__aeabi_ddiv+0x4a>
 8000984:	0002      	movs	r2, r0
 8000986:	4322      	orrs	r2, r4
 8000988:	4690      	mov	r8, r2
 800098a:	d11d      	bne.n	80009c8 <__aeabi_ddiv+0x350>
 800098c:	2208      	movs	r2, #8
 800098e:	469b      	mov	fp, r3
 8000990:	2302      	movs	r3, #2
 8000992:	2500      	movs	r5, #0
 8000994:	4691      	mov	r9, r2
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	e693      	b.n	80006c2 <__aeabi_ddiv+0x4a>
 800099a:	4651      	mov	r1, sl
 800099c:	4321      	orrs	r1, r4
 800099e:	d109      	bne.n	80009b4 <__aeabi_ddiv+0x33c>
 80009a0:	2302      	movs	r3, #2
 80009a2:	464a      	mov	r2, r9
 80009a4:	431a      	orrs	r2, r3
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <__aeabi_ddiv+0x390>)
 80009a8:	4691      	mov	r9, r2
 80009aa:	469c      	mov	ip, r3
 80009ac:	2400      	movs	r4, #0
 80009ae:	2002      	movs	r0, #2
 80009b0:	44e3      	add	fp, ip
 80009b2:	e6a1      	b.n	80006f8 <__aeabi_ddiv+0x80>
 80009b4:	2303      	movs	r3, #3
 80009b6:	464a      	mov	r2, r9
 80009b8:	431a      	orrs	r2, r3
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <__aeabi_ddiv+0x390>)
 80009bc:	4691      	mov	r9, r2
 80009be:	469c      	mov	ip, r3
 80009c0:	4651      	mov	r1, sl
 80009c2:	2003      	movs	r0, #3
 80009c4:	44e3      	add	fp, ip
 80009c6:	e697      	b.n	80006f8 <__aeabi_ddiv+0x80>
 80009c8:	220c      	movs	r2, #12
 80009ca:	469b      	mov	fp, r3
 80009cc:	2303      	movs	r3, #3
 80009ce:	46a0      	mov	r8, r4
 80009d0:	4691      	mov	r9, r2
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	e675      	b.n	80006c2 <__aeabi_ddiv+0x4a>
 80009d6:	2304      	movs	r3, #4
 80009d8:	4699      	mov	r9, r3
 80009da:	2300      	movs	r3, #0
 80009dc:	469b      	mov	fp, r3
 80009de:	3301      	adds	r3, #1
 80009e0:	2500      	movs	r5, #0
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	e66d      	b.n	80006c2 <__aeabi_ddiv+0x4a>
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	000007ff 	.word	0x000007ff
 80009ec:	fffffc01 	.word	0xfffffc01
 80009f0:	08007aa8 	.word	0x08007aa8
 80009f4:	000003ff 	.word	0x000003ff
 80009f8:	feffffff 	.word	0xfeffffff
 80009fc:	000007fe 	.word	0x000007fe
 8000a00:	000003f3 	.word	0x000003f3
 8000a04:	fffffc0d 	.word	0xfffffc0d
 8000a08:	fffff801 	.word	0xfffff801
 8000a0c:	464a      	mov	r2, r9
 8000a0e:	2301      	movs	r3, #1
 8000a10:	431a      	orrs	r2, r3
 8000a12:	4691      	mov	r9, r2
 8000a14:	2400      	movs	r4, #0
 8000a16:	2001      	movs	r0, #1
 8000a18:	e66e      	b.n	80006f8 <__aeabi_ddiv+0x80>
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	2280      	movs	r2, #128	; 0x80
 8000a1e:	469a      	mov	sl, r3
 8000a20:	2500      	movs	r5, #0
 8000a22:	4b88      	ldr	r3, [pc, #544]	; (8000c44 <__aeabi_ddiv+0x5cc>)
 8000a24:	0312      	lsls	r2, r2, #12
 8000a26:	e67e      	b.n	8000726 <__aeabi_ddiv+0xae>
 8000a28:	2501      	movs	r5, #1
 8000a2a:	426d      	negs	r5, r5
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	1ad2      	subs	r2, r2, r3
 8000a30:	2a38      	cmp	r2, #56	; 0x38
 8000a32:	dd00      	ble.n	8000a36 <__aeabi_ddiv+0x3be>
 8000a34:	e674      	b.n	8000720 <__aeabi_ddiv+0xa8>
 8000a36:	2a1f      	cmp	r2, #31
 8000a38:	dc00      	bgt.n	8000a3c <__aeabi_ddiv+0x3c4>
 8000a3a:	e0bd      	b.n	8000bb8 <__aeabi_ddiv+0x540>
 8000a3c:	211f      	movs	r1, #31
 8000a3e:	4249      	negs	r1, r1
 8000a40:	1acb      	subs	r3, r1, r3
 8000a42:	4641      	mov	r1, r8
 8000a44:	40d9      	lsrs	r1, r3
 8000a46:	000b      	movs	r3, r1
 8000a48:	2a20      	cmp	r2, #32
 8000a4a:	d004      	beq.n	8000a56 <__aeabi_ddiv+0x3de>
 8000a4c:	4641      	mov	r1, r8
 8000a4e:	4a7e      	ldr	r2, [pc, #504]	; (8000c48 <__aeabi_ddiv+0x5d0>)
 8000a50:	445a      	add	r2, fp
 8000a52:	4091      	lsls	r1, r2
 8000a54:	430d      	orrs	r5, r1
 8000a56:	0029      	movs	r1, r5
 8000a58:	1e4a      	subs	r2, r1, #1
 8000a5a:	4191      	sbcs	r1, r2
 8000a5c:	4319      	orrs	r1, r3
 8000a5e:	2307      	movs	r3, #7
 8000a60:	001d      	movs	r5, r3
 8000a62:	2200      	movs	r2, #0
 8000a64:	400d      	ands	r5, r1
 8000a66:	420b      	tst	r3, r1
 8000a68:	d100      	bne.n	8000a6c <__aeabi_ddiv+0x3f4>
 8000a6a:	e0d0      	b.n	8000c0e <__aeabi_ddiv+0x596>
 8000a6c:	220f      	movs	r2, #15
 8000a6e:	2300      	movs	r3, #0
 8000a70:	400a      	ands	r2, r1
 8000a72:	2a04      	cmp	r2, #4
 8000a74:	d100      	bne.n	8000a78 <__aeabi_ddiv+0x400>
 8000a76:	e0c7      	b.n	8000c08 <__aeabi_ddiv+0x590>
 8000a78:	1d0a      	adds	r2, r1, #4
 8000a7a:	428a      	cmp	r2, r1
 8000a7c:	4189      	sbcs	r1, r1
 8000a7e:	4249      	negs	r1, r1
 8000a80:	185b      	adds	r3, r3, r1
 8000a82:	0011      	movs	r1, r2
 8000a84:	021a      	lsls	r2, r3, #8
 8000a86:	d400      	bmi.n	8000a8a <__aeabi_ddiv+0x412>
 8000a88:	e0be      	b.n	8000c08 <__aeabi_ddiv+0x590>
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2500      	movs	r5, #0
 8000a90:	e649      	b.n	8000726 <__aeabi_ddiv+0xae>
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	4643      	mov	r3, r8
 8000a96:	0312      	lsls	r2, r2, #12
 8000a98:	4213      	tst	r3, r2
 8000a9a:	d008      	beq.n	8000aae <__aeabi_ddiv+0x436>
 8000a9c:	4214      	tst	r4, r2
 8000a9e:	d106      	bne.n	8000aae <__aeabi_ddiv+0x436>
 8000aa0:	4322      	orrs	r2, r4
 8000aa2:	0312      	lsls	r2, r2, #12
 8000aa4:	46ba      	mov	sl, r7
 8000aa6:	000d      	movs	r5, r1
 8000aa8:	4b66      	ldr	r3, [pc, #408]	; (8000c44 <__aeabi_ddiv+0x5cc>)
 8000aaa:	0b12      	lsrs	r2, r2, #12
 8000aac:	e63b      	b.n	8000726 <__aeabi_ddiv+0xae>
 8000aae:	2280      	movs	r2, #128	; 0x80
 8000ab0:	4643      	mov	r3, r8
 8000ab2:	0312      	lsls	r2, r2, #12
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	0312      	lsls	r2, r2, #12
 8000ab8:	46b2      	mov	sl, r6
 8000aba:	4b62      	ldr	r3, [pc, #392]	; (8000c44 <__aeabi_ddiv+0x5cc>)
 8000abc:	0b12      	lsrs	r2, r2, #12
 8000abe:	e632      	b.n	8000726 <__aeabi_ddiv+0xae>
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_ddiv+0x44e>
 8000ac4:	e702      	b.n	80008cc <__aeabi_ddiv+0x254>
 8000ac6:	19a6      	adds	r6, r4, r6
 8000ac8:	1e6a      	subs	r2, r5, #1
 8000aca:	42a6      	cmp	r6, r4
 8000acc:	d200      	bcs.n	8000ad0 <__aeabi_ddiv+0x458>
 8000ace:	e089      	b.n	8000be4 <__aeabi_ddiv+0x56c>
 8000ad0:	4286      	cmp	r6, r0
 8000ad2:	d200      	bcs.n	8000ad6 <__aeabi_ddiv+0x45e>
 8000ad4:	e09f      	b.n	8000c16 <__aeabi_ddiv+0x59e>
 8000ad6:	d100      	bne.n	8000ada <__aeabi_ddiv+0x462>
 8000ad8:	e0af      	b.n	8000c3a <__aeabi_ddiv+0x5c2>
 8000ada:	0015      	movs	r5, r2
 8000adc:	e6f4      	b.n	80008c8 <__aeabi_ddiv+0x250>
 8000ade:	42a9      	cmp	r1, r5
 8000ae0:	d900      	bls.n	8000ae4 <__aeabi_ddiv+0x46c>
 8000ae2:	e63c      	b.n	800075e <__aeabi_ddiv+0xe6>
 8000ae4:	4643      	mov	r3, r8
 8000ae6:	07de      	lsls	r6, r3, #31
 8000ae8:	0858      	lsrs	r0, r3, #1
 8000aea:	086b      	lsrs	r3, r5, #1
 8000aec:	431e      	orrs	r6, r3
 8000aee:	07ed      	lsls	r5, r5, #31
 8000af0:	e63c      	b.n	800076c <__aeabi_ddiv+0xf4>
 8000af2:	f000 fccb 	bl	800148c <__clzsi2>
 8000af6:	0001      	movs	r1, r0
 8000af8:	0002      	movs	r2, r0
 8000afa:	3115      	adds	r1, #21
 8000afc:	3220      	adds	r2, #32
 8000afe:	291c      	cmp	r1, #28
 8000b00:	dc00      	bgt.n	8000b04 <__aeabi_ddiv+0x48c>
 8000b02:	e72c      	b.n	800095e <__aeabi_ddiv+0x2e6>
 8000b04:	464b      	mov	r3, r9
 8000b06:	3808      	subs	r0, #8
 8000b08:	4083      	lsls	r3, r0
 8000b0a:	2500      	movs	r5, #0
 8000b0c:	4698      	mov	r8, r3
 8000b0e:	e732      	b.n	8000976 <__aeabi_ddiv+0x2fe>
 8000b10:	f000 fcbc 	bl	800148c <__clzsi2>
 8000b14:	0003      	movs	r3, r0
 8000b16:	001a      	movs	r2, r3
 8000b18:	3215      	adds	r2, #21
 8000b1a:	3020      	adds	r0, #32
 8000b1c:	2a1c      	cmp	r2, #28
 8000b1e:	dc00      	bgt.n	8000b22 <__aeabi_ddiv+0x4aa>
 8000b20:	e6ff      	b.n	8000922 <__aeabi_ddiv+0x2aa>
 8000b22:	4654      	mov	r4, sl
 8000b24:	3b08      	subs	r3, #8
 8000b26:	2100      	movs	r1, #0
 8000b28:	409c      	lsls	r4, r3
 8000b2a:	e705      	b.n	8000938 <__aeabi_ddiv+0x2c0>
 8000b2c:	1936      	adds	r6, r6, r4
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	42b4      	cmp	r4, r6
 8000b32:	d900      	bls.n	8000b36 <__aeabi_ddiv+0x4be>
 8000b34:	e6a6      	b.n	8000884 <__aeabi_ddiv+0x20c>
 8000b36:	42b2      	cmp	r2, r6
 8000b38:	d800      	bhi.n	8000b3c <__aeabi_ddiv+0x4c4>
 8000b3a:	e6a3      	b.n	8000884 <__aeabi_ddiv+0x20c>
 8000b3c:	1e83      	subs	r3, r0, #2
 8000b3e:	1936      	adds	r6, r6, r4
 8000b40:	e6a0      	b.n	8000884 <__aeabi_ddiv+0x20c>
 8000b42:	1909      	adds	r1, r1, r4
 8000b44:	3d01      	subs	r5, #1
 8000b46:	428c      	cmp	r4, r1
 8000b48:	d900      	bls.n	8000b4c <__aeabi_ddiv+0x4d4>
 8000b4a:	e68d      	b.n	8000868 <__aeabi_ddiv+0x1f0>
 8000b4c:	428a      	cmp	r2, r1
 8000b4e:	d800      	bhi.n	8000b52 <__aeabi_ddiv+0x4da>
 8000b50:	e68a      	b.n	8000868 <__aeabi_ddiv+0x1f0>
 8000b52:	1e85      	subs	r5, r0, #2
 8000b54:	1909      	adds	r1, r1, r4
 8000b56:	e687      	b.n	8000868 <__aeabi_ddiv+0x1f0>
 8000b58:	220f      	movs	r2, #15
 8000b5a:	402a      	ands	r2, r5
 8000b5c:	2a04      	cmp	r2, #4
 8000b5e:	d100      	bne.n	8000b62 <__aeabi_ddiv+0x4ea>
 8000b60:	e6bc      	b.n	80008dc <__aeabi_ddiv+0x264>
 8000b62:	1d29      	adds	r1, r5, #4
 8000b64:	42a9      	cmp	r1, r5
 8000b66:	41ad      	sbcs	r5, r5
 8000b68:	426d      	negs	r5, r5
 8000b6a:	08c9      	lsrs	r1, r1, #3
 8000b6c:	44a8      	add	r8, r5
 8000b6e:	e6b6      	b.n	80008de <__aeabi_ddiv+0x266>
 8000b70:	42af      	cmp	r7, r5
 8000b72:	d900      	bls.n	8000b76 <__aeabi_ddiv+0x4fe>
 8000b74:	e662      	b.n	800083c <__aeabi_ddiv+0x1c4>
 8000b76:	4281      	cmp	r1, r0
 8000b78:	d804      	bhi.n	8000b84 <__aeabi_ddiv+0x50c>
 8000b7a:	d000      	beq.n	8000b7e <__aeabi_ddiv+0x506>
 8000b7c:	e65e      	b.n	800083c <__aeabi_ddiv+0x1c4>
 8000b7e:	42ae      	cmp	r6, r5
 8000b80:	d800      	bhi.n	8000b84 <__aeabi_ddiv+0x50c>
 8000b82:	e65b      	b.n	800083c <__aeabi_ddiv+0x1c4>
 8000b84:	2302      	movs	r3, #2
 8000b86:	425b      	negs	r3, r3
 8000b88:	469c      	mov	ip, r3
 8000b8a:	9b00      	ldr	r3, [sp, #0]
 8000b8c:	44e0      	add	r8, ip
 8000b8e:	469c      	mov	ip, r3
 8000b90:	4465      	add	r5, ip
 8000b92:	429d      	cmp	r5, r3
 8000b94:	419b      	sbcs	r3, r3
 8000b96:	425b      	negs	r3, r3
 8000b98:	191b      	adds	r3, r3, r4
 8000b9a:	18c0      	adds	r0, r0, r3
 8000b9c:	e64f      	b.n	800083e <__aeabi_ddiv+0x1c6>
 8000b9e:	42b2      	cmp	r2, r6
 8000ba0:	d800      	bhi.n	8000ba4 <__aeabi_ddiv+0x52c>
 8000ba2:	e612      	b.n	80007ca <__aeabi_ddiv+0x152>
 8000ba4:	1e83      	subs	r3, r0, #2
 8000ba6:	1936      	adds	r6, r6, r4
 8000ba8:	e60f      	b.n	80007ca <__aeabi_ddiv+0x152>
 8000baa:	428a      	cmp	r2, r1
 8000bac:	d800      	bhi.n	8000bb0 <__aeabi_ddiv+0x538>
 8000bae:	e5fa      	b.n	80007a6 <__aeabi_ddiv+0x12e>
 8000bb0:	1e83      	subs	r3, r0, #2
 8000bb2:	4698      	mov	r8, r3
 8000bb4:	1909      	adds	r1, r1, r4
 8000bb6:	e5f6      	b.n	80007a6 <__aeabi_ddiv+0x12e>
 8000bb8:	4b24      	ldr	r3, [pc, #144]	; (8000c4c <__aeabi_ddiv+0x5d4>)
 8000bba:	0028      	movs	r0, r5
 8000bbc:	445b      	add	r3, fp
 8000bbe:	4641      	mov	r1, r8
 8000bc0:	409d      	lsls	r5, r3
 8000bc2:	4099      	lsls	r1, r3
 8000bc4:	40d0      	lsrs	r0, r2
 8000bc6:	1e6b      	subs	r3, r5, #1
 8000bc8:	419d      	sbcs	r5, r3
 8000bca:	4643      	mov	r3, r8
 8000bcc:	4301      	orrs	r1, r0
 8000bce:	4329      	orrs	r1, r5
 8000bd0:	40d3      	lsrs	r3, r2
 8000bd2:	074a      	lsls	r2, r1, #29
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_ddiv+0x560>
 8000bd6:	e755      	b.n	8000a84 <__aeabi_ddiv+0x40c>
 8000bd8:	220f      	movs	r2, #15
 8000bda:	400a      	ands	r2, r1
 8000bdc:	2a04      	cmp	r2, #4
 8000bde:	d000      	beq.n	8000be2 <__aeabi_ddiv+0x56a>
 8000be0:	e74a      	b.n	8000a78 <__aeabi_ddiv+0x400>
 8000be2:	e74f      	b.n	8000a84 <__aeabi_ddiv+0x40c>
 8000be4:	0015      	movs	r5, r2
 8000be6:	4286      	cmp	r6, r0
 8000be8:	d000      	beq.n	8000bec <__aeabi_ddiv+0x574>
 8000bea:	e66d      	b.n	80008c8 <__aeabi_ddiv+0x250>
 8000bec:	9a00      	ldr	r2, [sp, #0]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d000      	beq.n	8000bf4 <__aeabi_ddiv+0x57c>
 8000bf2:	e669      	b.n	80008c8 <__aeabi_ddiv+0x250>
 8000bf4:	e66a      	b.n	80008cc <__aeabi_ddiv+0x254>
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <__aeabi_ddiv+0x5d8>)
 8000bf8:	445b      	add	r3, fp
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	dc00      	bgt.n	8000c00 <__aeabi_ddiv+0x588>
 8000bfe:	e713      	b.n	8000a28 <__aeabi_ddiv+0x3b0>
 8000c00:	2501      	movs	r5, #1
 8000c02:	2100      	movs	r1, #0
 8000c04:	44a8      	add	r8, r5
 8000c06:	e66a      	b.n	80008de <__aeabi_ddiv+0x266>
 8000c08:	075d      	lsls	r5, r3, #29
 8000c0a:	025b      	lsls	r3, r3, #9
 8000c0c:	0b1a      	lsrs	r2, r3, #12
 8000c0e:	08c9      	lsrs	r1, r1, #3
 8000c10:	2300      	movs	r3, #0
 8000c12:	430d      	orrs	r5, r1
 8000c14:	e587      	b.n	8000726 <__aeabi_ddiv+0xae>
 8000c16:	9900      	ldr	r1, [sp, #0]
 8000c18:	3d02      	subs	r5, #2
 8000c1a:	004a      	lsls	r2, r1, #1
 8000c1c:	428a      	cmp	r2, r1
 8000c1e:	41bf      	sbcs	r7, r7
 8000c20:	427f      	negs	r7, r7
 8000c22:	193f      	adds	r7, r7, r4
 8000c24:	19f6      	adds	r6, r6, r7
 8000c26:	9200      	str	r2, [sp, #0]
 8000c28:	e7dd      	b.n	8000be6 <__aeabi_ddiv+0x56e>
 8000c2a:	2280      	movs	r2, #128	; 0x80
 8000c2c:	4643      	mov	r3, r8
 8000c2e:	0312      	lsls	r2, r2, #12
 8000c30:	431a      	orrs	r2, r3
 8000c32:	0312      	lsls	r2, r2, #12
 8000c34:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <__aeabi_ddiv+0x5cc>)
 8000c36:	0b12      	lsrs	r2, r2, #12
 8000c38:	e575      	b.n	8000726 <__aeabi_ddiv+0xae>
 8000c3a:	9900      	ldr	r1, [sp, #0]
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	d3ea      	bcc.n	8000c16 <__aeabi_ddiv+0x59e>
 8000c40:	0015      	movs	r5, r2
 8000c42:	e7d3      	b.n	8000bec <__aeabi_ddiv+0x574>
 8000c44:	000007ff 	.word	0x000007ff
 8000c48:	0000043e 	.word	0x0000043e
 8000c4c:	0000041e 	.word	0x0000041e
 8000c50:	000003ff 	.word	0x000003ff

08000c54 <__aeabi_dsub>:
 8000c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c56:	4657      	mov	r7, sl
 8000c58:	464e      	mov	r6, r9
 8000c5a:	4645      	mov	r5, r8
 8000c5c:	46de      	mov	lr, fp
 8000c5e:	b5e0      	push	{r5, r6, r7, lr}
 8000c60:	000d      	movs	r5, r1
 8000c62:	0004      	movs	r4, r0
 8000c64:	0019      	movs	r1, r3
 8000c66:	0010      	movs	r0, r2
 8000c68:	032b      	lsls	r3, r5, #12
 8000c6a:	0a5b      	lsrs	r3, r3, #9
 8000c6c:	0f62      	lsrs	r2, r4, #29
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	00e3      	lsls	r3, r4, #3
 8000c72:	030c      	lsls	r4, r1, #12
 8000c74:	0a64      	lsrs	r4, r4, #9
 8000c76:	0f47      	lsrs	r7, r0, #29
 8000c78:	4327      	orrs	r7, r4
 8000c7a:	4cd0      	ldr	r4, [pc, #832]	; (8000fbc <__aeabi_dsub+0x368>)
 8000c7c:	006e      	lsls	r6, r5, #1
 8000c7e:	4691      	mov	r9, r2
 8000c80:	b083      	sub	sp, #12
 8000c82:	004a      	lsls	r2, r1, #1
 8000c84:	00c0      	lsls	r0, r0, #3
 8000c86:	4698      	mov	r8, r3
 8000c88:	46a2      	mov	sl, r4
 8000c8a:	0d76      	lsrs	r6, r6, #21
 8000c8c:	0fed      	lsrs	r5, r5, #31
 8000c8e:	0d52      	lsrs	r2, r2, #21
 8000c90:	0fc9      	lsrs	r1, r1, #31
 8000c92:	9001      	str	r0, [sp, #4]
 8000c94:	42a2      	cmp	r2, r4
 8000c96:	d100      	bne.n	8000c9a <__aeabi_dsub+0x46>
 8000c98:	e0b9      	b.n	8000e0e <__aeabi_dsub+0x1ba>
 8000c9a:	2401      	movs	r4, #1
 8000c9c:	4061      	eors	r1, r4
 8000c9e:	468b      	mov	fp, r1
 8000ca0:	428d      	cmp	r5, r1
 8000ca2:	d100      	bne.n	8000ca6 <__aeabi_dsub+0x52>
 8000ca4:	e08d      	b.n	8000dc2 <__aeabi_dsub+0x16e>
 8000ca6:	1ab4      	subs	r4, r6, r2
 8000ca8:	46a4      	mov	ip, r4
 8000caa:	2c00      	cmp	r4, #0
 8000cac:	dc00      	bgt.n	8000cb0 <__aeabi_dsub+0x5c>
 8000cae:	e0b7      	b.n	8000e20 <__aeabi_dsub+0x1cc>
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	d100      	bne.n	8000cb6 <__aeabi_dsub+0x62>
 8000cb4:	e0cb      	b.n	8000e4e <__aeabi_dsub+0x1fa>
 8000cb6:	4ac1      	ldr	r2, [pc, #772]	; (8000fbc <__aeabi_dsub+0x368>)
 8000cb8:	4296      	cmp	r6, r2
 8000cba:	d100      	bne.n	8000cbe <__aeabi_dsub+0x6a>
 8000cbc:	e186      	b.n	8000fcc <__aeabi_dsub+0x378>
 8000cbe:	2280      	movs	r2, #128	; 0x80
 8000cc0:	0412      	lsls	r2, r2, #16
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	4662      	mov	r2, ip
 8000cc6:	2a38      	cmp	r2, #56	; 0x38
 8000cc8:	dd00      	ble.n	8000ccc <__aeabi_dsub+0x78>
 8000cca:	e1a4      	b.n	8001016 <__aeabi_dsub+0x3c2>
 8000ccc:	2a1f      	cmp	r2, #31
 8000cce:	dd00      	ble.n	8000cd2 <__aeabi_dsub+0x7e>
 8000cd0:	e21d      	b.n	800110e <__aeabi_dsub+0x4ba>
 8000cd2:	4661      	mov	r1, ip
 8000cd4:	2220      	movs	r2, #32
 8000cd6:	003c      	movs	r4, r7
 8000cd8:	1a52      	subs	r2, r2, r1
 8000cda:	0001      	movs	r1, r0
 8000cdc:	4090      	lsls	r0, r2
 8000cde:	4094      	lsls	r4, r2
 8000ce0:	1e42      	subs	r2, r0, #1
 8000ce2:	4190      	sbcs	r0, r2
 8000ce4:	4662      	mov	r2, ip
 8000ce6:	46a0      	mov	r8, r4
 8000ce8:	4664      	mov	r4, ip
 8000cea:	40d7      	lsrs	r7, r2
 8000cec:	464a      	mov	r2, r9
 8000cee:	40e1      	lsrs	r1, r4
 8000cf0:	4644      	mov	r4, r8
 8000cf2:	1bd2      	subs	r2, r2, r7
 8000cf4:	4691      	mov	r9, r2
 8000cf6:	430c      	orrs	r4, r1
 8000cf8:	4304      	orrs	r4, r0
 8000cfa:	1b1c      	subs	r4, r3, r4
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	4192      	sbcs	r2, r2
 8000d00:	464b      	mov	r3, r9
 8000d02:	4252      	negs	r2, r2
 8000d04:	1a9b      	subs	r3, r3, r2
 8000d06:	469a      	mov	sl, r3
 8000d08:	4653      	mov	r3, sl
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	d400      	bmi.n	8000d10 <__aeabi_dsub+0xbc>
 8000d0e:	e12b      	b.n	8000f68 <__aeabi_dsub+0x314>
 8000d10:	4653      	mov	r3, sl
 8000d12:	025a      	lsls	r2, r3, #9
 8000d14:	0a53      	lsrs	r3, r2, #9
 8000d16:	469a      	mov	sl, r3
 8000d18:	4653      	mov	r3, sl
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_dsub+0xcc>
 8000d1e:	e166      	b.n	8000fee <__aeabi_dsub+0x39a>
 8000d20:	4650      	mov	r0, sl
 8000d22:	f000 fbb3 	bl	800148c <__clzsi2>
 8000d26:	0003      	movs	r3, r0
 8000d28:	3b08      	subs	r3, #8
 8000d2a:	2220      	movs	r2, #32
 8000d2c:	0020      	movs	r0, r4
 8000d2e:	1ad2      	subs	r2, r2, r3
 8000d30:	4651      	mov	r1, sl
 8000d32:	40d0      	lsrs	r0, r2
 8000d34:	4099      	lsls	r1, r3
 8000d36:	0002      	movs	r2, r0
 8000d38:	409c      	lsls	r4, r3
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	429e      	cmp	r6, r3
 8000d3e:	dd00      	ble.n	8000d42 <__aeabi_dsub+0xee>
 8000d40:	e164      	b.n	800100c <__aeabi_dsub+0x3b8>
 8000d42:	1b9b      	subs	r3, r3, r6
 8000d44:	1c59      	adds	r1, r3, #1
 8000d46:	291f      	cmp	r1, #31
 8000d48:	dd00      	ble.n	8000d4c <__aeabi_dsub+0xf8>
 8000d4a:	e0fe      	b.n	8000f4a <__aeabi_dsub+0x2f6>
 8000d4c:	2320      	movs	r3, #32
 8000d4e:	0010      	movs	r0, r2
 8000d50:	0026      	movs	r6, r4
 8000d52:	1a5b      	subs	r3, r3, r1
 8000d54:	409c      	lsls	r4, r3
 8000d56:	4098      	lsls	r0, r3
 8000d58:	40ce      	lsrs	r6, r1
 8000d5a:	40ca      	lsrs	r2, r1
 8000d5c:	1e63      	subs	r3, r4, #1
 8000d5e:	419c      	sbcs	r4, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	4692      	mov	sl, r2
 8000d64:	2600      	movs	r6, #0
 8000d66:	4304      	orrs	r4, r0
 8000d68:	0763      	lsls	r3, r4, #29
 8000d6a:	d009      	beq.n	8000d80 <__aeabi_dsub+0x12c>
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	4023      	ands	r3, r4
 8000d70:	2b04      	cmp	r3, #4
 8000d72:	d005      	beq.n	8000d80 <__aeabi_dsub+0x12c>
 8000d74:	1d23      	adds	r3, r4, #4
 8000d76:	42a3      	cmp	r3, r4
 8000d78:	41a4      	sbcs	r4, r4
 8000d7a:	4264      	negs	r4, r4
 8000d7c:	44a2      	add	sl, r4
 8000d7e:	001c      	movs	r4, r3
 8000d80:	4653      	mov	r3, sl
 8000d82:	021b      	lsls	r3, r3, #8
 8000d84:	d400      	bmi.n	8000d88 <__aeabi_dsub+0x134>
 8000d86:	e0f2      	b.n	8000f6e <__aeabi_dsub+0x31a>
 8000d88:	4b8c      	ldr	r3, [pc, #560]	; (8000fbc <__aeabi_dsub+0x368>)
 8000d8a:	3601      	adds	r6, #1
 8000d8c:	429e      	cmp	r6, r3
 8000d8e:	d100      	bne.n	8000d92 <__aeabi_dsub+0x13e>
 8000d90:	e10f      	b.n	8000fb2 <__aeabi_dsub+0x35e>
 8000d92:	4653      	mov	r3, sl
 8000d94:	498a      	ldr	r1, [pc, #552]	; (8000fc0 <__aeabi_dsub+0x36c>)
 8000d96:	08e4      	lsrs	r4, r4, #3
 8000d98:	400b      	ands	r3, r1
 8000d9a:	0019      	movs	r1, r3
 8000d9c:	075b      	lsls	r3, r3, #29
 8000d9e:	4323      	orrs	r3, r4
 8000da0:	0572      	lsls	r2, r6, #21
 8000da2:	024c      	lsls	r4, r1, #9
 8000da4:	0b24      	lsrs	r4, r4, #12
 8000da6:	0d52      	lsrs	r2, r2, #21
 8000da8:	0512      	lsls	r2, r2, #20
 8000daa:	4322      	orrs	r2, r4
 8000dac:	07ed      	lsls	r5, r5, #31
 8000dae:	432a      	orrs	r2, r5
 8000db0:	0018      	movs	r0, r3
 8000db2:	0011      	movs	r1, r2
 8000db4:	b003      	add	sp, #12
 8000db6:	bcf0      	pop	{r4, r5, r6, r7}
 8000db8:	46bb      	mov	fp, r7
 8000dba:	46b2      	mov	sl, r6
 8000dbc:	46a9      	mov	r9, r5
 8000dbe:	46a0      	mov	r8, r4
 8000dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc2:	1ab4      	subs	r4, r6, r2
 8000dc4:	46a4      	mov	ip, r4
 8000dc6:	2c00      	cmp	r4, #0
 8000dc8:	dd59      	ble.n	8000e7e <__aeabi_dsub+0x22a>
 8000dca:	2a00      	cmp	r2, #0
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_dsub+0x17c>
 8000dce:	e0b0      	b.n	8000f32 <__aeabi_dsub+0x2de>
 8000dd0:	4556      	cmp	r6, sl
 8000dd2:	d100      	bne.n	8000dd6 <__aeabi_dsub+0x182>
 8000dd4:	e0fa      	b.n	8000fcc <__aeabi_dsub+0x378>
 8000dd6:	2280      	movs	r2, #128	; 0x80
 8000dd8:	0412      	lsls	r2, r2, #16
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	4662      	mov	r2, ip
 8000dde:	2a38      	cmp	r2, #56	; 0x38
 8000de0:	dd00      	ble.n	8000de4 <__aeabi_dsub+0x190>
 8000de2:	e0d4      	b.n	8000f8e <__aeabi_dsub+0x33a>
 8000de4:	2a1f      	cmp	r2, #31
 8000de6:	dc00      	bgt.n	8000dea <__aeabi_dsub+0x196>
 8000de8:	e1c0      	b.n	800116c <__aeabi_dsub+0x518>
 8000dea:	0039      	movs	r1, r7
 8000dec:	3a20      	subs	r2, #32
 8000dee:	40d1      	lsrs	r1, r2
 8000df0:	4662      	mov	r2, ip
 8000df2:	2a20      	cmp	r2, #32
 8000df4:	d006      	beq.n	8000e04 <__aeabi_dsub+0x1b0>
 8000df6:	4664      	mov	r4, ip
 8000df8:	2240      	movs	r2, #64	; 0x40
 8000dfa:	1b12      	subs	r2, r2, r4
 8000dfc:	003c      	movs	r4, r7
 8000dfe:	4094      	lsls	r4, r2
 8000e00:	4304      	orrs	r4, r0
 8000e02:	9401      	str	r4, [sp, #4]
 8000e04:	9c01      	ldr	r4, [sp, #4]
 8000e06:	1e62      	subs	r2, r4, #1
 8000e08:	4194      	sbcs	r4, r2
 8000e0a:	430c      	orrs	r4, r1
 8000e0c:	e0c3      	b.n	8000f96 <__aeabi_dsub+0x342>
 8000e0e:	003c      	movs	r4, r7
 8000e10:	4304      	orrs	r4, r0
 8000e12:	d02b      	beq.n	8000e6c <__aeabi_dsub+0x218>
 8000e14:	468b      	mov	fp, r1
 8000e16:	428d      	cmp	r5, r1
 8000e18:	d02e      	beq.n	8000e78 <__aeabi_dsub+0x224>
 8000e1a:	4c6a      	ldr	r4, [pc, #424]	; (8000fc4 <__aeabi_dsub+0x370>)
 8000e1c:	46a4      	mov	ip, r4
 8000e1e:	44b4      	add	ip, r6
 8000e20:	4664      	mov	r4, ip
 8000e22:	2c00      	cmp	r4, #0
 8000e24:	d05f      	beq.n	8000ee6 <__aeabi_dsub+0x292>
 8000e26:	1b94      	subs	r4, r2, r6
 8000e28:	46a4      	mov	ip, r4
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d000      	beq.n	8000e30 <__aeabi_dsub+0x1dc>
 8000e2e:	e120      	b.n	8001072 <__aeabi_dsub+0x41e>
 8000e30:	464c      	mov	r4, r9
 8000e32:	431c      	orrs	r4, r3
 8000e34:	d100      	bne.n	8000e38 <__aeabi_dsub+0x1e4>
 8000e36:	e1c7      	b.n	80011c8 <__aeabi_dsub+0x574>
 8000e38:	4661      	mov	r1, ip
 8000e3a:	1e4c      	subs	r4, r1, #1
 8000e3c:	2901      	cmp	r1, #1
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_dsub+0x1ee>
 8000e40:	e223      	b.n	800128a <__aeabi_dsub+0x636>
 8000e42:	4d5e      	ldr	r5, [pc, #376]	; (8000fbc <__aeabi_dsub+0x368>)
 8000e44:	45ac      	cmp	ip, r5
 8000e46:	d100      	bne.n	8000e4a <__aeabi_dsub+0x1f6>
 8000e48:	e1d8      	b.n	80011fc <__aeabi_dsub+0x5a8>
 8000e4a:	46a4      	mov	ip, r4
 8000e4c:	e11a      	b.n	8001084 <__aeabi_dsub+0x430>
 8000e4e:	003a      	movs	r2, r7
 8000e50:	4302      	orrs	r2, r0
 8000e52:	d100      	bne.n	8000e56 <__aeabi_dsub+0x202>
 8000e54:	e0e4      	b.n	8001020 <__aeabi_dsub+0x3cc>
 8000e56:	0022      	movs	r2, r4
 8000e58:	3a01      	subs	r2, #1
 8000e5a:	2c01      	cmp	r4, #1
 8000e5c:	d100      	bne.n	8000e60 <__aeabi_dsub+0x20c>
 8000e5e:	e1c3      	b.n	80011e8 <__aeabi_dsub+0x594>
 8000e60:	4956      	ldr	r1, [pc, #344]	; (8000fbc <__aeabi_dsub+0x368>)
 8000e62:	428c      	cmp	r4, r1
 8000e64:	d100      	bne.n	8000e68 <__aeabi_dsub+0x214>
 8000e66:	e0b1      	b.n	8000fcc <__aeabi_dsub+0x378>
 8000e68:	4694      	mov	ip, r2
 8000e6a:	e72b      	b.n	8000cc4 <__aeabi_dsub+0x70>
 8000e6c:	2401      	movs	r4, #1
 8000e6e:	4061      	eors	r1, r4
 8000e70:	468b      	mov	fp, r1
 8000e72:	428d      	cmp	r5, r1
 8000e74:	d000      	beq.n	8000e78 <__aeabi_dsub+0x224>
 8000e76:	e716      	b.n	8000ca6 <__aeabi_dsub+0x52>
 8000e78:	4952      	ldr	r1, [pc, #328]	; (8000fc4 <__aeabi_dsub+0x370>)
 8000e7a:	468c      	mov	ip, r1
 8000e7c:	44b4      	add	ip, r6
 8000e7e:	4664      	mov	r4, ip
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d100      	bne.n	8000e86 <__aeabi_dsub+0x232>
 8000e84:	e0d3      	b.n	800102e <__aeabi_dsub+0x3da>
 8000e86:	1b91      	subs	r1, r2, r6
 8000e88:	468c      	mov	ip, r1
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_dsub+0x23c>
 8000e8e:	e15e      	b.n	800114e <__aeabi_dsub+0x4fa>
 8000e90:	494a      	ldr	r1, [pc, #296]	; (8000fbc <__aeabi_dsub+0x368>)
 8000e92:	428a      	cmp	r2, r1
 8000e94:	d100      	bne.n	8000e98 <__aeabi_dsub+0x244>
 8000e96:	e1be      	b.n	8001216 <__aeabi_dsub+0x5c2>
 8000e98:	2180      	movs	r1, #128	; 0x80
 8000e9a:	464c      	mov	r4, r9
 8000e9c:	0409      	lsls	r1, r1, #16
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	46a1      	mov	r9, r4
 8000ea2:	4661      	mov	r1, ip
 8000ea4:	2938      	cmp	r1, #56	; 0x38
 8000ea6:	dd00      	ble.n	8000eaa <__aeabi_dsub+0x256>
 8000ea8:	e1ba      	b.n	8001220 <__aeabi_dsub+0x5cc>
 8000eaa:	291f      	cmp	r1, #31
 8000eac:	dd00      	ble.n	8000eb0 <__aeabi_dsub+0x25c>
 8000eae:	e227      	b.n	8001300 <__aeabi_dsub+0x6ac>
 8000eb0:	2420      	movs	r4, #32
 8000eb2:	1a64      	subs	r4, r4, r1
 8000eb4:	4649      	mov	r1, r9
 8000eb6:	40a1      	lsls	r1, r4
 8000eb8:	001e      	movs	r6, r3
 8000eba:	4688      	mov	r8, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	40a3      	lsls	r3, r4
 8000ec0:	40ce      	lsrs	r6, r1
 8000ec2:	4641      	mov	r1, r8
 8000ec4:	1e5c      	subs	r4, r3, #1
 8000ec6:	41a3      	sbcs	r3, r4
 8000ec8:	4331      	orrs	r1, r6
 8000eca:	4319      	orrs	r1, r3
 8000ecc:	000c      	movs	r4, r1
 8000ece:	4663      	mov	r3, ip
 8000ed0:	4649      	mov	r1, r9
 8000ed2:	40d9      	lsrs	r1, r3
 8000ed4:	187f      	adds	r7, r7, r1
 8000ed6:	1824      	adds	r4, r4, r0
 8000ed8:	4284      	cmp	r4, r0
 8000eda:	419b      	sbcs	r3, r3
 8000edc:	425b      	negs	r3, r3
 8000ede:	469a      	mov	sl, r3
 8000ee0:	0016      	movs	r6, r2
 8000ee2:	44ba      	add	sl, r7
 8000ee4:	e05d      	b.n	8000fa2 <__aeabi_dsub+0x34e>
 8000ee6:	4c38      	ldr	r4, [pc, #224]	; (8000fc8 <__aeabi_dsub+0x374>)
 8000ee8:	1c72      	adds	r2, r6, #1
 8000eea:	4222      	tst	r2, r4
 8000eec:	d000      	beq.n	8000ef0 <__aeabi_dsub+0x29c>
 8000eee:	e0df      	b.n	80010b0 <__aeabi_dsub+0x45c>
 8000ef0:	464a      	mov	r2, r9
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	2e00      	cmp	r6, #0
 8000ef6:	d000      	beq.n	8000efa <__aeabi_dsub+0x2a6>
 8000ef8:	e15c      	b.n	80011b4 <__aeabi_dsub+0x560>
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	d100      	bne.n	8000f00 <__aeabi_dsub+0x2ac>
 8000efe:	e1cf      	b.n	80012a0 <__aeabi_dsub+0x64c>
 8000f00:	003a      	movs	r2, r7
 8000f02:	4302      	orrs	r2, r0
 8000f04:	d100      	bne.n	8000f08 <__aeabi_dsub+0x2b4>
 8000f06:	e17f      	b.n	8001208 <__aeabi_dsub+0x5b4>
 8000f08:	1a1c      	subs	r4, r3, r0
 8000f0a:	464a      	mov	r2, r9
 8000f0c:	42a3      	cmp	r3, r4
 8000f0e:	4189      	sbcs	r1, r1
 8000f10:	1bd2      	subs	r2, r2, r7
 8000f12:	4249      	negs	r1, r1
 8000f14:	1a52      	subs	r2, r2, r1
 8000f16:	4692      	mov	sl, r2
 8000f18:	0212      	lsls	r2, r2, #8
 8000f1a:	d400      	bmi.n	8000f1e <__aeabi_dsub+0x2ca>
 8000f1c:	e20a      	b.n	8001334 <__aeabi_dsub+0x6e0>
 8000f1e:	1ac4      	subs	r4, r0, r3
 8000f20:	42a0      	cmp	r0, r4
 8000f22:	4180      	sbcs	r0, r0
 8000f24:	464b      	mov	r3, r9
 8000f26:	4240      	negs	r0, r0
 8000f28:	1aff      	subs	r7, r7, r3
 8000f2a:	1a3b      	subs	r3, r7, r0
 8000f2c:	469a      	mov	sl, r3
 8000f2e:	465d      	mov	r5, fp
 8000f30:	e71a      	b.n	8000d68 <__aeabi_dsub+0x114>
 8000f32:	003a      	movs	r2, r7
 8000f34:	4302      	orrs	r2, r0
 8000f36:	d073      	beq.n	8001020 <__aeabi_dsub+0x3cc>
 8000f38:	0022      	movs	r2, r4
 8000f3a:	3a01      	subs	r2, #1
 8000f3c:	2c01      	cmp	r4, #1
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_dsub+0x2ee>
 8000f40:	e0cb      	b.n	80010da <__aeabi_dsub+0x486>
 8000f42:	4554      	cmp	r4, sl
 8000f44:	d042      	beq.n	8000fcc <__aeabi_dsub+0x378>
 8000f46:	4694      	mov	ip, r2
 8000f48:	e748      	b.n	8000ddc <__aeabi_dsub+0x188>
 8000f4a:	0010      	movs	r0, r2
 8000f4c:	3b1f      	subs	r3, #31
 8000f4e:	40d8      	lsrs	r0, r3
 8000f50:	2920      	cmp	r1, #32
 8000f52:	d003      	beq.n	8000f5c <__aeabi_dsub+0x308>
 8000f54:	2340      	movs	r3, #64	; 0x40
 8000f56:	1a5b      	subs	r3, r3, r1
 8000f58:	409a      	lsls	r2, r3
 8000f5a:	4314      	orrs	r4, r2
 8000f5c:	1e63      	subs	r3, r4, #1
 8000f5e:	419c      	sbcs	r4, r3
 8000f60:	2300      	movs	r3, #0
 8000f62:	2600      	movs	r6, #0
 8000f64:	469a      	mov	sl, r3
 8000f66:	4304      	orrs	r4, r0
 8000f68:	0763      	lsls	r3, r4, #29
 8000f6a:	d000      	beq.n	8000f6e <__aeabi_dsub+0x31a>
 8000f6c:	e6fe      	b.n	8000d6c <__aeabi_dsub+0x118>
 8000f6e:	4652      	mov	r2, sl
 8000f70:	08e3      	lsrs	r3, r4, #3
 8000f72:	0752      	lsls	r2, r2, #29
 8000f74:	4313      	orrs	r3, r2
 8000f76:	4652      	mov	r2, sl
 8000f78:	46b4      	mov	ip, r6
 8000f7a:	08d2      	lsrs	r2, r2, #3
 8000f7c:	490f      	ldr	r1, [pc, #60]	; (8000fbc <__aeabi_dsub+0x368>)
 8000f7e:	458c      	cmp	ip, r1
 8000f80:	d02a      	beq.n	8000fd8 <__aeabi_dsub+0x384>
 8000f82:	0312      	lsls	r2, r2, #12
 8000f84:	0b14      	lsrs	r4, r2, #12
 8000f86:	4662      	mov	r2, ip
 8000f88:	0552      	lsls	r2, r2, #21
 8000f8a:	0d52      	lsrs	r2, r2, #21
 8000f8c:	e70c      	b.n	8000da8 <__aeabi_dsub+0x154>
 8000f8e:	003c      	movs	r4, r7
 8000f90:	4304      	orrs	r4, r0
 8000f92:	1e62      	subs	r2, r4, #1
 8000f94:	4194      	sbcs	r4, r2
 8000f96:	18e4      	adds	r4, r4, r3
 8000f98:	429c      	cmp	r4, r3
 8000f9a:	4192      	sbcs	r2, r2
 8000f9c:	4252      	negs	r2, r2
 8000f9e:	444a      	add	r2, r9
 8000fa0:	4692      	mov	sl, r2
 8000fa2:	4653      	mov	r3, sl
 8000fa4:	021b      	lsls	r3, r3, #8
 8000fa6:	d5df      	bpl.n	8000f68 <__aeabi_dsub+0x314>
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <__aeabi_dsub+0x368>)
 8000faa:	3601      	adds	r6, #1
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d000      	beq.n	8000fb2 <__aeabi_dsub+0x35e>
 8000fb0:	e0a0      	b.n	80010f4 <__aeabi_dsub+0x4a0>
 8000fb2:	0032      	movs	r2, r6
 8000fb4:	2400      	movs	r4, #0
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e6f6      	b.n	8000da8 <__aeabi_dsub+0x154>
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	000007ff 	.word	0x000007ff
 8000fc0:	ff7fffff 	.word	0xff7fffff
 8000fc4:	fffff801 	.word	0xfffff801
 8000fc8:	000007fe 	.word	0x000007fe
 8000fcc:	08db      	lsrs	r3, r3, #3
 8000fce:	464a      	mov	r2, r9
 8000fd0:	0752      	lsls	r2, r2, #29
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	464a      	mov	r2, r9
 8000fd6:	08d2      	lsrs	r2, r2, #3
 8000fd8:	0019      	movs	r1, r3
 8000fda:	4311      	orrs	r1, r2
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_dsub+0x38c>
 8000fde:	e1b5      	b.n	800134c <__aeabi_dsub+0x6f8>
 8000fe0:	2480      	movs	r4, #128	; 0x80
 8000fe2:	0324      	lsls	r4, r4, #12
 8000fe4:	4314      	orrs	r4, r2
 8000fe6:	0324      	lsls	r4, r4, #12
 8000fe8:	4ad5      	ldr	r2, [pc, #852]	; (8001340 <__aeabi_dsub+0x6ec>)
 8000fea:	0b24      	lsrs	r4, r4, #12
 8000fec:	e6dc      	b.n	8000da8 <__aeabi_dsub+0x154>
 8000fee:	0020      	movs	r0, r4
 8000ff0:	f000 fa4c 	bl	800148c <__clzsi2>
 8000ff4:	0003      	movs	r3, r0
 8000ff6:	3318      	adds	r3, #24
 8000ff8:	2b1f      	cmp	r3, #31
 8000ffa:	dc00      	bgt.n	8000ffe <__aeabi_dsub+0x3aa>
 8000ffc:	e695      	b.n	8000d2a <__aeabi_dsub+0xd6>
 8000ffe:	0022      	movs	r2, r4
 8001000:	3808      	subs	r0, #8
 8001002:	4082      	lsls	r2, r0
 8001004:	2400      	movs	r4, #0
 8001006:	429e      	cmp	r6, r3
 8001008:	dc00      	bgt.n	800100c <__aeabi_dsub+0x3b8>
 800100a:	e69a      	b.n	8000d42 <__aeabi_dsub+0xee>
 800100c:	1af6      	subs	r6, r6, r3
 800100e:	4bcd      	ldr	r3, [pc, #820]	; (8001344 <__aeabi_dsub+0x6f0>)
 8001010:	401a      	ands	r2, r3
 8001012:	4692      	mov	sl, r2
 8001014:	e6a8      	b.n	8000d68 <__aeabi_dsub+0x114>
 8001016:	003c      	movs	r4, r7
 8001018:	4304      	orrs	r4, r0
 800101a:	1e62      	subs	r2, r4, #1
 800101c:	4194      	sbcs	r4, r2
 800101e:	e66c      	b.n	8000cfa <__aeabi_dsub+0xa6>
 8001020:	464a      	mov	r2, r9
 8001022:	08db      	lsrs	r3, r3, #3
 8001024:	0752      	lsls	r2, r2, #29
 8001026:	4313      	orrs	r3, r2
 8001028:	464a      	mov	r2, r9
 800102a:	08d2      	lsrs	r2, r2, #3
 800102c:	e7a6      	b.n	8000f7c <__aeabi_dsub+0x328>
 800102e:	4cc6      	ldr	r4, [pc, #792]	; (8001348 <__aeabi_dsub+0x6f4>)
 8001030:	1c72      	adds	r2, r6, #1
 8001032:	4222      	tst	r2, r4
 8001034:	d000      	beq.n	8001038 <__aeabi_dsub+0x3e4>
 8001036:	e0ac      	b.n	8001192 <__aeabi_dsub+0x53e>
 8001038:	464a      	mov	r2, r9
 800103a:	431a      	orrs	r2, r3
 800103c:	2e00      	cmp	r6, #0
 800103e:	d000      	beq.n	8001042 <__aeabi_dsub+0x3ee>
 8001040:	e105      	b.n	800124e <__aeabi_dsub+0x5fa>
 8001042:	2a00      	cmp	r2, #0
 8001044:	d100      	bne.n	8001048 <__aeabi_dsub+0x3f4>
 8001046:	e156      	b.n	80012f6 <__aeabi_dsub+0x6a2>
 8001048:	003a      	movs	r2, r7
 800104a:	4302      	orrs	r2, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_dsub+0x3fc>
 800104e:	e0db      	b.n	8001208 <__aeabi_dsub+0x5b4>
 8001050:	181c      	adds	r4, r3, r0
 8001052:	429c      	cmp	r4, r3
 8001054:	419b      	sbcs	r3, r3
 8001056:	444f      	add	r7, r9
 8001058:	46ba      	mov	sl, r7
 800105a:	425b      	negs	r3, r3
 800105c:	449a      	add	sl, r3
 800105e:	4653      	mov	r3, sl
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	d400      	bmi.n	8001066 <__aeabi_dsub+0x412>
 8001064:	e780      	b.n	8000f68 <__aeabi_dsub+0x314>
 8001066:	4652      	mov	r2, sl
 8001068:	4bb6      	ldr	r3, [pc, #728]	; (8001344 <__aeabi_dsub+0x6f0>)
 800106a:	2601      	movs	r6, #1
 800106c:	401a      	ands	r2, r3
 800106e:	4692      	mov	sl, r2
 8001070:	e77a      	b.n	8000f68 <__aeabi_dsub+0x314>
 8001072:	4cb3      	ldr	r4, [pc, #716]	; (8001340 <__aeabi_dsub+0x6ec>)
 8001074:	42a2      	cmp	r2, r4
 8001076:	d100      	bne.n	800107a <__aeabi_dsub+0x426>
 8001078:	e0c0      	b.n	80011fc <__aeabi_dsub+0x5a8>
 800107a:	2480      	movs	r4, #128	; 0x80
 800107c:	464d      	mov	r5, r9
 800107e:	0424      	lsls	r4, r4, #16
 8001080:	4325      	orrs	r5, r4
 8001082:	46a9      	mov	r9, r5
 8001084:	4664      	mov	r4, ip
 8001086:	2c38      	cmp	r4, #56	; 0x38
 8001088:	dc53      	bgt.n	8001132 <__aeabi_dsub+0x4de>
 800108a:	4661      	mov	r1, ip
 800108c:	2c1f      	cmp	r4, #31
 800108e:	dd00      	ble.n	8001092 <__aeabi_dsub+0x43e>
 8001090:	e0cd      	b.n	800122e <__aeabi_dsub+0x5da>
 8001092:	2520      	movs	r5, #32
 8001094:	001e      	movs	r6, r3
 8001096:	1b2d      	subs	r5, r5, r4
 8001098:	464c      	mov	r4, r9
 800109a:	40ab      	lsls	r3, r5
 800109c:	40ac      	lsls	r4, r5
 800109e:	40ce      	lsrs	r6, r1
 80010a0:	1e5d      	subs	r5, r3, #1
 80010a2:	41ab      	sbcs	r3, r5
 80010a4:	4334      	orrs	r4, r6
 80010a6:	4323      	orrs	r3, r4
 80010a8:	464c      	mov	r4, r9
 80010aa:	40cc      	lsrs	r4, r1
 80010ac:	1b3f      	subs	r7, r7, r4
 80010ae:	e045      	b.n	800113c <__aeabi_dsub+0x4e8>
 80010b0:	464a      	mov	r2, r9
 80010b2:	1a1c      	subs	r4, r3, r0
 80010b4:	1bd1      	subs	r1, r2, r7
 80010b6:	42a3      	cmp	r3, r4
 80010b8:	4192      	sbcs	r2, r2
 80010ba:	4252      	negs	r2, r2
 80010bc:	4692      	mov	sl, r2
 80010be:	000a      	movs	r2, r1
 80010c0:	4651      	mov	r1, sl
 80010c2:	1a52      	subs	r2, r2, r1
 80010c4:	4692      	mov	sl, r2
 80010c6:	0212      	lsls	r2, r2, #8
 80010c8:	d500      	bpl.n	80010cc <__aeabi_dsub+0x478>
 80010ca:	e083      	b.n	80011d4 <__aeabi_dsub+0x580>
 80010cc:	4653      	mov	r3, sl
 80010ce:	4323      	orrs	r3, r4
 80010d0:	d000      	beq.n	80010d4 <__aeabi_dsub+0x480>
 80010d2:	e621      	b.n	8000d18 <__aeabi_dsub+0xc4>
 80010d4:	2200      	movs	r2, #0
 80010d6:	2500      	movs	r5, #0
 80010d8:	e753      	b.n	8000f82 <__aeabi_dsub+0x32e>
 80010da:	181c      	adds	r4, r3, r0
 80010dc:	429c      	cmp	r4, r3
 80010de:	419b      	sbcs	r3, r3
 80010e0:	444f      	add	r7, r9
 80010e2:	46ba      	mov	sl, r7
 80010e4:	425b      	negs	r3, r3
 80010e6:	449a      	add	sl, r3
 80010e8:	4653      	mov	r3, sl
 80010ea:	2601      	movs	r6, #1
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	d400      	bmi.n	80010f2 <__aeabi_dsub+0x49e>
 80010f0:	e73a      	b.n	8000f68 <__aeabi_dsub+0x314>
 80010f2:	2602      	movs	r6, #2
 80010f4:	4652      	mov	r2, sl
 80010f6:	4b93      	ldr	r3, [pc, #588]	; (8001344 <__aeabi_dsub+0x6f0>)
 80010f8:	2101      	movs	r1, #1
 80010fa:	401a      	ands	r2, r3
 80010fc:	0013      	movs	r3, r2
 80010fe:	4021      	ands	r1, r4
 8001100:	0862      	lsrs	r2, r4, #1
 8001102:	430a      	orrs	r2, r1
 8001104:	07dc      	lsls	r4, r3, #31
 8001106:	085b      	lsrs	r3, r3, #1
 8001108:	469a      	mov	sl, r3
 800110a:	4314      	orrs	r4, r2
 800110c:	e62c      	b.n	8000d68 <__aeabi_dsub+0x114>
 800110e:	0039      	movs	r1, r7
 8001110:	3a20      	subs	r2, #32
 8001112:	40d1      	lsrs	r1, r2
 8001114:	4662      	mov	r2, ip
 8001116:	2a20      	cmp	r2, #32
 8001118:	d006      	beq.n	8001128 <__aeabi_dsub+0x4d4>
 800111a:	4664      	mov	r4, ip
 800111c:	2240      	movs	r2, #64	; 0x40
 800111e:	1b12      	subs	r2, r2, r4
 8001120:	003c      	movs	r4, r7
 8001122:	4094      	lsls	r4, r2
 8001124:	4304      	orrs	r4, r0
 8001126:	9401      	str	r4, [sp, #4]
 8001128:	9c01      	ldr	r4, [sp, #4]
 800112a:	1e62      	subs	r2, r4, #1
 800112c:	4194      	sbcs	r4, r2
 800112e:	430c      	orrs	r4, r1
 8001130:	e5e3      	b.n	8000cfa <__aeabi_dsub+0xa6>
 8001132:	4649      	mov	r1, r9
 8001134:	4319      	orrs	r1, r3
 8001136:	000b      	movs	r3, r1
 8001138:	1e5c      	subs	r4, r3, #1
 800113a:	41a3      	sbcs	r3, r4
 800113c:	1ac4      	subs	r4, r0, r3
 800113e:	42a0      	cmp	r0, r4
 8001140:	419b      	sbcs	r3, r3
 8001142:	425b      	negs	r3, r3
 8001144:	1afb      	subs	r3, r7, r3
 8001146:	469a      	mov	sl, r3
 8001148:	465d      	mov	r5, fp
 800114a:	0016      	movs	r6, r2
 800114c:	e5dc      	b.n	8000d08 <__aeabi_dsub+0xb4>
 800114e:	4649      	mov	r1, r9
 8001150:	4319      	orrs	r1, r3
 8001152:	d100      	bne.n	8001156 <__aeabi_dsub+0x502>
 8001154:	e0ae      	b.n	80012b4 <__aeabi_dsub+0x660>
 8001156:	4661      	mov	r1, ip
 8001158:	4664      	mov	r4, ip
 800115a:	3901      	subs	r1, #1
 800115c:	2c01      	cmp	r4, #1
 800115e:	d100      	bne.n	8001162 <__aeabi_dsub+0x50e>
 8001160:	e0e0      	b.n	8001324 <__aeabi_dsub+0x6d0>
 8001162:	4c77      	ldr	r4, [pc, #476]	; (8001340 <__aeabi_dsub+0x6ec>)
 8001164:	45a4      	cmp	ip, r4
 8001166:	d056      	beq.n	8001216 <__aeabi_dsub+0x5c2>
 8001168:	468c      	mov	ip, r1
 800116a:	e69a      	b.n	8000ea2 <__aeabi_dsub+0x24e>
 800116c:	4661      	mov	r1, ip
 800116e:	2220      	movs	r2, #32
 8001170:	003c      	movs	r4, r7
 8001172:	1a52      	subs	r2, r2, r1
 8001174:	4094      	lsls	r4, r2
 8001176:	0001      	movs	r1, r0
 8001178:	4090      	lsls	r0, r2
 800117a:	46a0      	mov	r8, r4
 800117c:	4664      	mov	r4, ip
 800117e:	1e42      	subs	r2, r0, #1
 8001180:	4190      	sbcs	r0, r2
 8001182:	4662      	mov	r2, ip
 8001184:	40e1      	lsrs	r1, r4
 8001186:	4644      	mov	r4, r8
 8001188:	40d7      	lsrs	r7, r2
 800118a:	430c      	orrs	r4, r1
 800118c:	4304      	orrs	r4, r0
 800118e:	44b9      	add	r9, r7
 8001190:	e701      	b.n	8000f96 <__aeabi_dsub+0x342>
 8001192:	496b      	ldr	r1, [pc, #428]	; (8001340 <__aeabi_dsub+0x6ec>)
 8001194:	428a      	cmp	r2, r1
 8001196:	d100      	bne.n	800119a <__aeabi_dsub+0x546>
 8001198:	e70c      	b.n	8000fb4 <__aeabi_dsub+0x360>
 800119a:	1818      	adds	r0, r3, r0
 800119c:	4298      	cmp	r0, r3
 800119e:	419b      	sbcs	r3, r3
 80011a0:	444f      	add	r7, r9
 80011a2:	425b      	negs	r3, r3
 80011a4:	18fb      	adds	r3, r7, r3
 80011a6:	07dc      	lsls	r4, r3, #31
 80011a8:	0840      	lsrs	r0, r0, #1
 80011aa:	085b      	lsrs	r3, r3, #1
 80011ac:	469a      	mov	sl, r3
 80011ae:	0016      	movs	r6, r2
 80011b0:	4304      	orrs	r4, r0
 80011b2:	e6d9      	b.n	8000f68 <__aeabi_dsub+0x314>
 80011b4:	2a00      	cmp	r2, #0
 80011b6:	d000      	beq.n	80011ba <__aeabi_dsub+0x566>
 80011b8:	e081      	b.n	80012be <__aeabi_dsub+0x66a>
 80011ba:	003b      	movs	r3, r7
 80011bc:	4303      	orrs	r3, r0
 80011be:	d11d      	bne.n	80011fc <__aeabi_dsub+0x5a8>
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	2500      	movs	r5, #0
 80011c4:	0312      	lsls	r2, r2, #12
 80011c6:	e70b      	b.n	8000fe0 <__aeabi_dsub+0x38c>
 80011c8:	08c0      	lsrs	r0, r0, #3
 80011ca:	077b      	lsls	r3, r7, #29
 80011cc:	465d      	mov	r5, fp
 80011ce:	4303      	orrs	r3, r0
 80011d0:	08fa      	lsrs	r2, r7, #3
 80011d2:	e6d3      	b.n	8000f7c <__aeabi_dsub+0x328>
 80011d4:	1ac4      	subs	r4, r0, r3
 80011d6:	42a0      	cmp	r0, r4
 80011d8:	4180      	sbcs	r0, r0
 80011da:	464b      	mov	r3, r9
 80011dc:	4240      	negs	r0, r0
 80011de:	1aff      	subs	r7, r7, r3
 80011e0:	1a3b      	subs	r3, r7, r0
 80011e2:	469a      	mov	sl, r3
 80011e4:	465d      	mov	r5, fp
 80011e6:	e597      	b.n	8000d18 <__aeabi_dsub+0xc4>
 80011e8:	1a1c      	subs	r4, r3, r0
 80011ea:	464a      	mov	r2, r9
 80011ec:	42a3      	cmp	r3, r4
 80011ee:	419b      	sbcs	r3, r3
 80011f0:	1bd7      	subs	r7, r2, r7
 80011f2:	425b      	negs	r3, r3
 80011f4:	1afb      	subs	r3, r7, r3
 80011f6:	469a      	mov	sl, r3
 80011f8:	2601      	movs	r6, #1
 80011fa:	e585      	b.n	8000d08 <__aeabi_dsub+0xb4>
 80011fc:	08c0      	lsrs	r0, r0, #3
 80011fe:	077b      	lsls	r3, r7, #29
 8001200:	465d      	mov	r5, fp
 8001202:	4303      	orrs	r3, r0
 8001204:	08fa      	lsrs	r2, r7, #3
 8001206:	e6e7      	b.n	8000fd8 <__aeabi_dsub+0x384>
 8001208:	464a      	mov	r2, r9
 800120a:	08db      	lsrs	r3, r3, #3
 800120c:	0752      	lsls	r2, r2, #29
 800120e:	4313      	orrs	r3, r2
 8001210:	464a      	mov	r2, r9
 8001212:	08d2      	lsrs	r2, r2, #3
 8001214:	e6b5      	b.n	8000f82 <__aeabi_dsub+0x32e>
 8001216:	08c0      	lsrs	r0, r0, #3
 8001218:	077b      	lsls	r3, r7, #29
 800121a:	4303      	orrs	r3, r0
 800121c:	08fa      	lsrs	r2, r7, #3
 800121e:	e6db      	b.n	8000fd8 <__aeabi_dsub+0x384>
 8001220:	4649      	mov	r1, r9
 8001222:	4319      	orrs	r1, r3
 8001224:	000b      	movs	r3, r1
 8001226:	1e59      	subs	r1, r3, #1
 8001228:	418b      	sbcs	r3, r1
 800122a:	001c      	movs	r4, r3
 800122c:	e653      	b.n	8000ed6 <__aeabi_dsub+0x282>
 800122e:	464d      	mov	r5, r9
 8001230:	3c20      	subs	r4, #32
 8001232:	40e5      	lsrs	r5, r4
 8001234:	2920      	cmp	r1, #32
 8001236:	d005      	beq.n	8001244 <__aeabi_dsub+0x5f0>
 8001238:	2440      	movs	r4, #64	; 0x40
 800123a:	1a64      	subs	r4, r4, r1
 800123c:	4649      	mov	r1, r9
 800123e:	40a1      	lsls	r1, r4
 8001240:	430b      	orrs	r3, r1
 8001242:	4698      	mov	r8, r3
 8001244:	4643      	mov	r3, r8
 8001246:	1e5c      	subs	r4, r3, #1
 8001248:	41a3      	sbcs	r3, r4
 800124a:	432b      	orrs	r3, r5
 800124c:	e776      	b.n	800113c <__aeabi_dsub+0x4e8>
 800124e:	2a00      	cmp	r2, #0
 8001250:	d0e1      	beq.n	8001216 <__aeabi_dsub+0x5c2>
 8001252:	003a      	movs	r2, r7
 8001254:	08db      	lsrs	r3, r3, #3
 8001256:	4302      	orrs	r2, r0
 8001258:	d100      	bne.n	800125c <__aeabi_dsub+0x608>
 800125a:	e6b8      	b.n	8000fce <__aeabi_dsub+0x37a>
 800125c:	464a      	mov	r2, r9
 800125e:	0752      	lsls	r2, r2, #29
 8001260:	2480      	movs	r4, #128	; 0x80
 8001262:	4313      	orrs	r3, r2
 8001264:	464a      	mov	r2, r9
 8001266:	0324      	lsls	r4, r4, #12
 8001268:	08d2      	lsrs	r2, r2, #3
 800126a:	4222      	tst	r2, r4
 800126c:	d007      	beq.n	800127e <__aeabi_dsub+0x62a>
 800126e:	08fe      	lsrs	r6, r7, #3
 8001270:	4226      	tst	r6, r4
 8001272:	d104      	bne.n	800127e <__aeabi_dsub+0x62a>
 8001274:	465d      	mov	r5, fp
 8001276:	0032      	movs	r2, r6
 8001278:	08c3      	lsrs	r3, r0, #3
 800127a:	077f      	lsls	r7, r7, #29
 800127c:	433b      	orrs	r3, r7
 800127e:	0f59      	lsrs	r1, r3, #29
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	0749      	lsls	r1, r1, #29
 8001284:	08db      	lsrs	r3, r3, #3
 8001286:	430b      	orrs	r3, r1
 8001288:	e6a6      	b.n	8000fd8 <__aeabi_dsub+0x384>
 800128a:	1ac4      	subs	r4, r0, r3
 800128c:	42a0      	cmp	r0, r4
 800128e:	4180      	sbcs	r0, r0
 8001290:	464b      	mov	r3, r9
 8001292:	4240      	negs	r0, r0
 8001294:	1aff      	subs	r7, r7, r3
 8001296:	1a3b      	subs	r3, r7, r0
 8001298:	469a      	mov	sl, r3
 800129a:	465d      	mov	r5, fp
 800129c:	2601      	movs	r6, #1
 800129e:	e533      	b.n	8000d08 <__aeabi_dsub+0xb4>
 80012a0:	003b      	movs	r3, r7
 80012a2:	4303      	orrs	r3, r0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_dsub+0x654>
 80012a6:	e715      	b.n	80010d4 <__aeabi_dsub+0x480>
 80012a8:	08c0      	lsrs	r0, r0, #3
 80012aa:	077b      	lsls	r3, r7, #29
 80012ac:	465d      	mov	r5, fp
 80012ae:	4303      	orrs	r3, r0
 80012b0:	08fa      	lsrs	r2, r7, #3
 80012b2:	e666      	b.n	8000f82 <__aeabi_dsub+0x32e>
 80012b4:	08c0      	lsrs	r0, r0, #3
 80012b6:	077b      	lsls	r3, r7, #29
 80012b8:	4303      	orrs	r3, r0
 80012ba:	08fa      	lsrs	r2, r7, #3
 80012bc:	e65e      	b.n	8000f7c <__aeabi_dsub+0x328>
 80012be:	003a      	movs	r2, r7
 80012c0:	08db      	lsrs	r3, r3, #3
 80012c2:	4302      	orrs	r2, r0
 80012c4:	d100      	bne.n	80012c8 <__aeabi_dsub+0x674>
 80012c6:	e682      	b.n	8000fce <__aeabi_dsub+0x37a>
 80012c8:	464a      	mov	r2, r9
 80012ca:	0752      	lsls	r2, r2, #29
 80012cc:	2480      	movs	r4, #128	; 0x80
 80012ce:	4313      	orrs	r3, r2
 80012d0:	464a      	mov	r2, r9
 80012d2:	0324      	lsls	r4, r4, #12
 80012d4:	08d2      	lsrs	r2, r2, #3
 80012d6:	4222      	tst	r2, r4
 80012d8:	d007      	beq.n	80012ea <__aeabi_dsub+0x696>
 80012da:	08fe      	lsrs	r6, r7, #3
 80012dc:	4226      	tst	r6, r4
 80012de:	d104      	bne.n	80012ea <__aeabi_dsub+0x696>
 80012e0:	465d      	mov	r5, fp
 80012e2:	0032      	movs	r2, r6
 80012e4:	08c3      	lsrs	r3, r0, #3
 80012e6:	077f      	lsls	r7, r7, #29
 80012e8:	433b      	orrs	r3, r7
 80012ea:	0f59      	lsrs	r1, r3, #29
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	08db      	lsrs	r3, r3, #3
 80012f0:	0749      	lsls	r1, r1, #29
 80012f2:	430b      	orrs	r3, r1
 80012f4:	e670      	b.n	8000fd8 <__aeabi_dsub+0x384>
 80012f6:	08c0      	lsrs	r0, r0, #3
 80012f8:	077b      	lsls	r3, r7, #29
 80012fa:	4303      	orrs	r3, r0
 80012fc:	08fa      	lsrs	r2, r7, #3
 80012fe:	e640      	b.n	8000f82 <__aeabi_dsub+0x32e>
 8001300:	464c      	mov	r4, r9
 8001302:	3920      	subs	r1, #32
 8001304:	40cc      	lsrs	r4, r1
 8001306:	4661      	mov	r1, ip
 8001308:	2920      	cmp	r1, #32
 800130a:	d006      	beq.n	800131a <__aeabi_dsub+0x6c6>
 800130c:	4666      	mov	r6, ip
 800130e:	2140      	movs	r1, #64	; 0x40
 8001310:	1b89      	subs	r1, r1, r6
 8001312:	464e      	mov	r6, r9
 8001314:	408e      	lsls	r6, r1
 8001316:	4333      	orrs	r3, r6
 8001318:	4698      	mov	r8, r3
 800131a:	4643      	mov	r3, r8
 800131c:	1e59      	subs	r1, r3, #1
 800131e:	418b      	sbcs	r3, r1
 8001320:	431c      	orrs	r4, r3
 8001322:	e5d8      	b.n	8000ed6 <__aeabi_dsub+0x282>
 8001324:	181c      	adds	r4, r3, r0
 8001326:	4284      	cmp	r4, r0
 8001328:	4180      	sbcs	r0, r0
 800132a:	444f      	add	r7, r9
 800132c:	46ba      	mov	sl, r7
 800132e:	4240      	negs	r0, r0
 8001330:	4482      	add	sl, r0
 8001332:	e6d9      	b.n	80010e8 <__aeabi_dsub+0x494>
 8001334:	4653      	mov	r3, sl
 8001336:	4323      	orrs	r3, r4
 8001338:	d100      	bne.n	800133c <__aeabi_dsub+0x6e8>
 800133a:	e6cb      	b.n	80010d4 <__aeabi_dsub+0x480>
 800133c:	e614      	b.n	8000f68 <__aeabi_dsub+0x314>
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	000007ff 	.word	0x000007ff
 8001344:	ff7fffff 	.word	0xff7fffff
 8001348:	000007fe 	.word	0x000007fe
 800134c:	2300      	movs	r3, #0
 800134e:	4a01      	ldr	r2, [pc, #4]	; (8001354 <__aeabi_dsub+0x700>)
 8001350:	001c      	movs	r4, r3
 8001352:	e529      	b.n	8000da8 <__aeabi_dsub+0x154>
 8001354:	000007ff 	.word	0x000007ff

08001358 <__aeabi_d2iz>:
 8001358:	000a      	movs	r2, r1
 800135a:	b530      	push	{r4, r5, lr}
 800135c:	4c13      	ldr	r4, [pc, #76]	; (80013ac <__aeabi_d2iz+0x54>)
 800135e:	0053      	lsls	r3, r2, #1
 8001360:	0309      	lsls	r1, r1, #12
 8001362:	0005      	movs	r5, r0
 8001364:	0b09      	lsrs	r1, r1, #12
 8001366:	2000      	movs	r0, #0
 8001368:	0d5b      	lsrs	r3, r3, #21
 800136a:	0fd2      	lsrs	r2, r2, #31
 800136c:	42a3      	cmp	r3, r4
 800136e:	dd04      	ble.n	800137a <__aeabi_d2iz+0x22>
 8001370:	480f      	ldr	r0, [pc, #60]	; (80013b0 <__aeabi_d2iz+0x58>)
 8001372:	4283      	cmp	r3, r0
 8001374:	dd02      	ble.n	800137c <__aeabi_d2iz+0x24>
 8001376:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <__aeabi_d2iz+0x5c>)
 8001378:	18d0      	adds	r0, r2, r3
 800137a:	bd30      	pop	{r4, r5, pc}
 800137c:	2080      	movs	r0, #128	; 0x80
 800137e:	0340      	lsls	r0, r0, #13
 8001380:	4301      	orrs	r1, r0
 8001382:	480d      	ldr	r0, [pc, #52]	; (80013b8 <__aeabi_d2iz+0x60>)
 8001384:	1ac0      	subs	r0, r0, r3
 8001386:	281f      	cmp	r0, #31
 8001388:	dd08      	ble.n	800139c <__aeabi_d2iz+0x44>
 800138a:	480c      	ldr	r0, [pc, #48]	; (80013bc <__aeabi_d2iz+0x64>)
 800138c:	1ac3      	subs	r3, r0, r3
 800138e:	40d9      	lsrs	r1, r3
 8001390:	000b      	movs	r3, r1
 8001392:	4258      	negs	r0, r3
 8001394:	2a00      	cmp	r2, #0
 8001396:	d1f0      	bne.n	800137a <__aeabi_d2iz+0x22>
 8001398:	0018      	movs	r0, r3
 800139a:	e7ee      	b.n	800137a <__aeabi_d2iz+0x22>
 800139c:	4c08      	ldr	r4, [pc, #32]	; (80013c0 <__aeabi_d2iz+0x68>)
 800139e:	40c5      	lsrs	r5, r0
 80013a0:	46a4      	mov	ip, r4
 80013a2:	4463      	add	r3, ip
 80013a4:	4099      	lsls	r1, r3
 80013a6:	000b      	movs	r3, r1
 80013a8:	432b      	orrs	r3, r5
 80013aa:	e7f2      	b.n	8001392 <__aeabi_d2iz+0x3a>
 80013ac:	000003fe 	.word	0x000003fe
 80013b0:	0000041d 	.word	0x0000041d
 80013b4:	7fffffff 	.word	0x7fffffff
 80013b8:	00000433 	.word	0x00000433
 80013bc:	00000413 	.word	0x00000413
 80013c0:	fffffbed 	.word	0xfffffbed

080013c4 <__aeabi_ui2d>:
 80013c4:	b510      	push	{r4, lr}
 80013c6:	1e04      	subs	r4, r0, #0
 80013c8:	d010      	beq.n	80013ec <__aeabi_ui2d+0x28>
 80013ca:	f000 f85f 	bl	800148c <__clzsi2>
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <__aeabi_ui2d+0x48>)
 80013d0:	1a1b      	subs	r3, r3, r0
 80013d2:	280a      	cmp	r0, #10
 80013d4:	dc11      	bgt.n	80013fa <__aeabi_ui2d+0x36>
 80013d6:	220b      	movs	r2, #11
 80013d8:	0021      	movs	r1, r4
 80013da:	1a12      	subs	r2, r2, r0
 80013dc:	40d1      	lsrs	r1, r2
 80013de:	3015      	adds	r0, #21
 80013e0:	030a      	lsls	r2, r1, #12
 80013e2:	055b      	lsls	r3, r3, #21
 80013e4:	4084      	lsls	r4, r0
 80013e6:	0b12      	lsrs	r2, r2, #12
 80013e8:	0d5b      	lsrs	r3, r3, #21
 80013ea:	e001      	b.n	80013f0 <__aeabi_ui2d+0x2c>
 80013ec:	2300      	movs	r3, #0
 80013ee:	2200      	movs	r2, #0
 80013f0:	051b      	lsls	r3, r3, #20
 80013f2:	4313      	orrs	r3, r2
 80013f4:	0020      	movs	r0, r4
 80013f6:	0019      	movs	r1, r3
 80013f8:	bd10      	pop	{r4, pc}
 80013fa:	0022      	movs	r2, r4
 80013fc:	380b      	subs	r0, #11
 80013fe:	4082      	lsls	r2, r0
 8001400:	055b      	lsls	r3, r3, #21
 8001402:	0312      	lsls	r2, r2, #12
 8001404:	2400      	movs	r4, #0
 8001406:	0b12      	lsrs	r2, r2, #12
 8001408:	0d5b      	lsrs	r3, r3, #21
 800140a:	e7f1      	b.n	80013f0 <__aeabi_ui2d+0x2c>
 800140c:	0000041e 	.word	0x0000041e

08001410 <__aeabi_cdrcmple>:
 8001410:	4684      	mov	ip, r0
 8001412:	0010      	movs	r0, r2
 8001414:	4662      	mov	r2, ip
 8001416:	468c      	mov	ip, r1
 8001418:	0019      	movs	r1, r3
 800141a:	4663      	mov	r3, ip
 800141c:	e000      	b.n	8001420 <__aeabi_cdcmpeq>
 800141e:	46c0      	nop			; (mov r8, r8)

08001420 <__aeabi_cdcmpeq>:
 8001420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001422:	f000 f905 	bl	8001630 <__ledf2>
 8001426:	2800      	cmp	r0, #0
 8001428:	d401      	bmi.n	800142e <__aeabi_cdcmpeq+0xe>
 800142a:	2100      	movs	r1, #0
 800142c:	42c8      	cmn	r0, r1
 800142e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001430 <__aeabi_dcmpeq>:
 8001430:	b510      	push	{r4, lr}
 8001432:	f000 f855 	bl	80014e0 <__eqdf2>
 8001436:	4240      	negs	r0, r0
 8001438:	3001      	adds	r0, #1
 800143a:	bd10      	pop	{r4, pc}

0800143c <__aeabi_dcmplt>:
 800143c:	b510      	push	{r4, lr}
 800143e:	f000 f8f7 	bl	8001630 <__ledf2>
 8001442:	2800      	cmp	r0, #0
 8001444:	db01      	blt.n	800144a <__aeabi_dcmplt+0xe>
 8001446:	2000      	movs	r0, #0
 8001448:	bd10      	pop	{r4, pc}
 800144a:	2001      	movs	r0, #1
 800144c:	bd10      	pop	{r4, pc}
 800144e:	46c0      	nop			; (mov r8, r8)

08001450 <__aeabi_dcmple>:
 8001450:	b510      	push	{r4, lr}
 8001452:	f000 f8ed 	bl	8001630 <__ledf2>
 8001456:	2800      	cmp	r0, #0
 8001458:	dd01      	ble.n	800145e <__aeabi_dcmple+0xe>
 800145a:	2000      	movs	r0, #0
 800145c:	bd10      	pop	{r4, pc}
 800145e:	2001      	movs	r0, #1
 8001460:	bd10      	pop	{r4, pc}
 8001462:	46c0      	nop			; (mov r8, r8)

08001464 <__aeabi_dcmpgt>:
 8001464:	b510      	push	{r4, lr}
 8001466:	f000 f87d 	bl	8001564 <__gedf2>
 800146a:	2800      	cmp	r0, #0
 800146c:	dc01      	bgt.n	8001472 <__aeabi_dcmpgt+0xe>
 800146e:	2000      	movs	r0, #0
 8001470:	bd10      	pop	{r4, pc}
 8001472:	2001      	movs	r0, #1
 8001474:	bd10      	pop	{r4, pc}
 8001476:	46c0      	nop			; (mov r8, r8)

08001478 <__aeabi_dcmpge>:
 8001478:	b510      	push	{r4, lr}
 800147a:	f000 f873 	bl	8001564 <__gedf2>
 800147e:	2800      	cmp	r0, #0
 8001480:	da01      	bge.n	8001486 <__aeabi_dcmpge+0xe>
 8001482:	2000      	movs	r0, #0
 8001484:	bd10      	pop	{r4, pc}
 8001486:	2001      	movs	r0, #1
 8001488:	bd10      	pop	{r4, pc}
 800148a:	46c0      	nop			; (mov r8, r8)

0800148c <__clzsi2>:
 800148c:	211c      	movs	r1, #28
 800148e:	2301      	movs	r3, #1
 8001490:	041b      	lsls	r3, r3, #16
 8001492:	4298      	cmp	r0, r3
 8001494:	d301      	bcc.n	800149a <__clzsi2+0xe>
 8001496:	0c00      	lsrs	r0, r0, #16
 8001498:	3910      	subs	r1, #16
 800149a:	0a1b      	lsrs	r3, r3, #8
 800149c:	4298      	cmp	r0, r3
 800149e:	d301      	bcc.n	80014a4 <__clzsi2+0x18>
 80014a0:	0a00      	lsrs	r0, r0, #8
 80014a2:	3908      	subs	r1, #8
 80014a4:	091b      	lsrs	r3, r3, #4
 80014a6:	4298      	cmp	r0, r3
 80014a8:	d301      	bcc.n	80014ae <__clzsi2+0x22>
 80014aa:	0900      	lsrs	r0, r0, #4
 80014ac:	3904      	subs	r1, #4
 80014ae:	a202      	add	r2, pc, #8	; (adr r2, 80014b8 <__clzsi2+0x2c>)
 80014b0:	5c10      	ldrb	r0, [r2, r0]
 80014b2:	1840      	adds	r0, r0, r1
 80014b4:	4770      	bx	lr
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	02020304 	.word	0x02020304
 80014bc:	01010101 	.word	0x01010101
	...

080014c8 <__clzdi2>:
 80014c8:	b510      	push	{r4, lr}
 80014ca:	2900      	cmp	r1, #0
 80014cc:	d103      	bne.n	80014d6 <__clzdi2+0xe>
 80014ce:	f7ff ffdd 	bl	800148c <__clzsi2>
 80014d2:	3020      	adds	r0, #32
 80014d4:	e002      	b.n	80014dc <__clzdi2+0x14>
 80014d6:	0008      	movs	r0, r1
 80014d8:	f7ff ffd8 	bl	800148c <__clzsi2>
 80014dc:	bd10      	pop	{r4, pc}
 80014de:	46c0      	nop			; (mov r8, r8)

080014e0 <__eqdf2>:
 80014e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e2:	464e      	mov	r6, r9
 80014e4:	4645      	mov	r5, r8
 80014e6:	46de      	mov	lr, fp
 80014e8:	4657      	mov	r7, sl
 80014ea:	4690      	mov	r8, r2
 80014ec:	b5e0      	push	{r5, r6, r7, lr}
 80014ee:	0017      	movs	r7, r2
 80014f0:	031a      	lsls	r2, r3, #12
 80014f2:	0b12      	lsrs	r2, r2, #12
 80014f4:	0005      	movs	r5, r0
 80014f6:	4684      	mov	ip, r0
 80014f8:	4819      	ldr	r0, [pc, #100]	; (8001560 <__eqdf2+0x80>)
 80014fa:	030e      	lsls	r6, r1, #12
 80014fc:	004c      	lsls	r4, r1, #1
 80014fe:	4691      	mov	r9, r2
 8001500:	005a      	lsls	r2, r3, #1
 8001502:	0fdb      	lsrs	r3, r3, #31
 8001504:	469b      	mov	fp, r3
 8001506:	0b36      	lsrs	r6, r6, #12
 8001508:	0d64      	lsrs	r4, r4, #21
 800150a:	0fc9      	lsrs	r1, r1, #31
 800150c:	0d52      	lsrs	r2, r2, #21
 800150e:	4284      	cmp	r4, r0
 8001510:	d019      	beq.n	8001546 <__eqdf2+0x66>
 8001512:	4282      	cmp	r2, r0
 8001514:	d010      	beq.n	8001538 <__eqdf2+0x58>
 8001516:	2001      	movs	r0, #1
 8001518:	4294      	cmp	r4, r2
 800151a:	d10e      	bne.n	800153a <__eqdf2+0x5a>
 800151c:	454e      	cmp	r6, r9
 800151e:	d10c      	bne.n	800153a <__eqdf2+0x5a>
 8001520:	2001      	movs	r0, #1
 8001522:	45c4      	cmp	ip, r8
 8001524:	d109      	bne.n	800153a <__eqdf2+0x5a>
 8001526:	4559      	cmp	r1, fp
 8001528:	d017      	beq.n	800155a <__eqdf2+0x7a>
 800152a:	2c00      	cmp	r4, #0
 800152c:	d105      	bne.n	800153a <__eqdf2+0x5a>
 800152e:	0030      	movs	r0, r6
 8001530:	4328      	orrs	r0, r5
 8001532:	1e43      	subs	r3, r0, #1
 8001534:	4198      	sbcs	r0, r3
 8001536:	e000      	b.n	800153a <__eqdf2+0x5a>
 8001538:	2001      	movs	r0, #1
 800153a:	bcf0      	pop	{r4, r5, r6, r7}
 800153c:	46bb      	mov	fp, r7
 800153e:	46b2      	mov	sl, r6
 8001540:	46a9      	mov	r9, r5
 8001542:	46a0      	mov	r8, r4
 8001544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001546:	0033      	movs	r3, r6
 8001548:	2001      	movs	r0, #1
 800154a:	432b      	orrs	r3, r5
 800154c:	d1f5      	bne.n	800153a <__eqdf2+0x5a>
 800154e:	42a2      	cmp	r2, r4
 8001550:	d1f3      	bne.n	800153a <__eqdf2+0x5a>
 8001552:	464b      	mov	r3, r9
 8001554:	433b      	orrs	r3, r7
 8001556:	d1f0      	bne.n	800153a <__eqdf2+0x5a>
 8001558:	e7e2      	b.n	8001520 <__eqdf2+0x40>
 800155a:	2000      	movs	r0, #0
 800155c:	e7ed      	b.n	800153a <__eqdf2+0x5a>
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	000007ff 	.word	0x000007ff

08001564 <__gedf2>:
 8001564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001566:	4647      	mov	r7, r8
 8001568:	46ce      	mov	lr, r9
 800156a:	0004      	movs	r4, r0
 800156c:	0018      	movs	r0, r3
 800156e:	0016      	movs	r6, r2
 8001570:	031b      	lsls	r3, r3, #12
 8001572:	0b1b      	lsrs	r3, r3, #12
 8001574:	4d2d      	ldr	r5, [pc, #180]	; (800162c <__gedf2+0xc8>)
 8001576:	004a      	lsls	r2, r1, #1
 8001578:	4699      	mov	r9, r3
 800157a:	b580      	push	{r7, lr}
 800157c:	0043      	lsls	r3, r0, #1
 800157e:	030f      	lsls	r7, r1, #12
 8001580:	46a4      	mov	ip, r4
 8001582:	46b0      	mov	r8, r6
 8001584:	0b3f      	lsrs	r7, r7, #12
 8001586:	0d52      	lsrs	r2, r2, #21
 8001588:	0fc9      	lsrs	r1, r1, #31
 800158a:	0d5b      	lsrs	r3, r3, #21
 800158c:	0fc0      	lsrs	r0, r0, #31
 800158e:	42aa      	cmp	r2, r5
 8001590:	d021      	beq.n	80015d6 <__gedf2+0x72>
 8001592:	42ab      	cmp	r3, r5
 8001594:	d013      	beq.n	80015be <__gedf2+0x5a>
 8001596:	2a00      	cmp	r2, #0
 8001598:	d122      	bne.n	80015e0 <__gedf2+0x7c>
 800159a:	433c      	orrs	r4, r7
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <__gedf2+0x42>
 80015a0:	464d      	mov	r5, r9
 80015a2:	432e      	orrs	r6, r5
 80015a4:	d022      	beq.n	80015ec <__gedf2+0x88>
 80015a6:	2c00      	cmp	r4, #0
 80015a8:	d010      	beq.n	80015cc <__gedf2+0x68>
 80015aa:	4281      	cmp	r1, r0
 80015ac:	d022      	beq.n	80015f4 <__gedf2+0x90>
 80015ae:	2002      	movs	r0, #2
 80015b0:	3901      	subs	r1, #1
 80015b2:	4008      	ands	r0, r1
 80015b4:	3801      	subs	r0, #1
 80015b6:	bcc0      	pop	{r6, r7}
 80015b8:	46b9      	mov	r9, r7
 80015ba:	46b0      	mov	r8, r6
 80015bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015be:	464d      	mov	r5, r9
 80015c0:	432e      	orrs	r6, r5
 80015c2:	d129      	bne.n	8001618 <__gedf2+0xb4>
 80015c4:	2a00      	cmp	r2, #0
 80015c6:	d1f0      	bne.n	80015aa <__gedf2+0x46>
 80015c8:	433c      	orrs	r4, r7
 80015ca:	d1ee      	bne.n	80015aa <__gedf2+0x46>
 80015cc:	2800      	cmp	r0, #0
 80015ce:	d1f2      	bne.n	80015b6 <__gedf2+0x52>
 80015d0:	2001      	movs	r0, #1
 80015d2:	4240      	negs	r0, r0
 80015d4:	e7ef      	b.n	80015b6 <__gedf2+0x52>
 80015d6:	003d      	movs	r5, r7
 80015d8:	4325      	orrs	r5, r4
 80015da:	d11d      	bne.n	8001618 <__gedf2+0xb4>
 80015dc:	4293      	cmp	r3, r2
 80015de:	d0ee      	beq.n	80015be <__gedf2+0x5a>
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1e2      	bne.n	80015aa <__gedf2+0x46>
 80015e4:	464c      	mov	r4, r9
 80015e6:	4326      	orrs	r6, r4
 80015e8:	d1df      	bne.n	80015aa <__gedf2+0x46>
 80015ea:	e7e0      	b.n	80015ae <__gedf2+0x4a>
 80015ec:	2000      	movs	r0, #0
 80015ee:	2c00      	cmp	r4, #0
 80015f0:	d0e1      	beq.n	80015b6 <__gedf2+0x52>
 80015f2:	e7dc      	b.n	80015ae <__gedf2+0x4a>
 80015f4:	429a      	cmp	r2, r3
 80015f6:	dc0a      	bgt.n	800160e <__gedf2+0xaa>
 80015f8:	dbe8      	blt.n	80015cc <__gedf2+0x68>
 80015fa:	454f      	cmp	r7, r9
 80015fc:	d8d7      	bhi.n	80015ae <__gedf2+0x4a>
 80015fe:	d00e      	beq.n	800161e <__gedf2+0xba>
 8001600:	2000      	movs	r0, #0
 8001602:	454f      	cmp	r7, r9
 8001604:	d2d7      	bcs.n	80015b6 <__gedf2+0x52>
 8001606:	2900      	cmp	r1, #0
 8001608:	d0e2      	beq.n	80015d0 <__gedf2+0x6c>
 800160a:	0008      	movs	r0, r1
 800160c:	e7d3      	b.n	80015b6 <__gedf2+0x52>
 800160e:	4243      	negs	r3, r0
 8001610:	4158      	adcs	r0, r3
 8001612:	0040      	lsls	r0, r0, #1
 8001614:	3801      	subs	r0, #1
 8001616:	e7ce      	b.n	80015b6 <__gedf2+0x52>
 8001618:	2002      	movs	r0, #2
 800161a:	4240      	negs	r0, r0
 800161c:	e7cb      	b.n	80015b6 <__gedf2+0x52>
 800161e:	45c4      	cmp	ip, r8
 8001620:	d8c5      	bhi.n	80015ae <__gedf2+0x4a>
 8001622:	2000      	movs	r0, #0
 8001624:	45c4      	cmp	ip, r8
 8001626:	d2c6      	bcs.n	80015b6 <__gedf2+0x52>
 8001628:	e7ed      	b.n	8001606 <__gedf2+0xa2>
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	000007ff 	.word	0x000007ff

08001630 <__ledf2>:
 8001630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001632:	4647      	mov	r7, r8
 8001634:	46ce      	mov	lr, r9
 8001636:	0004      	movs	r4, r0
 8001638:	0018      	movs	r0, r3
 800163a:	0016      	movs	r6, r2
 800163c:	031b      	lsls	r3, r3, #12
 800163e:	0b1b      	lsrs	r3, r3, #12
 8001640:	4d2c      	ldr	r5, [pc, #176]	; (80016f4 <__ledf2+0xc4>)
 8001642:	004a      	lsls	r2, r1, #1
 8001644:	4699      	mov	r9, r3
 8001646:	b580      	push	{r7, lr}
 8001648:	0043      	lsls	r3, r0, #1
 800164a:	030f      	lsls	r7, r1, #12
 800164c:	46a4      	mov	ip, r4
 800164e:	46b0      	mov	r8, r6
 8001650:	0b3f      	lsrs	r7, r7, #12
 8001652:	0d52      	lsrs	r2, r2, #21
 8001654:	0fc9      	lsrs	r1, r1, #31
 8001656:	0d5b      	lsrs	r3, r3, #21
 8001658:	0fc0      	lsrs	r0, r0, #31
 800165a:	42aa      	cmp	r2, r5
 800165c:	d00d      	beq.n	800167a <__ledf2+0x4a>
 800165e:	42ab      	cmp	r3, r5
 8001660:	d010      	beq.n	8001684 <__ledf2+0x54>
 8001662:	2a00      	cmp	r2, #0
 8001664:	d127      	bne.n	80016b6 <__ledf2+0x86>
 8001666:	433c      	orrs	r4, r7
 8001668:	2b00      	cmp	r3, #0
 800166a:	d111      	bne.n	8001690 <__ledf2+0x60>
 800166c:	464d      	mov	r5, r9
 800166e:	432e      	orrs	r6, r5
 8001670:	d10e      	bne.n	8001690 <__ledf2+0x60>
 8001672:	2000      	movs	r0, #0
 8001674:	2c00      	cmp	r4, #0
 8001676:	d015      	beq.n	80016a4 <__ledf2+0x74>
 8001678:	e00e      	b.n	8001698 <__ledf2+0x68>
 800167a:	003d      	movs	r5, r7
 800167c:	4325      	orrs	r5, r4
 800167e:	d110      	bne.n	80016a2 <__ledf2+0x72>
 8001680:	4293      	cmp	r3, r2
 8001682:	d118      	bne.n	80016b6 <__ledf2+0x86>
 8001684:	464d      	mov	r5, r9
 8001686:	432e      	orrs	r6, r5
 8001688:	d10b      	bne.n	80016a2 <__ledf2+0x72>
 800168a:	2a00      	cmp	r2, #0
 800168c:	d102      	bne.n	8001694 <__ledf2+0x64>
 800168e:	433c      	orrs	r4, r7
 8001690:	2c00      	cmp	r4, #0
 8001692:	d00b      	beq.n	80016ac <__ledf2+0x7c>
 8001694:	4281      	cmp	r1, r0
 8001696:	d014      	beq.n	80016c2 <__ledf2+0x92>
 8001698:	2002      	movs	r0, #2
 800169a:	3901      	subs	r1, #1
 800169c:	4008      	ands	r0, r1
 800169e:	3801      	subs	r0, #1
 80016a0:	e000      	b.n	80016a4 <__ledf2+0x74>
 80016a2:	2002      	movs	r0, #2
 80016a4:	bcc0      	pop	{r6, r7}
 80016a6:	46b9      	mov	r9, r7
 80016a8:	46b0      	mov	r8, r6
 80016aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ac:	2800      	cmp	r0, #0
 80016ae:	d1f9      	bne.n	80016a4 <__ledf2+0x74>
 80016b0:	2001      	movs	r0, #1
 80016b2:	4240      	negs	r0, r0
 80016b4:	e7f6      	b.n	80016a4 <__ledf2+0x74>
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1ec      	bne.n	8001694 <__ledf2+0x64>
 80016ba:	464c      	mov	r4, r9
 80016bc:	4326      	orrs	r6, r4
 80016be:	d1e9      	bne.n	8001694 <__ledf2+0x64>
 80016c0:	e7ea      	b.n	8001698 <__ledf2+0x68>
 80016c2:	429a      	cmp	r2, r3
 80016c4:	dd04      	ble.n	80016d0 <__ledf2+0xa0>
 80016c6:	4243      	negs	r3, r0
 80016c8:	4158      	adcs	r0, r3
 80016ca:	0040      	lsls	r0, r0, #1
 80016cc:	3801      	subs	r0, #1
 80016ce:	e7e9      	b.n	80016a4 <__ledf2+0x74>
 80016d0:	429a      	cmp	r2, r3
 80016d2:	dbeb      	blt.n	80016ac <__ledf2+0x7c>
 80016d4:	454f      	cmp	r7, r9
 80016d6:	d8df      	bhi.n	8001698 <__ledf2+0x68>
 80016d8:	d006      	beq.n	80016e8 <__ledf2+0xb8>
 80016da:	2000      	movs	r0, #0
 80016dc:	454f      	cmp	r7, r9
 80016de:	d2e1      	bcs.n	80016a4 <__ledf2+0x74>
 80016e0:	2900      	cmp	r1, #0
 80016e2:	d0e5      	beq.n	80016b0 <__ledf2+0x80>
 80016e4:	0008      	movs	r0, r1
 80016e6:	e7dd      	b.n	80016a4 <__ledf2+0x74>
 80016e8:	45c4      	cmp	ip, r8
 80016ea:	d8d5      	bhi.n	8001698 <__ledf2+0x68>
 80016ec:	2000      	movs	r0, #0
 80016ee:	45c4      	cmp	ip, r8
 80016f0:	d2d8      	bcs.n	80016a4 <__ledf2+0x74>
 80016f2:	e7f5      	b.n	80016e0 <__ledf2+0xb0>
 80016f4:	000007ff 	.word	0x000007ff

080016f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b089      	sub	sp, #36	; 0x24
 80016fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fe:	240c      	movs	r4, #12
 8001700:	193b      	adds	r3, r7, r4
 8001702:	0018      	movs	r0, r3
 8001704:	2314      	movs	r3, #20
 8001706:	001a      	movs	r2, r3
 8001708:	2100      	movs	r1, #0
 800170a:	f005 fd2b 	bl	8007164 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800170e:	4b3a      	ldr	r3, [pc, #232]	; (80017f8 <MX_GPIO_Init+0x100>)
 8001710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001712:	4b39      	ldr	r3, [pc, #228]	; (80017f8 <MX_GPIO_Init+0x100>)
 8001714:	2104      	movs	r1, #4
 8001716:	430a      	orrs	r2, r1
 8001718:	62da      	str	r2, [r3, #44]	; 0x2c
 800171a:	4b37      	ldr	r3, [pc, #220]	; (80017f8 <MX_GPIO_Init+0x100>)
 800171c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171e:	2204      	movs	r2, #4
 8001720:	4013      	ands	r3, r2
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	4b34      	ldr	r3, [pc, #208]	; (80017f8 <MX_GPIO_Init+0x100>)
 8001728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800172a:	4b33      	ldr	r3, [pc, #204]	; (80017f8 <MX_GPIO_Init+0x100>)
 800172c:	2101      	movs	r1, #1
 800172e:	430a      	orrs	r2, r1
 8001730:	62da      	str	r2, [r3, #44]	; 0x2c
 8001732:	4b31      	ldr	r3, [pc, #196]	; (80017f8 <MX_GPIO_Init+0x100>)
 8001734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001736:	2201      	movs	r2, #1
 8001738:	4013      	ands	r3, r2
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	4b2e      	ldr	r3, [pc, #184]	; (80017f8 <MX_GPIO_Init+0x100>)
 8001740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001742:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <MX_GPIO_Init+0x100>)
 8001744:	2102      	movs	r1, #2
 8001746:	430a      	orrs	r2, r1
 8001748:	62da      	str	r2, [r3, #44]	; 0x2c
 800174a:	4b2b      	ldr	r3, [pc, #172]	; (80017f8 <MX_GPIO_Init+0x100>)
 800174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174e:	2202      	movs	r2, #2
 8001750:	4013      	ands	r3, r2
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_12, GPIO_PIN_RESET);
 8001756:	4929      	ldr	r1, [pc, #164]	; (80017fc <MX_GPIO_Init+0x104>)
 8001758:	23a0      	movs	r3, #160	; 0xa0
 800175a:	05db      	lsls	r3, r3, #23
 800175c:	2200      	movs	r2, #0
 800175e:	0018      	movs	r0, r3
 8001760:	f001 fc20 	bl	8002fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001764:	4b26      	ldr	r3, [pc, #152]	; (8001800 <MX_GPIO_Init+0x108>)
 8001766:	2200      	movs	r2, #0
 8001768:	2108      	movs	r1, #8
 800176a:	0018      	movs	r0, r3
 800176c:	f001 fc1a 	bl	8002fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA8 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_12;
 8001770:	193b      	adds	r3, r7, r4
 8001772:	4a22      	ldr	r2, [pc, #136]	; (80017fc <MX_GPIO_Init+0x104>)
 8001774:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001776:	193b      	adds	r3, r7, r4
 8001778:	2201      	movs	r2, #1
 800177a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	193b      	adds	r3, r7, r4
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	193b      	adds	r3, r7, r4
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	193a      	adds	r2, r7, r4
 800178a:	23a0      	movs	r3, #160	; 0xa0
 800178c:	05db      	lsls	r3, r3, #23
 800178e:	0011      	movs	r1, r2
 8001790:	0018      	movs	r0, r3
 8001792:	f001 fa99 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001796:	193b      	adds	r3, r7, r4
 8001798:	2280      	movs	r2, #128	; 0x80
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800179e:	193b      	adds	r3, r7, r4
 80017a0:	2284      	movs	r2, #132	; 0x84
 80017a2:	0392      	lsls	r2, r2, #14
 80017a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a6:	193b      	adds	r3, r7, r4
 80017a8:	2201      	movs	r2, #1
 80017aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	193a      	adds	r2, r7, r4
 80017ae:	23a0      	movs	r3, #160	; 0xa0
 80017b0:	05db      	lsls	r3, r3, #23
 80017b2:	0011      	movs	r1, r2
 80017b4:	0018      	movs	r0, r3
 80017b6:	f001 fa87 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017ba:	0021      	movs	r1, r4
 80017bc:	187b      	adds	r3, r7, r1
 80017be:	2208      	movs	r2, #8
 80017c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c2:	187b      	adds	r3, r7, r1
 80017c4:	2201      	movs	r2, #1
 80017c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	187b      	adds	r3, r7, r1
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	187b      	adds	r3, r7, r1
 80017d0:	2200      	movs	r2, #0
 80017d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d4:	187b      	adds	r3, r7, r1
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <MX_GPIO_Init+0x108>)
 80017d8:	0019      	movs	r1, r3
 80017da:	0010      	movs	r0, r2
 80017dc:	f001 fa74 	bl	8002cc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2100      	movs	r1, #0
 80017e4:	2007      	movs	r0, #7
 80017e6:	f001 f9a9 	bl	8002b3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80017ea:	2007      	movs	r0, #7
 80017ec:	f001 f9bb 	bl	8002b66 <HAL_NVIC_EnableIRQ>

}
 80017f0:	46c0      	nop			; (mov r8, r8)
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b009      	add	sp, #36	; 0x24
 80017f6:	bd90      	pop	{r4, r7, pc}
 80017f8:	40021000 	.word	0x40021000
 80017fc:	00001110 	.word	0x00001110
 8001800:	50000400 	.word	0x50000400

08001804 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001808:	4b1c      	ldr	r3, [pc, #112]	; (800187c <MX_I2C1_Init+0x78>)
 800180a:	4a1d      	ldr	r2, [pc, #116]	; (8001880 <MX_I2C1_Init+0x7c>)
 800180c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 800180e:	4b1b      	ldr	r3, [pc, #108]	; (800187c <MX_I2C1_Init+0x78>)
 8001810:	22e1      	movs	r2, #225	; 0xe1
 8001812:	00d2      	lsls	r2, r2, #3
 8001814:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001816:	4b19      	ldr	r3, [pc, #100]	; (800187c <MX_I2C1_Init+0x78>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800181c:	4b17      	ldr	r3, [pc, #92]	; (800187c <MX_I2C1_Init+0x78>)
 800181e:	2201      	movs	r2, #1
 8001820:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <MX_I2C1_Init+0x78>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <MX_I2C1_Init+0x78>)
 800182a:	2200      	movs	r2, #0
 800182c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <MX_I2C1_Init+0x78>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <MX_I2C1_Init+0x78>)
 8001836:	2200      	movs	r2, #0
 8001838:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <MX_I2C1_Init+0x78>)
 800183c:	2200      	movs	r2, #0
 800183e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <MX_I2C1_Init+0x78>)
 8001842:	0018      	movs	r0, r3
 8001844:	f001 fc02 	bl	800304c <HAL_I2C_Init>
 8001848:	1e03      	subs	r3, r0, #0
 800184a:	d001      	beq.n	8001850 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800184c:	f000 fa30 	bl	8001cb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001850:	4b0a      	ldr	r3, [pc, #40]	; (800187c <MX_I2C1_Init+0x78>)
 8001852:	2100      	movs	r1, #0
 8001854:	0018      	movs	r0, r3
 8001856:	f002 ff3b 	bl	80046d0 <HAL_I2CEx_ConfigAnalogFilter>
 800185a:	1e03      	subs	r3, r0, #0
 800185c:	d001      	beq.n	8001862 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800185e:	f000 fa27 	bl	8001cb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <MX_I2C1_Init+0x78>)
 8001864:	2100      	movs	r1, #0
 8001866:	0018      	movs	r0, r3
 8001868:	f002 ff7e 	bl	8004768 <HAL_I2CEx_ConfigDigitalFilter>
 800186c:	1e03      	subs	r3, r0, #0
 800186e:	d001      	beq.n	8001874 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001870:	f000 fa1e 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001874:	46c0      	nop			; (mov r8, r8)
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	20000078 	.word	0x20000078
 8001880:	40005400 	.word	0x40005400

08001884 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	240c      	movs	r4, #12
 800188e:	193b      	adds	r3, r7, r4
 8001890:	0018      	movs	r0, r3
 8001892:	2314      	movs	r3, #20
 8001894:	001a      	movs	r2, r3
 8001896:	2100      	movs	r1, #0
 8001898:	f005 fc64 	bl	8007164 <memset>
  if(i2cHandle->Instance==I2C1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a1c      	ldr	r2, [pc, #112]	; (8001914 <HAL_I2C_MspInit+0x90>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d132      	bne.n	800190c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <HAL_I2C_MspInit+0x94>)
 80018a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018aa:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <HAL_I2C_MspInit+0x94>)
 80018ac:	2101      	movs	r1, #1
 80018ae:	430a      	orrs	r2, r1
 80018b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_I2C_MspInit+0x94>)
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	2201      	movs	r2, #1
 80018b8:	4013      	ands	r3, r2
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018be:	193b      	adds	r3, r7, r4
 80018c0:	22c0      	movs	r2, #192	; 0xc0
 80018c2:	00d2      	lsls	r2, r2, #3
 80018c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c6:	0021      	movs	r1, r4
 80018c8:	187b      	adds	r3, r7, r1
 80018ca:	2212      	movs	r2, #18
 80018cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	187b      	adds	r3, r7, r1
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d4:	187b      	adds	r3, r7, r1
 80018d6:	2203      	movs	r2, #3
 80018d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80018da:	187b      	adds	r3, r7, r1
 80018dc:	2201      	movs	r2, #1
 80018de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e0:	187a      	adds	r2, r7, r1
 80018e2:	23a0      	movs	r3, #160	; 0xa0
 80018e4:	05db      	lsls	r3, r3, #23
 80018e6:	0011      	movs	r1, r2
 80018e8:	0018      	movs	r0, r3
 80018ea:	f001 f9ed 	bl	8002cc8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HAL_I2C_MspInit+0x94>)
 80018f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_I2C_MspInit+0x94>)
 80018f4:	2180      	movs	r1, #128	; 0x80
 80018f6:	0389      	lsls	r1, r1, #14
 80018f8:	430a      	orrs	r2, r1
 80018fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2100      	movs	r1, #0
 8001900:	2017      	movs	r0, #23
 8001902:	f001 f91b 	bl	8002b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8001906:	2017      	movs	r0, #23
 8001908:	f001 f92d 	bl	8002b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800190c:	46c0      	nop			; (mov r8, r8)
 800190e:	46bd      	mov	sp, r7
 8001910:	b009      	add	sp, #36	; 0x24
 8001912:	bd90      	pop	{r4, r7, pc}
 8001914:	40005400 	.word	0x40005400
 8001918:	40021000 	.word	0x40021000

0800191c <log_2_lut>:
#include "log2lut.h"

int log_2_lut(int value){
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	if(value == 0 || value == 1){
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d002      	beq.n	8001930 <log_2_lut+0x14>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d101      	bne.n	8001934 <log_2_lut+0x18>
		return 0;
 8001930:	2300      	movs	r3, #0
 8001932:	e098      	b.n	8001a66 <log_2_lut+0x14a>
	}
	else if(value == 2){
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b02      	cmp	r3, #2
 8001938:	d101      	bne.n	800193e <log_2_lut+0x22>
		return 1;
 800193a:	2301      	movs	r3, #1
 800193c:	e093      	b.n	8001a66 <log_2_lut+0x14a>
	}
	else if(value > 2 && value < 6){
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b02      	cmp	r3, #2
 8001942:	dd04      	ble.n	800194e <log_2_lut+0x32>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b05      	cmp	r3, #5
 8001948:	dc01      	bgt.n	800194e <log_2_lut+0x32>
		return 2;
 800194a:	2302      	movs	r3, #2
 800194c:	e08b      	b.n	8001a66 <log_2_lut+0x14a>
	}
	else if(value > 5 && value < 12){
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b05      	cmp	r3, #5
 8001952:	dd04      	ble.n	800195e <log_2_lut+0x42>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b0b      	cmp	r3, #11
 8001958:	dc01      	bgt.n	800195e <log_2_lut+0x42>
		return 3;
 800195a:	2303      	movs	r3, #3
 800195c:	e083      	b.n	8001a66 <log_2_lut+0x14a>
	}
	else if(value > 11 && value < 23){
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b0b      	cmp	r3, #11
 8001962:	dd04      	ble.n	800196e <log_2_lut+0x52>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b16      	cmp	r3, #22
 8001968:	dc01      	bgt.n	800196e <log_2_lut+0x52>
		return 4;
 800196a:	2304      	movs	r3, #4
 800196c:	e07b      	b.n	8001a66 <log_2_lut+0x14a>
	}
	else if(value > 22 && value < 46){
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b16      	cmp	r3, #22
 8001972:	dd04      	ble.n	800197e <log_2_lut+0x62>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b2d      	cmp	r3, #45	; 0x2d
 8001978:	dc01      	bgt.n	800197e <log_2_lut+0x62>
		return 5;
 800197a:	2305      	movs	r3, #5
 800197c:	e073      	b.n	8001a66 <log_2_lut+0x14a>
	}
	else if(value > 45 && value < 91){
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b2d      	cmp	r3, #45	; 0x2d
 8001982:	dd04      	ble.n	800198e <log_2_lut+0x72>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b5a      	cmp	r3, #90	; 0x5a
 8001988:	dc01      	bgt.n	800198e <log_2_lut+0x72>
		return 6;
 800198a:	2306      	movs	r3, #6
 800198c:	e06b      	b.n	8001a66 <log_2_lut+0x14a>
	}
	else if(value > 90 && value < 182){
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b5a      	cmp	r3, #90	; 0x5a
 8001992:	dd04      	ble.n	800199e <log_2_lut+0x82>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2bb5      	cmp	r3, #181	; 0xb5
 8001998:	dc01      	bgt.n	800199e <log_2_lut+0x82>
		return 7;
 800199a:	2307      	movs	r3, #7
 800199c:	e063      	b.n	8001a66 <log_2_lut+0x14a>
	}
	else if(value > 181 && value < 363){
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2bb5      	cmp	r3, #181	; 0xb5
 80019a2:	dd06      	ble.n	80019b2 <log_2_lut+0x96>
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	23b5      	movs	r3, #181	; 0xb5
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	429a      	cmp	r2, r3
 80019ac:	dc01      	bgt.n	80019b2 <log_2_lut+0x96>
		return 8;
 80019ae:	2308      	movs	r3, #8
 80019b0:	e059      	b.n	8001a66 <log_2_lut+0x14a>
	}
	else if(value > 362 && value < 725){
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	23b5      	movs	r3, #181	; 0xb5
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	429a      	cmp	r2, r3
 80019ba:	dd06      	ble.n	80019ca <log_2_lut+0xae>
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	23b5      	movs	r3, #181	; 0xb5
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	429a      	cmp	r2, r3
 80019c4:	dc01      	bgt.n	80019ca <log_2_lut+0xae>
		return 9;
 80019c6:	2309      	movs	r3, #9
 80019c8:	e04d      	b.n	8001a66 <log_2_lut+0x14a>
	}
	else if(value > 724 && value < 1449){
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	23b5      	movs	r3, #181	; 0xb5
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	429a      	cmp	r2, r3
 80019d2:	dd06      	ble.n	80019e2 <log_2_lut+0xc6>
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	23b5      	movs	r3, #181	; 0xb5
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	429a      	cmp	r2, r3
 80019dc:	dc01      	bgt.n	80019e2 <log_2_lut+0xc6>
		return 10;
 80019de:	230a      	movs	r3, #10
 80019e0:	e041      	b.n	8001a66 <log_2_lut+0x14a>
	}
	else if(value > 1448 && value < 2897){
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	23b5      	movs	r3, #181	; 0xb5
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	429a      	cmp	r2, r3
 80019ea:	dd06      	ble.n	80019fa <log_2_lut+0xde>
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	23b5      	movs	r3, #181	; 0xb5
 80019f0:	011b      	lsls	r3, r3, #4
 80019f2:	429a      	cmp	r2, r3
 80019f4:	dc01      	bgt.n	80019fa <log_2_lut+0xde>
		return 11;
 80019f6:	230b      	movs	r3, #11
 80019f8:	e035      	b.n	8001a66 <log_2_lut+0x14a>
	}
	else if(value > 2896 && value < 5793){
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	23b5      	movs	r3, #181	; 0xb5
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dd06      	ble.n	8001a12 <log_2_lut+0xf6>
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	23b5      	movs	r3, #181	; 0xb5
 8001a08:	015b      	lsls	r3, r3, #5
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	dc01      	bgt.n	8001a12 <log_2_lut+0xf6>
		return 12;
 8001a0e:	230c      	movs	r3, #12
 8001a10:	e029      	b.n	8001a66 <log_2_lut+0x14a>
	}
	else if(value > 5792 && value < 11586){
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	23b5      	movs	r3, #181	; 0xb5
 8001a16:	015b      	lsls	r3, r3, #5
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	dd05      	ble.n	8001a28 <log_2_lut+0x10c>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <log_2_lut+0x154>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	dc01      	bgt.n	8001a28 <log_2_lut+0x10c>
		return 13;
 8001a24:	230d      	movs	r3, #13
 8001a26:	e01e      	b.n	8001a66 <log_2_lut+0x14a>
	}
	else if(value > 11585 && value < 23171){
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a11      	ldr	r2, [pc, #68]	; (8001a70 <log_2_lut+0x154>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	dd05      	ble.n	8001a3c <log_2_lut+0x120>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a10      	ldr	r2, [pc, #64]	; (8001a74 <log_2_lut+0x158>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	dc01      	bgt.n	8001a3c <log_2_lut+0x120>
		return 14;
 8001a38:	230e      	movs	r3, #14
 8001a3a:	e014      	b.n	8001a66 <log_2_lut+0x14a>
	}
	else if(value > 23170 && value < 46341){
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <log_2_lut+0x158>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	dd05      	ble.n	8001a50 <log_2_lut+0x134>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a0c      	ldr	r2, [pc, #48]	; (8001a78 <log_2_lut+0x15c>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	dc01      	bgt.n	8001a50 <log_2_lut+0x134>
		return 15;
 8001a4c:	230f      	movs	r3, #15
 8001a4e:	e00a      	b.n	8001a66 <log_2_lut+0x14a>
	}
	else if(value > 46340 && value < 56001){
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a09      	ldr	r2, [pc, #36]	; (8001a78 <log_2_lut+0x15c>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	dd05      	ble.n	8001a64 <log_2_lut+0x148>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a08      	ldr	r2, [pc, #32]	; (8001a7c <log_2_lut+0x160>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	dc01      	bgt.n	8001a64 <log_2_lut+0x148>
		return 16;
 8001a60:	2310      	movs	r3, #16
 8001a62:	e000      	b.n	8001a66 <log_2_lut+0x14a>
	}
	else{
		return 2137;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <log_2_lut+0x164>)
	}
}
 8001a66:	0018      	movs	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b002      	add	sp, #8
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	00002d41 	.word	0x00002d41
 8001a74:	00005a82 	.word	0x00005a82
 8001a78:	0000b504 	.word	0x0000b504
 8001a7c:	0000dac0 	.word	0x0000dac0
 8001a80:	00000859 	.word	0x00000859

08001a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a84:	b5b0      	push	{r4, r5, r7, lr}
 8001a86:	b094      	sub	sp, #80	; 0x50
 8001a88:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
//	char myText[10] = "Lightmeter";
//	char retVal = "";
	uint16_t als = 0;
 8001a8a:	2346      	movs	r3, #70	; 0x46
 8001a8c:	18fb      	adds	r3, r7, r3
 8001a8e:	2200      	movs	r2, #0
 8001a90:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a92:	f000 ff13 	bl	80028bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a96:	f000 f877 	bl	8001b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a9a:	f7ff fe2d 	bl	80016f8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001a9e:	f000 f90d 	bl	8001cbc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001aa2:	f000 fd57 	bl	8002554 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001aa6:	f7ff fead 	bl	8001804 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001aaa:	f000 fca7 	bl	80023fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8001aae:	f000 f9f9 	bl	8001ea4 <ssd1306_Init>
  ssd1306_Fill(0x01);
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f000 fa62 	bl	8001f7c <ssd1306_Fill>
  ssd1306_SetCursor(10, 20);
 8001ab8:	2114      	movs	r1, #20
 8001aba:	200a      	movs	r0, #10
 8001abc:	f000 fb08 	bl	80020d0 <ssd1306_SetCursor>
//  ssd1306_WriteString("1", Font_6x8, White);
  ssd1306_DrawCircle(64, 32, 20, 0x01);
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	2214      	movs	r2, #20
 8001ac4:	2120      	movs	r1, #32
 8001ac6:	2040      	movs	r0, #64	; 0x40
 8001ac8:	f000 fb1c 	bl	8002104 <ssd1306_DrawCircle>
  ssd1306_UpdateScreen();
 8001acc:	f000 fa70 	bl	8001fb0 <ssd1306_UpdateScreen>
  veml6030 veml;
  veml6030_init(&veml, &hi2c1, VEML6030_I2C_ADDRESS);
 8001ad0:	4928      	ldr	r1, [pc, #160]	; (8001b74 <main+0xf0>)
 8001ad2:	2434      	movs	r4, #52	; 0x34
 8001ad4:	193b      	adds	r3, r7, r4
 8001ad6:	2210      	movs	r2, #16
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f000 fe19 	bl	8002710 <veml6030_init>
  veml6030_power_on(&veml);
 8001ade:	193b      	adds	r3, r7, r4
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f000 fe3a 	bl	800275a <veml6030_power_on>
  veml6030_set_als_integration_time(&veml, REG_ALS_CONF_IT25);
 8001ae6:	23c0      	movs	r3, #192	; 0xc0
 8001ae8:	009a      	lsls	r2, r3, #2
 8001aea:	193b      	adds	r3, r7, r4
 8001aec:	0011      	movs	r1, r2
 8001aee:	0018      	movs	r0, r3
 8001af0:	f000 fe54 	bl	800279c <veml6030_set_als_integration_time>
  veml6030_set_als_gain(&veml, REG_ALS_CONF_GAIN_1_8);
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	015a      	lsls	r2, r3, #5
 8001af8:	193b      	adds	r3, r7, r4
 8001afa:	0011      	movs	r1, r2
 8001afc:	0018      	movs	r0, r3
 8001afe:	f000 fe79 	bl	80027f4 <veml6030_set_als_gain>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  als = veml6030_read_als(&veml);
 8001b02:	2546      	movs	r5, #70	; 0x46
 8001b04:	197c      	adds	r4, r7, r5
 8001b06:	2334      	movs	r3, #52	; 0x34
 8001b08:	18fb      	adds	r3, r7, r3
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f000 fe9e 	bl	800284c <veml6030_read_als>
 8001b10:	0003      	movs	r3, r0
 8001b12:	8023      	strh	r3, [r4, #0]
//	  uint16_t white = veml6030_read_white(&veml);
//	  uint16_t gain = veml6030_get_als_gain(&veml);
//	  uint16_t it = veml6030_get_als_integration_time(&veml);
	  char data[50];
	  uint32_t lux_als = (uint32_t)RESOLUTION*als;
 8001b14:	002c      	movs	r4, r5
 8001b16:	193b      	adds	r3, r7, r4
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	643b      	str	r3, [r7, #64]	; 0x40
//	  uint32_t lux_als_correction =  (uint32_t)((6.0135e-13*lux_als*lux_als*lux_als*lux_als)-(9.3924e-9*lux_als*lux_als*lux_als)+(8.1488e-5*lux_als*lux_als)+1.0023*lux_als);
//	  uint8_t EV = (uint8_t)(log10(lux_als/2.5)/0.3);
	  uint8_t EV = (uint8_t)log_2_lut((uint16_t)(lux_als/2.5));
 8001b1e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001b20:	f7ff fc50 	bl	80013c4 <__aeabi_ui2d>
 8001b24:	2200      	movs	r2, #0
 8001b26:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <main+0xf4>)
 8001b28:	f7fe fda6 	bl	8000678 <__aeabi_ddiv>
 8001b2c:	0002      	movs	r2, r0
 8001b2e:	000b      	movs	r3, r1
 8001b30:	0010      	movs	r0, r2
 8001b32:	0019      	movs	r1, r3
 8001b34:	f7fe fcb6 	bl	80004a4 <__aeabi_d2uiz>
 8001b38:	0003      	movs	r3, r0
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f7ff feed 	bl	800191c <log_2_lut>
 8001b42:	0002      	movs	r2, r0
 8001b44:	213f      	movs	r1, #63	; 0x3f
 8001b46:	187b      	adds	r3, r7, r1
 8001b48:	701a      	strb	r2, [r3, #0]
//	  sprintf(data, "LUX ALS read: %d WHITE Read: %d G: %d IT: %d \n\r", als, white, gain, it);
	  sprintf(data, "ALS read: %d LUX: %d EV: %d \n\r", als, lux_als, EV);
 8001b4a:	193b      	adds	r3, r7, r4
 8001b4c:	881a      	ldrh	r2, [r3, #0]
 8001b4e:	187b      	adds	r3, r7, r1
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8001b54:	4909      	ldr	r1, [pc, #36]	; (8001b7c <main+0xf8>)
 8001b56:	0038      	movs	r0, r7
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	0023      	movs	r3, r4
 8001b5c:	f005 fae2 	bl	8007124 <siprintf>
	  HAL_UART_Transmit(&huart2, &data, sizeof(data)/sizeof(*data), 1000);
 8001b60:	23fa      	movs	r3, #250	; 0xfa
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	0039      	movs	r1, r7
 8001b66:	4806      	ldr	r0, [pc, #24]	; (8001b80 <main+0xfc>)
 8001b68:	2232      	movs	r2, #50	; 0x32
 8001b6a:	f004 fa7f 	bl	800606c <HAL_UART_Transmit>

//	  HAL_Delay(500);

	  if (state==1){
 8001b6e:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <main+0x100>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
  {
 8001b72:	e7c6      	b.n	8001b02 <main+0x7e>
 8001b74:	20000078 	.word	0x20000078
 8001b78:	40040000 	.word	0x40040000
 8001b7c:	08007a88 	.word	0x08007a88
 8001b80:	20000574 	.word	0x20000574
 8001b84:	200000cc 	.word	0x200000cc

08001b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b88:	b590      	push	{r4, r7, lr}
 8001b8a:	b099      	sub	sp, #100	; 0x64
 8001b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b8e:	242c      	movs	r4, #44	; 0x2c
 8001b90:	193b      	adds	r3, r7, r4
 8001b92:	0018      	movs	r0, r3
 8001b94:	2334      	movs	r3, #52	; 0x34
 8001b96:	001a      	movs	r2, r3
 8001b98:	2100      	movs	r1, #0
 8001b9a:	f005 fae3 	bl	8007164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b9e:	2318      	movs	r3, #24
 8001ba0:	18fb      	adds	r3, r7, r3
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	2314      	movs	r3, #20
 8001ba6:	001a      	movs	r2, r3
 8001ba8:	2100      	movs	r1, #0
 8001baa:	f005 fadb 	bl	8007164 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bae:	003b      	movs	r3, r7
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	2318      	movs	r3, #24
 8001bb4:	001a      	movs	r2, r3
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	f005 fad4 	bl	8007164 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bbc:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <SystemClock_Config+0xd4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a27      	ldr	r2, [pc, #156]	; (8001c60 <SystemClock_Config+0xd8>)
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <SystemClock_Config+0xd4>)
 8001bc6:	2180      	movs	r1, #128	; 0x80
 8001bc8:	0109      	lsls	r1, r1, #4
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001bce:	0021      	movs	r1, r4
 8001bd0:	187b      	adds	r3, r7, r1
 8001bd2:	2210      	movs	r2, #16
 8001bd4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001bd6:	187b      	adds	r3, r7, r1
 8001bd8:	2201      	movs	r2, #1
 8001bda:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001bdc:	187b      	adds	r3, r7, r1
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001be2:	187b      	adds	r3, r7, r1
 8001be4:	22a0      	movs	r2, #160	; 0xa0
 8001be6:	0212      	lsls	r2, r2, #8
 8001be8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001bea:	187b      	adds	r3, r7, r1
 8001bec:	2200      	movs	r2, #0
 8001bee:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf0:	187b      	adds	r3, r7, r1
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f002 fe04 	bl	8004800 <HAL_RCC_OscConfig>
 8001bf8:	1e03      	subs	r3, r0, #0
 8001bfa:	d001      	beq.n	8001c00 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001bfc:	f000 f858 	bl	8001cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c00:	2118      	movs	r1, #24
 8001c02:	187b      	adds	r3, r7, r1
 8001c04:	220f      	movs	r2, #15
 8001c06:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001c08:	187b      	adds	r3, r7, r1
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c0e:	187b      	adds	r3, r7, r1
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c14:	187b      	adds	r3, r7, r1
 8001c16:	2200      	movs	r2, #0
 8001c18:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c1a:	187b      	adds	r3, r7, r1
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c20:	187b      	adds	r3, r7, r1
 8001c22:	2100      	movs	r1, #0
 8001c24:	0018      	movs	r0, r3
 8001c26:	f003 f967 	bl	8004ef8 <HAL_RCC_ClockConfig>
 8001c2a:	1e03      	subs	r3, r0, #0
 8001c2c:	d001      	beq.n	8001c32 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001c2e:	f000 f83f 	bl	8001cb0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8001c32:	003b      	movs	r3, r7
 8001c34:	220a      	movs	r2, #10
 8001c36:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c38:	003b      	movs	r3, r7
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c3e:	003b      	movs	r3, r7
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c44:	003b      	movs	r3, r7
 8001c46:	0018      	movs	r0, r3
 8001c48:	f003 fb7a 	bl	8005340 <HAL_RCCEx_PeriphCLKConfig>
 8001c4c:	1e03      	subs	r3, r0, #0
 8001c4e:	d001      	beq.n	8001c54 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001c50:	f000 f82e 	bl	8001cb0 <Error_Handler>
  }
}
 8001c54:	46c0      	nop			; (mov r8, r8)
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b019      	add	sp, #100	; 0x64
 8001c5a:	bd90      	pop	{r4, r7, pc}
 8001c5c:	40007000 	.word	0x40007000
 8001c60:	ffffe7ff 	.word	0xffffe7ff

08001c64 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	0002      	movs	r2, r0
 8001c6c:	1dbb      	adds	r3, r7, #6
 8001c6e:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_PIN_11){
 8001c70:	1dbb      	adds	r3, r7, #6
 8001c72:	881a      	ldrh	r2, [r3, #0]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	011b      	lsls	r3, r3, #4
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d110      	bne.n	8001c9e <HAL_GPIO_EXTI_Callback+0x3a>
		state = (state+1)%3;
 8001c7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_GPIO_EXTI_Callback+0x44>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	3301      	adds	r3, #1
 8001c84:	2103      	movs	r1, #3
 8001c86:	0018      	movs	r0, r3
 8001c88:	f7fe fbb8 	bl	80003fc <__aeabi_idivmod>
 8001c8c:	000b      	movs	r3, r1
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_GPIO_EXTI_Callback+0x44>)
 8001c92:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <HAL_GPIO_EXTI_Callback+0x48>)
 8001c96:	2108      	movs	r1, #8
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f001 f9a0 	bl	8002fde <HAL_GPIO_TogglePin>
	}
}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b002      	add	sp, #8
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	200000cc 	.word	0x200000cc
 8001cac:	50000400 	.word	0x50000400

08001cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb4:	b672      	cpsid	i
}
 8001cb6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <Error_Handler+0x8>
	...

08001cbc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001cc0:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <MX_SPI1_Init+0x68>)
 8001cc2:	4a19      	ldr	r2, [pc, #100]	; (8001d28 <MX_SPI1_Init+0x6c>)
 8001cc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cc6:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <MX_SPI1_Init+0x68>)
 8001cc8:	2282      	movs	r2, #130	; 0x82
 8001cca:	0052      	lsls	r2, r2, #1
 8001ccc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <MX_SPI1_Init+0x68>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cd4:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <MX_SPI1_Init+0x68>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <MX_SPI1_Init+0x68>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ce0:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <MX_SPI1_Init+0x68>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ce6:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <MX_SPI1_Init+0x68>)
 8001ce8:	2280      	movs	r2, #128	; 0x80
 8001cea:	0092      	lsls	r2, r2, #2
 8001cec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cee:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <MX_SPI1_Init+0x68>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <MX_SPI1_Init+0x68>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <MX_SPI1_Init+0x68>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d00:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <MX_SPI1_Init+0x68>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d06:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <MX_SPI1_Init+0x68>)
 8001d08:	2207      	movs	r2, #7
 8001d0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <MX_SPI1_Init+0x68>)
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f003 fc42 	bl	8005598 <HAL_SPI_Init>
 8001d14:	1e03      	subs	r3, r0, #0
 8001d16:	d001      	beq.n	8001d1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d18:	f7ff ffca 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d1c:	46c0      	nop			; (mov r8, r8)
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	200000d0 	.word	0x200000d0
 8001d28:	40013000 	.word	0x40013000

08001d2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b089      	sub	sp, #36	; 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	240c      	movs	r4, #12
 8001d36:	193b      	adds	r3, r7, r4
 8001d38:	0018      	movs	r0, r3
 8001d3a:	2314      	movs	r3, #20
 8001d3c:	001a      	movs	r2, r3
 8001d3e:	2100      	movs	r1, #0
 8001d40:	f005 fa10 	bl	8007164 <memset>
  if(spiHandle->Instance==SPI1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a18      	ldr	r2, [pc, #96]	; (8001dac <HAL_SPI_MspInit+0x80>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d129      	bne.n	8001da2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d4e:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <HAL_SPI_MspInit+0x84>)
 8001d50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d52:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <HAL_SPI_MspInit+0x84>)
 8001d54:	2180      	movs	r1, #128	; 0x80
 8001d56:	0149      	lsls	r1, r1, #5
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5c:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <HAL_SPI_MspInit+0x84>)
 8001d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d60:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <HAL_SPI_MspInit+0x84>)
 8001d62:	2101      	movs	r1, #1
 8001d64:	430a      	orrs	r2, r1
 8001d66:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d68:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <HAL_SPI_MspInit+0x84>)
 8001d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4013      	ands	r3, r2
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d74:	0021      	movs	r1, r4
 8001d76:	187b      	adds	r3, r7, r1
 8001d78:	22e0      	movs	r2, #224	; 0xe0
 8001d7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	187b      	adds	r3, r7, r1
 8001d7e:	2202      	movs	r2, #2
 8001d80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	187b      	adds	r3, r7, r1
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d88:	187b      	adds	r3, r7, r1
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001d8e:	187b      	adds	r3, r7, r1
 8001d90:	2200      	movs	r2, #0
 8001d92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d94:	187a      	adds	r2, r7, r1
 8001d96:	23a0      	movs	r3, #160	; 0xa0
 8001d98:	05db      	lsls	r3, r3, #23
 8001d9a:	0011      	movs	r1, r2
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f000 ff93 	bl	8002cc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	46bd      	mov	sp, r7
 8001da6:	b009      	add	sp, #36	; 0x24
 8001da8:	bd90      	pop	{r4, r7, pc}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	40013000 	.word	0x40013000
 8001db0:	40021000 	.word	0x40021000

08001db4 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	0159      	lsls	r1, r3, #5
 8001dbc:	23a0      	movs	r3, #160	; 0xa0
 8001dbe:	05db      	lsls	r3, r3, #23
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f001 f8ee 	bl	8002fa4 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	0059      	lsls	r1, r3, #1
 8001dcc:	23a0      	movs	r3, #160	; 0xa0
 8001dce:	05db      	lsls	r3, r3, #23
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f001 f8e6 	bl	8002fa4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001dd8:	200a      	movs	r0, #10
 8001dda:	f000 fddf 	bl	800299c <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8001dde:	2380      	movs	r3, #128	; 0x80
 8001de0:	0059      	lsls	r1, r3, #1
 8001de2:	23a0      	movs	r3, #160	; 0xa0
 8001de4:	05db      	lsls	r3, r3, #23
 8001de6:	2201      	movs	r2, #1
 8001de8:	0018      	movs	r0, r3
 8001dea:	f001 f8db 	bl	8002fa4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001dee:	200a      	movs	r0, #10
 8001df0:	f000 fdd4 	bl	800299c <HAL_Delay>
}
 8001df4:	46c0      	nop			; (mov r8, r8)
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	0002      	movs	r2, r0
 8001e04:	1dfb      	adds	r3, r7, #7
 8001e06:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	0159      	lsls	r1, r3, #5
 8001e0c:	23a0      	movs	r3, #160	; 0xa0
 8001e0e:	05db      	lsls	r3, r3, #23
 8001e10:	2200      	movs	r2, #0
 8001e12:	0018      	movs	r0, r3
 8001e14:	f001 f8c6 	bl	8002fa4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8001e18:	23a0      	movs	r3, #160	; 0xa0
 8001e1a:	05db      	lsls	r3, r3, #23
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2110      	movs	r1, #16
 8001e20:	0018      	movs	r0, r3
 8001e22:	f001 f8bf 	bl	8002fa4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8001e26:	2301      	movs	r3, #1
 8001e28:	425b      	negs	r3, r3
 8001e2a:	1df9      	adds	r1, r7, #7
 8001e2c:	4807      	ldr	r0, [pc, #28]	; (8001e4c <ssd1306_WriteCommand+0x50>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f003 fc3b 	bl	80056aa <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	0159      	lsls	r1, r3, #5
 8001e38:	23a0      	movs	r3, #160	; 0xa0
 8001e3a:	05db      	lsls	r3, r3, #23
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f001 f8b0 	bl	8002fa4 <HAL_GPIO_WritePin>
}
 8001e44:	46c0      	nop			; (mov r8, r8)
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b002      	add	sp, #8
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200000d0 	.word	0x200000d0

08001e50 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	0159      	lsls	r1, r3, #5
 8001e5e:	23a0      	movs	r3, #160	; 0xa0
 8001e60:	05db      	lsls	r3, r3, #23
 8001e62:	2200      	movs	r2, #0
 8001e64:	0018      	movs	r0, r3
 8001e66:	f001 f89d 	bl	8002fa4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8001e6a:	23a0      	movs	r3, #160	; 0xa0
 8001e6c:	05db      	lsls	r3, r3, #23
 8001e6e:	2201      	movs	r2, #1
 8001e70:	2110      	movs	r1, #16
 8001e72:	0018      	movs	r0, r3
 8001e74:	f001 f896 	bl	8002fa4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	425b      	negs	r3, r3
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	4807      	ldr	r0, [pc, #28]	; (8001ea0 <ssd1306_WriteData+0x50>)
 8001e84:	f003 fc11 	bl	80056aa <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	0159      	lsls	r1, r3, #5
 8001e8c:	23a0      	movs	r3, #160	; 0xa0
 8001e8e:	05db      	lsls	r3, r3, #23
 8001e90:	2201      	movs	r2, #1
 8001e92:	0018      	movs	r0, r3
 8001e94:	f001 f886 	bl	8002fa4 <HAL_GPIO_WritePin>
}
 8001e98:	46c0      	nop			; (mov r8, r8)
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b002      	add	sp, #8
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	200000d0 	.word	0x200000d0

08001ea4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001ea8:	f7ff ff84 	bl	8001db4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001eac:	2064      	movs	r0, #100	; 0x64
 8001eae:	f000 fd75 	bl	800299c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f000 f9da 	bl	800226c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001eb8:	2020      	movs	r0, #32
 8001eba:	f7ff ff9f 	bl	8001dfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7ff ff9c 	bl	8001dfc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001ec4:	20b0      	movs	r0, #176	; 0xb0
 8001ec6:	f7ff ff99 	bl	8001dfc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001eca:	20c8      	movs	r0, #200	; 0xc8
 8001ecc:	f7ff ff96 	bl	8001dfc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f7ff ff93 	bl	8001dfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001ed6:	2010      	movs	r0, #16
 8001ed8:	f7ff ff90 	bl	8001dfc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001edc:	2040      	movs	r0, #64	; 0x40
 8001ede:	f7ff ff8d 	bl	8001dfc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001ee2:	20ff      	movs	r0, #255	; 0xff
 8001ee4:	f000 f9a9 	bl	800223a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001ee8:	20a1      	movs	r0, #161	; 0xa1
 8001eea:	f7ff ff87 	bl	8001dfc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001eee:	20a6      	movs	r0, #166	; 0xa6
 8001ef0:	f7ff ff84 	bl	8001dfc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001ef4:	20a8      	movs	r0, #168	; 0xa8
 8001ef6:	f7ff ff81 	bl	8001dfc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001efa:	203f      	movs	r0, #63	; 0x3f
 8001efc:	f7ff ff7e 	bl	8001dfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001f00:	20a4      	movs	r0, #164	; 0xa4
 8001f02:	f7ff ff7b 	bl	8001dfc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001f06:	20d3      	movs	r0, #211	; 0xd3
 8001f08:	f7ff ff78 	bl	8001dfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f7ff ff75 	bl	8001dfc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001f12:	20d5      	movs	r0, #213	; 0xd5
 8001f14:	f7ff ff72 	bl	8001dfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001f18:	20f0      	movs	r0, #240	; 0xf0
 8001f1a:	f7ff ff6f 	bl	8001dfc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001f1e:	20d9      	movs	r0, #217	; 0xd9
 8001f20:	f7ff ff6c 	bl	8001dfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001f24:	2022      	movs	r0, #34	; 0x22
 8001f26:	f7ff ff69 	bl	8001dfc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001f2a:	20da      	movs	r0, #218	; 0xda
 8001f2c:	f7ff ff66 	bl	8001dfc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001f30:	2012      	movs	r0, #18
 8001f32:	f7ff ff63 	bl	8001dfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001f36:	20db      	movs	r0, #219	; 0xdb
 8001f38:	f7ff ff60 	bl	8001dfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001f3c:	2020      	movs	r0, #32
 8001f3e:	f7ff ff5d 	bl	8001dfc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001f42:	208d      	movs	r0, #141	; 0x8d
 8001f44:	f7ff ff5a 	bl	8001dfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001f48:	2014      	movs	r0, #20
 8001f4a:	f7ff ff57 	bl	8001dfc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001f4e:	2001      	movs	r0, #1
 8001f50:	f000 f98c 	bl	800226c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001f54:	2000      	movs	r0, #0
 8001f56:	f000 f811 	bl	8001f7c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001f5a:	f000 f829 	bl	8001fb0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <ssd1306_Init+0xd4>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001f64:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <ssd1306_Init+0xd4>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001f6a:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <ssd1306_Init+0xd4>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	711a      	strb	r2, [r3, #4]
}
 8001f70:	46c0      	nop			; (mov r8, r8)
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	20000528 	.word	0x20000528

08001f7c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	0002      	movs	r2, r0
 8001f84:	1dfb      	adds	r3, r7, #7
 8001f86:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001f88:	1dfb      	adds	r3, r7, #7
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <ssd1306_Fill+0x18>
 8001f90:	2300      	movs	r3, #0
 8001f92:	e000      	b.n	8001f96 <ssd1306_Fill+0x1a>
 8001f94:	23ff      	movs	r3, #255	; 0xff
 8001f96:	2280      	movs	r2, #128	; 0x80
 8001f98:	00d2      	lsls	r2, r2, #3
 8001f9a:	4804      	ldr	r0, [pc, #16]	; (8001fac <ssd1306_Fill+0x30>)
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	f005 f8e1 	bl	8007164 <memset>
}
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	b002      	add	sp, #8
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	20000128 	.word	0x20000128

08001fb0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001fb6:	1dfb      	adds	r3, r7, #7
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
 8001fbc:	e01a      	b.n	8001ff4 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001fbe:	1dfb      	adds	r3, r7, #7
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	3b50      	subs	r3, #80	; 0x50
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f7ff ff18 	bl	8001dfc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f7ff ff15 	bl	8001dfc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001fd2:	2010      	movs	r0, #16
 8001fd4:	f7ff ff12 	bl	8001dfc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001fd8:	1dfb      	adds	r3, r7, #7
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	01da      	lsls	r2, r3, #7
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <ssd1306_UpdateScreen+0x58>)
 8001fe0:	18d3      	adds	r3, r2, r3
 8001fe2:	2180      	movs	r1, #128	; 0x80
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f7ff ff33 	bl	8001e50 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001fea:	1dfb      	adds	r3, r7, #7
 8001fec:	781a      	ldrb	r2, [r3, #0]
 8001fee:	1dfb      	adds	r3, r7, #7
 8001ff0:	3201      	adds	r2, #1
 8001ff2:	701a      	strb	r2, [r3, #0]
 8001ff4:	1dfb      	adds	r3, r7, #7
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b07      	cmp	r3, #7
 8001ffa:	d9e0      	bls.n	8001fbe <ssd1306_UpdateScreen+0xe>
    }
}
 8001ffc:	46c0      	nop			; (mov r8, r8)
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	46bd      	mov	sp, r7
 8002002:	b002      	add	sp, #8
 8002004:	bd80      	pop	{r7, pc}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	20000128 	.word	0x20000128

0800200c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800200c:	b590      	push	{r4, r7, lr}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	0004      	movs	r4, r0
 8002014:	0008      	movs	r0, r1
 8002016:	0011      	movs	r1, r2
 8002018:	1dfb      	adds	r3, r7, #7
 800201a:	1c22      	adds	r2, r4, #0
 800201c:	701a      	strb	r2, [r3, #0]
 800201e:	1dbb      	adds	r3, r7, #6
 8002020:	1c02      	adds	r2, r0, #0
 8002022:	701a      	strb	r2, [r3, #0]
 8002024:	1d7b      	adds	r3, r7, #5
 8002026:	1c0a      	adds	r2, r1, #0
 8002028:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800202a:	1dfb      	adds	r3, r7, #7
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	b25b      	sxtb	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	db47      	blt.n	80020c4 <ssd1306_DrawPixel+0xb8>
 8002034:	1dbb      	adds	r3, r7, #6
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b3f      	cmp	r3, #63	; 0x3f
 800203a:	d843      	bhi.n	80020c4 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800203c:	1d7b      	adds	r3, r7, #5
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d11e      	bne.n	8002082 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002044:	1dfb      	adds	r3, r7, #7
 8002046:	781a      	ldrb	r2, [r3, #0]
 8002048:	1dbb      	adds	r3, r7, #6
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	08db      	lsrs	r3, r3, #3
 800204e:	b2d8      	uxtb	r0, r3
 8002050:	0003      	movs	r3, r0
 8002052:	01db      	lsls	r3, r3, #7
 8002054:	18d3      	adds	r3, r2, r3
 8002056:	4a1d      	ldr	r2, [pc, #116]	; (80020cc <ssd1306_DrawPixel+0xc0>)
 8002058:	5cd3      	ldrb	r3, [r2, r3]
 800205a:	b25a      	sxtb	r2, r3
 800205c:	1dbb      	adds	r3, r7, #6
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2107      	movs	r1, #7
 8002062:	400b      	ands	r3, r1
 8002064:	2101      	movs	r1, #1
 8002066:	4099      	lsls	r1, r3
 8002068:	000b      	movs	r3, r1
 800206a:	b25b      	sxtb	r3, r3
 800206c:	4313      	orrs	r3, r2
 800206e:	b259      	sxtb	r1, r3
 8002070:	1dfb      	adds	r3, r7, #7
 8002072:	781a      	ldrb	r2, [r3, #0]
 8002074:	0003      	movs	r3, r0
 8002076:	01db      	lsls	r3, r3, #7
 8002078:	18d3      	adds	r3, r2, r3
 800207a:	b2c9      	uxtb	r1, r1
 800207c:	4a13      	ldr	r2, [pc, #76]	; (80020cc <ssd1306_DrawPixel+0xc0>)
 800207e:	54d1      	strb	r1, [r2, r3]
 8002080:	e021      	b.n	80020c6 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002082:	1dfb      	adds	r3, r7, #7
 8002084:	781a      	ldrb	r2, [r3, #0]
 8002086:	1dbb      	adds	r3, r7, #6
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	08db      	lsrs	r3, r3, #3
 800208c:	b2d8      	uxtb	r0, r3
 800208e:	0003      	movs	r3, r0
 8002090:	01db      	lsls	r3, r3, #7
 8002092:	18d3      	adds	r3, r2, r3
 8002094:	4a0d      	ldr	r2, [pc, #52]	; (80020cc <ssd1306_DrawPixel+0xc0>)
 8002096:	5cd3      	ldrb	r3, [r2, r3]
 8002098:	b25b      	sxtb	r3, r3
 800209a:	1dba      	adds	r2, r7, #6
 800209c:	7812      	ldrb	r2, [r2, #0]
 800209e:	2107      	movs	r1, #7
 80020a0:	400a      	ands	r2, r1
 80020a2:	2101      	movs	r1, #1
 80020a4:	4091      	lsls	r1, r2
 80020a6:	000a      	movs	r2, r1
 80020a8:	b252      	sxtb	r2, r2
 80020aa:	43d2      	mvns	r2, r2
 80020ac:	b252      	sxtb	r2, r2
 80020ae:	4013      	ands	r3, r2
 80020b0:	b259      	sxtb	r1, r3
 80020b2:	1dfb      	adds	r3, r7, #7
 80020b4:	781a      	ldrb	r2, [r3, #0]
 80020b6:	0003      	movs	r3, r0
 80020b8:	01db      	lsls	r3, r3, #7
 80020ba:	18d3      	adds	r3, r2, r3
 80020bc:	b2c9      	uxtb	r1, r1
 80020be:	4a03      	ldr	r2, [pc, #12]	; (80020cc <ssd1306_DrawPixel+0xc0>)
 80020c0:	54d1      	strb	r1, [r2, r3]
 80020c2:	e000      	b.n	80020c6 <ssd1306_DrawPixel+0xba>
        return;
 80020c4:	46c0      	nop			; (mov r8, r8)
    }
}
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b003      	add	sp, #12
 80020ca:	bd90      	pop	{r4, r7, pc}
 80020cc:	20000128 	.word	0x20000128

080020d0 <ssd1306_SetCursor>:
    // Everything ok
    return *str;
}

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	0002      	movs	r2, r0
 80020d8:	1dfb      	adds	r3, r7, #7
 80020da:	701a      	strb	r2, [r3, #0]
 80020dc:	1dbb      	adds	r3, r7, #6
 80020de:	1c0a      	adds	r2, r1, #0
 80020e0:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 80020e2:	1dfb      	adds	r3, r7, #7
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	4b05      	ldr	r3, [pc, #20]	; (8002100 <ssd1306_SetCursor+0x30>)
 80020ea:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80020ec:	1dbb      	adds	r3, r7, #6
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	4b03      	ldr	r3, [pc, #12]	; (8002100 <ssd1306_SetCursor+0x30>)
 80020f4:	805a      	strh	r2, [r3, #2]
}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b002      	add	sp, #8
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	20000528 	.word	0x20000528

08002104 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8002104:	b5b0      	push	{r4, r5, r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	0005      	movs	r5, r0
 800210c:	000c      	movs	r4, r1
 800210e:	0010      	movs	r0, r2
 8002110:	0019      	movs	r1, r3
 8002112:	1dfb      	adds	r3, r7, #7
 8002114:	1c2a      	adds	r2, r5, #0
 8002116:	701a      	strb	r2, [r3, #0]
 8002118:	1dbb      	adds	r3, r7, #6
 800211a:	1c22      	adds	r2, r4, #0
 800211c:	701a      	strb	r2, [r3, #0]
 800211e:	1d7b      	adds	r3, r7, #5
 8002120:	1c02      	adds	r2, r0, #0
 8002122:	701a      	strb	r2, [r3, #0]
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	1c0a      	adds	r2, r1, #0
 8002128:	701a      	strb	r2, [r3, #0]
    int32_t x = -par_r;
 800212a:	1d7b      	adds	r3, r7, #5
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	425b      	negs	r3, r3
 8002130:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8002136:	1d7b      	adds	r3, r7, #5
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2201      	movs	r2, #1
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8002142:	1dfb      	adds	r3, r7, #7
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	b25b      	sxtb	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	db72      	blt.n	8002232 <ssd1306_DrawCircle+0x12e>
 800214c:	1dbb      	adds	r3, r7, #6
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b3f      	cmp	r3, #63	; 0x3f
 8002152:	d86e      	bhi.n	8002232 <ssd1306_DrawCircle+0x12e>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	1dfa      	adds	r2, r7, #7
 800215a:	7812      	ldrb	r2, [r2, #0]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	b2d8      	uxtb	r0, r3
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	b2da      	uxtb	r2, r3
 8002164:	1dbb      	adds	r3, r7, #6
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	18d3      	adds	r3, r2, r3
 800216a:	b2d9      	uxtb	r1, r3
 800216c:	1d3b      	adds	r3, r7, #4
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	001a      	movs	r2, r3
 8002172:	f7ff ff4b 	bl	800200c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	b2da      	uxtb	r2, r3
 800217a:	1dfb      	adds	r3, r7, #7
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	18d3      	adds	r3, r2, r3
 8002180:	b2d8      	uxtb	r0, r3
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	b2da      	uxtb	r2, r3
 8002186:	1dbb      	adds	r3, r7, #6
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	18d3      	adds	r3, r2, r3
 800218c:	b2d9      	uxtb	r1, r3
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	001a      	movs	r2, r3
 8002194:	f7ff ff3a 	bl	800200c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	b2da      	uxtb	r2, r3
 800219c:	1dfb      	adds	r3, r7, #7
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	18d3      	adds	r3, r2, r3
 80021a2:	b2d8      	uxtb	r0, r3
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	1dba      	adds	r2, r7, #6
 80021aa:	7812      	ldrb	r2, [r2, #0]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	b2d9      	uxtb	r1, r3
 80021b0:	1d3b      	adds	r3, r7, #4
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	001a      	movs	r2, r3
 80021b6:	f7ff ff29 	bl	800200c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	1dfa      	adds	r2, r7, #7
 80021c0:	7812      	ldrb	r2, [r2, #0]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	b2d8      	uxtb	r0, r3
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	1dba      	adds	r2, r7, #6
 80021cc:	7812      	ldrb	r2, [r2, #0]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	b2d9      	uxtb	r1, r3
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	001a      	movs	r2, r3
 80021d8:	f7ff ff18 	bl	800200c <ssd1306_DrawPixel>
        e2 = err;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	dc13      	bgt.n	8002210 <ssd1306_DrawCircle+0x10c>
            y++;
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	3301      	adds	r3, #1
 80021ec:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	3301      	adds	r3, #1
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	18d3      	adds	r3, r2, r3
 80021f8:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	425b      	negs	r3, r3
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	429a      	cmp	r2, r3
 8002202:	d105      	bne.n	8002210 <ssd1306_DrawCircle+0x10c>
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	429a      	cmp	r2, r3
 800220a:	dc01      	bgt.n	8002210 <ssd1306_DrawCircle+0x10c>
                e2 = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	429a      	cmp	r2, r3
 8002216:	dd08      	ble.n	800222a <ssd1306_DrawCircle+0x126>
            x++;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	3301      	adds	r3, #1
 800221c:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	3301      	adds	r3, #1
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	18d3      	adds	r3, r2, r3
 8002228:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2b00      	cmp	r3, #0
 800222e:	dd91      	ble.n	8002154 <ssd1306_DrawCircle+0x50>

    return;
 8002230:	e000      	b.n	8002234 <ssd1306_DrawCircle+0x130>
        return;
 8002232:	46c0      	nop			; (mov r8, r8)
}
 8002234:	46bd      	mov	sp, r7
 8002236:	b006      	add	sp, #24
 8002238:	bdb0      	pop	{r4, r5, r7, pc}

0800223a <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800223a:	b580      	push	{r7, lr}
 800223c:	b084      	sub	sp, #16
 800223e:	af00      	add	r7, sp, #0
 8002240:	0002      	movs	r2, r0
 8002242:	1dfb      	adds	r3, r7, #7
 8002244:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002246:	210f      	movs	r1, #15
 8002248:	187b      	adds	r3, r7, r1
 800224a:	2281      	movs	r2, #129	; 0x81
 800224c:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800224e:	187b      	adds	r3, r7, r1
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	0018      	movs	r0, r3
 8002254:	f7ff fdd2 	bl	8001dfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002258:	1dfb      	adds	r3, r7, #7
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	0018      	movs	r0, r3
 800225e:	f7ff fdcd 	bl	8001dfc <ssd1306_WriteCommand>
}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	46bd      	mov	sp, r7
 8002266:	b004      	add	sp, #16
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	0002      	movs	r2, r0
 8002274:	1dfb      	adds	r3, r7, #7
 8002276:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8002278:	1dfb      	adds	r3, r7, #7
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d007      	beq.n	8002290 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8002280:	230f      	movs	r3, #15
 8002282:	18fb      	adds	r3, r7, r3
 8002284:	22af      	movs	r2, #175	; 0xaf
 8002286:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8002288:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <ssd1306_SetDisplayOn+0x48>)
 800228a:	2201      	movs	r2, #1
 800228c:	715a      	strb	r2, [r3, #5]
 800228e:	e006      	b.n	800229e <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8002290:	230f      	movs	r3, #15
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	22ae      	movs	r2, #174	; 0xae
 8002296:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <ssd1306_SetDisplayOn+0x48>)
 800229a:	2200      	movs	r2, #0
 800229c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800229e:	230f      	movs	r3, #15
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	0018      	movs	r0, r3
 80022a6:	f7ff fda9 	bl	8001dfc <ssd1306_WriteCommand>
}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b004      	add	sp, #16
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	20000528 	.word	0x20000528

080022b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022bc:	4b07      	ldr	r3, [pc, #28]	; (80022dc <HAL_MspInit+0x24>)
 80022be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_MspInit+0x24>)
 80022c2:	2101      	movs	r1, #1
 80022c4:	430a      	orrs	r2, r1
 80022c6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c8:	4b04      	ldr	r3, [pc, #16]	; (80022dc <HAL_MspInit+0x24>)
 80022ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022cc:	4b03      	ldr	r3, [pc, #12]	; (80022dc <HAL_MspInit+0x24>)
 80022ce:	2180      	movs	r1, #128	; 0x80
 80022d0:	0549      	lsls	r1, r1, #21
 80022d2:	430a      	orrs	r2, r1
 80022d4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40021000 	.word	0x40021000

080022e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022e4:	e7fe      	b.n	80022e4 <NMI_Handler+0x4>

080022e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ea:	e7fe      	b.n	80022ea <HardFault_Handler+0x4>

080022ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80022f0:	46c0      	nop			; (mov r8, r8)
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002304:	f000 fb2e 	bl	8002964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002308:	46c0      	nop			; (mov r8, r8)
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	0018      	movs	r0, r3
 8002318:	f000 fe7c 	bl	8003014 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800231c:	46c0      	nop			; (mov r8, r8)
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002328:	4b03      	ldr	r3, [pc, #12]	; (8002338 <TIM2_IRQHandler+0x14>)
 800232a:	0018      	movs	r0, r3
 800232c:	f003 fc8e 	bl	8005c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002330:	46c0      	nop			; (mov r8, r8)
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	20000534 	.word	0x20000534

0800233c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <I2C1_IRQHandler+0x2c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	699a      	ldr	r2, [r3, #24]
 8002346:	23e0      	movs	r3, #224	; 0xe0
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4013      	ands	r3, r2
 800234c:	d004      	beq.n	8002358 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <I2C1_IRQHandler+0x2c>)
 8002350:	0018      	movs	r0, r3
 8002352:	f001 f967 	bl	8003624 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002356:	e003      	b.n	8002360 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <I2C1_IRQHandler+0x2c>)
 800235a:	0018      	movs	r0, r3
 800235c:	f001 f948 	bl	80035f0 <HAL_I2C_EV_IRQHandler>
}
 8002360:	46c0      	nop			; (mov r8, r8)
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	20000078 	.word	0x20000078

0800236c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <USART2_IRQHandler+0x14>)
 8002372:	0018      	movs	r0, r3
 8002374:	f003 ff1a 	bl	80061ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002378:	46c0      	nop			; (mov r8, r8)
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	20000574 	.word	0x20000574

08002384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800238c:	4a14      	ldr	r2, [pc, #80]	; (80023e0 <_sbrk+0x5c>)
 800238e:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <_sbrk+0x60>)
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002398:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <_sbrk+0x64>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <_sbrk+0x64>)
 80023a2:	4a12      	ldr	r2, [pc, #72]	; (80023ec <_sbrk+0x68>)
 80023a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <_sbrk+0x64>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	18d3      	adds	r3, r2, r3
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d207      	bcs.n	80023c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b4:	f004 fede 	bl	8007174 <__errno>
 80023b8:	0003      	movs	r3, r0
 80023ba:	220c      	movs	r2, #12
 80023bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023be:	2301      	movs	r3, #1
 80023c0:	425b      	negs	r3, r3
 80023c2:	e009      	b.n	80023d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <_sbrk+0x64>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <_sbrk+0x64>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	18d2      	adds	r2, r2, r3
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <_sbrk+0x64>)
 80023d4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80023d6:	68fb      	ldr	r3, [r7, #12]
}
 80023d8:	0018      	movs	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	b006      	add	sp, #24
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20002000 	.word	0x20002000
 80023e4:	00000400 	.word	0x00000400
 80023e8:	20000530 	.word	0x20000530
 80023ec:	20000748 	.word	0x20000748

080023f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023f4:	46c0      	nop			; (mov r8, r8)
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80023fc:	b590      	push	{r4, r7, lr}
 80023fe:	b08d      	sub	sp, #52	; 0x34
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002402:	240c      	movs	r4, #12
 8002404:	193b      	adds	r3, r7, r4
 8002406:	0018      	movs	r0, r3
 8002408:	2324      	movs	r3, #36	; 0x24
 800240a:	001a      	movs	r2, r3
 800240c:	2100      	movs	r1, #0
 800240e:	f004 fea9 	bl	8007164 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002412:	1d3b      	adds	r3, r7, #4
 8002414:	0018      	movs	r0, r3
 8002416:	2308      	movs	r3, #8
 8002418:	001a      	movs	r2, r3
 800241a:	2100      	movs	r1, #0
 800241c:	f004 fea2 	bl	8007164 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002420:	4b26      	ldr	r3, [pc, #152]	; (80024bc <MX_TIM2_Init+0xc0>)
 8002422:	2280      	movs	r2, #128	; 0x80
 8002424:	05d2      	lsls	r2, r2, #23
 8002426:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002428:	4b24      	ldr	r3, [pc, #144]	; (80024bc <MX_TIM2_Init+0xc0>)
 800242a:	2200      	movs	r2, #0
 800242c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242e:	4b23      	ldr	r3, [pc, #140]	; (80024bc <MX_TIM2_Init+0xc0>)
 8002430:	2200      	movs	r2, #0
 8002432:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 8002434:	4b21      	ldr	r3, [pc, #132]	; (80024bc <MX_TIM2_Init+0xc0>)
 8002436:	2213      	movs	r2, #19
 8002438:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800243a:	4b20      	ldr	r3, [pc, #128]	; (80024bc <MX_TIM2_Init+0xc0>)
 800243c:	2200      	movs	r2, #0
 800243e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002440:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <MX_TIM2_Init+0xc0>)
 8002442:	2200      	movs	r2, #0
 8002444:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002446:	0021      	movs	r1, r4
 8002448:	187b      	adds	r3, r7, r1
 800244a:	2201      	movs	r2, #1
 800244c:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800244e:	187b      	adds	r3, r7, r1
 8002450:	2202      	movs	r2, #2
 8002452:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002454:	187b      	adds	r3, r7, r1
 8002456:	2201      	movs	r2, #1
 8002458:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800245a:	187b      	adds	r3, r7, r1
 800245c:	2200      	movs	r2, #0
 800245e:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8002460:	187b      	adds	r3, r7, r1
 8002462:	2200      	movs	r2, #0
 8002464:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002466:	187b      	adds	r3, r7, r1
 8002468:	2200      	movs	r2, #0
 800246a:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800246c:	187b      	adds	r3, r7, r1
 800246e:	2201      	movs	r2, #1
 8002470:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002472:	187b      	adds	r3, r7, r1
 8002474:	2200      	movs	r2, #0
 8002476:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8002478:	187b      	adds	r3, r7, r1
 800247a:	2200      	movs	r2, #0
 800247c:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800247e:	187a      	adds	r2, r7, r1
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <MX_TIM2_Init+0xc0>)
 8002482:	0011      	movs	r1, r2
 8002484:	0018      	movs	r0, r3
 8002486:	f003 fb41 	bl	8005b0c <HAL_TIM_Encoder_Init>
 800248a:	1e03      	subs	r3, r0, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800248e:	f7ff fc0f 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002492:	1d3b      	adds	r3, r7, #4
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002498:	1d3b      	adds	r3, r7, #4
 800249a:	2200      	movs	r2, #0
 800249c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800249e:	1d3a      	adds	r2, r7, #4
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <MX_TIM2_Init+0xc0>)
 80024a2:	0011      	movs	r1, r2
 80024a4:	0018      	movs	r0, r3
 80024a6:	f003 fd35 	bl	8005f14 <HAL_TIMEx_MasterConfigSynchronization>
 80024aa:	1e03      	subs	r3, r0, #0
 80024ac:	d001      	beq.n	80024b2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80024ae:	f7ff fbff 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	46bd      	mov	sp, r7
 80024b6:	b00d      	add	sp, #52	; 0x34
 80024b8:	bd90      	pop	{r4, r7, pc}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	20000534 	.word	0x20000534

080024c0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80024c0:	b590      	push	{r4, r7, lr}
 80024c2:	b089      	sub	sp, #36	; 0x24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	240c      	movs	r4, #12
 80024ca:	193b      	adds	r3, r7, r4
 80024cc:	0018      	movs	r0, r3
 80024ce:	2314      	movs	r3, #20
 80024d0:	001a      	movs	r2, r3
 80024d2:	2100      	movs	r1, #0
 80024d4:	f004 fe46 	bl	8007164 <memset>
  if(tim_encoderHandle->Instance==TIM2)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	05db      	lsls	r3, r3, #23
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d130      	bne.n	8002546 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024e4:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <HAL_TIM_Encoder_MspInit+0x90>)
 80024e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024e8:	4b19      	ldr	r3, [pc, #100]	; (8002550 <HAL_TIM_Encoder_MspInit+0x90>)
 80024ea:	2101      	movs	r1, #1
 80024ec:	430a      	orrs	r2, r1
 80024ee:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f0:	4b17      	ldr	r3, [pc, #92]	; (8002550 <HAL_TIM_Encoder_MspInit+0x90>)
 80024f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024f4:	4b16      	ldr	r3, [pc, #88]	; (8002550 <HAL_TIM_Encoder_MspInit+0x90>)
 80024f6:	2101      	movs	r1, #1
 80024f8:	430a      	orrs	r2, r1
 80024fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80024fc:	4b14      	ldr	r3, [pc, #80]	; (8002550 <HAL_TIM_Encoder_MspInit+0x90>)
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	2201      	movs	r2, #1
 8002502:	4013      	ands	r3, r2
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-CK_IN     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002508:	0021      	movs	r1, r4
 800250a:	187b      	adds	r3, r7, r1
 800250c:	2203      	movs	r2, #3
 800250e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002510:	187b      	adds	r3, r7, r1
 8002512:	2202      	movs	r2, #2
 8002514:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	187b      	adds	r3, r7, r1
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251c:	187b      	adds	r3, r7, r1
 800251e:	2200      	movs	r2, #0
 8002520:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002522:	187b      	adds	r3, r7, r1
 8002524:	2202      	movs	r2, #2
 8002526:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002528:	187a      	adds	r2, r7, r1
 800252a:	23a0      	movs	r3, #160	; 0xa0
 800252c:	05db      	lsls	r3, r3, #23
 800252e:	0011      	movs	r1, r2
 8002530:	0018      	movs	r0, r3
 8002532:	f000 fbc9 	bl	8002cc8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	200f      	movs	r0, #15
 800253c:	f000 fafe 	bl	8002b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002540:	200f      	movs	r0, #15
 8002542:	f000 fb10 	bl	8002b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	46bd      	mov	sp, r7
 800254a:	b009      	add	sp, #36	; 0x24
 800254c:	bd90      	pop	{r4, r7, pc}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	40021000 	.word	0x40021000

08002554 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002558:	4b14      	ldr	r3, [pc, #80]	; (80025ac <MX_USART2_UART_Init+0x58>)
 800255a:	4a15      	ldr	r2, [pc, #84]	; (80025b0 <MX_USART2_UART_Init+0x5c>)
 800255c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800255e:	4b13      	ldr	r3, [pc, #76]	; (80025ac <MX_USART2_UART_Init+0x58>)
 8002560:	22e1      	movs	r2, #225	; 0xe1
 8002562:	0252      	lsls	r2, r2, #9
 8002564:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002566:	4b11      	ldr	r3, [pc, #68]	; (80025ac <MX_USART2_UART_Init+0x58>)
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800256c:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <MX_USART2_UART_Init+0x58>)
 800256e:	2200      	movs	r2, #0
 8002570:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002572:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <MX_USART2_UART_Init+0x58>)
 8002574:	2200      	movs	r2, #0
 8002576:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002578:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <MX_USART2_UART_Init+0x58>)
 800257a:	220c      	movs	r2, #12
 800257c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800257e:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <MX_USART2_UART_Init+0x58>)
 8002580:	2200      	movs	r2, #0
 8002582:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002584:	4b09      	ldr	r3, [pc, #36]	; (80025ac <MX_USART2_UART_Init+0x58>)
 8002586:	2200      	movs	r2, #0
 8002588:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <MX_USART2_UART_Init+0x58>)
 800258c:	2200      	movs	r2, #0
 800258e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <MX_USART2_UART_Init+0x58>)
 8002592:	2200      	movs	r2, #0
 8002594:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002596:	4b05      	ldr	r3, [pc, #20]	; (80025ac <MX_USART2_UART_Init+0x58>)
 8002598:	0018      	movs	r0, r3
 800259a:	f003 fd13 	bl	8005fc4 <HAL_UART_Init>
 800259e:	1e03      	subs	r3, r0, #0
 80025a0:	d001      	beq.n	80025a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80025a2:	f7ff fb85 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000574 	.word	0x20000574
 80025b0:	40004400 	.word	0x40004400

080025b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025b4:	b590      	push	{r4, r7, lr}
 80025b6:	b089      	sub	sp, #36	; 0x24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	240c      	movs	r4, #12
 80025be:	193b      	adds	r3, r7, r4
 80025c0:	0018      	movs	r0, r3
 80025c2:	2314      	movs	r3, #20
 80025c4:	001a      	movs	r2, r3
 80025c6:	2100      	movs	r1, #0
 80025c8:	f004 fdcc 	bl	8007164 <memset>
  if(uartHandle->Instance==USART2)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a1c      	ldr	r2, [pc, #112]	; (8002644 <HAL_UART_MspInit+0x90>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d131      	bne.n	800263a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025d6:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <HAL_UART_MspInit+0x94>)
 80025d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025da:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <HAL_UART_MspInit+0x94>)
 80025dc:	2180      	movs	r1, #128	; 0x80
 80025de:	0289      	lsls	r1, r1, #10
 80025e0:	430a      	orrs	r2, r1
 80025e2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e4:	4b18      	ldr	r3, [pc, #96]	; (8002648 <HAL_UART_MspInit+0x94>)
 80025e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e8:	4b17      	ldr	r3, [pc, #92]	; (8002648 <HAL_UART_MspInit+0x94>)
 80025ea:	2101      	movs	r1, #1
 80025ec:	430a      	orrs	r2, r1
 80025ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80025f0:	4b15      	ldr	r3, [pc, #84]	; (8002648 <HAL_UART_MspInit+0x94>)
 80025f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f4:	2201      	movs	r2, #1
 80025f6:	4013      	ands	r3, r2
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025fc:	0021      	movs	r1, r4
 80025fe:	187b      	adds	r3, r7, r1
 8002600:	220c      	movs	r2, #12
 8002602:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002604:	187b      	adds	r3, r7, r1
 8002606:	2202      	movs	r2, #2
 8002608:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	187b      	adds	r3, r7, r1
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002610:	187b      	adds	r3, r7, r1
 8002612:	2203      	movs	r2, #3
 8002614:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002616:	187b      	adds	r3, r7, r1
 8002618:	2204      	movs	r2, #4
 800261a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261c:	187a      	adds	r2, r7, r1
 800261e:	23a0      	movs	r3, #160	; 0xa0
 8002620:	05db      	lsls	r3, r3, #23
 8002622:	0011      	movs	r1, r2
 8002624:	0018      	movs	r0, r3
 8002626:	f000 fb4f 	bl	8002cc8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	2100      	movs	r1, #0
 800262e:	201c      	movs	r0, #28
 8002630:	f000 fa84 	bl	8002b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002634:	201c      	movs	r0, #28
 8002636:	f000 fa96 	bl	8002b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	46bd      	mov	sp, r7
 800263e:	b009      	add	sp, #36	; 0x24
 8002640:	bd90      	pop	{r4, r7, pc}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	40004400 	.word	0x40004400
 8002648:	40021000 	.word	0x40021000

0800264c <_write_register>:
#define REG_POWER_SAVING_PSM_3  (0x02 << 1)
#define REG_POWER_SAVING_PSM_4  (0x03 << 1)
#define REG_POWER_SAVING_ENABLE  0x01

static uint32_t _write_register(veml6030 *veml, uint8_t reg, uint16_t value)
{
 800264c:	b590      	push	{r4, r7, lr}
 800264e:	b087      	sub	sp, #28
 8002650:	af02      	add	r7, sp, #8
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	0008      	movs	r0, r1
 8002656:	0011      	movs	r1, r2
 8002658:	1cfb      	adds	r3, r7, #3
 800265a:	1c02      	adds	r2, r0, #0
 800265c:	701a      	strb	r2, [r3, #0]
 800265e:	003b      	movs	r3, r7
 8002660:	1c0a      	adds	r2, r1, #0
 8002662:	801a      	strh	r2, [r3, #0]
  uint8_t payload[3] = {reg, value & 0xff, value >> 8};
 8002664:	210c      	movs	r1, #12
 8002666:	187b      	adds	r3, r7, r1
 8002668:	1cfa      	adds	r2, r7, #3
 800266a:	7812      	ldrb	r2, [r2, #0]
 800266c:	701a      	strb	r2, [r3, #0]
 800266e:	003b      	movs	r3, r7
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	b2da      	uxtb	r2, r3
 8002674:	187b      	adds	r3, r7, r1
 8002676:	705a      	strb	r2, [r3, #1]
 8002678:	003b      	movs	r3, r7
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	0a1b      	lsrs	r3, r3, #8
 800267e:	b29b      	uxth	r3, r3
 8002680:	b2da      	uxtb	r2, r3
 8002682:	000c      	movs	r4, r1
 8002684:	187b      	adds	r3, r7, r1
 8002686:	709a      	strb	r2, [r3, #2]

  return HAL_I2C_Master_Transmit(veml->i2c, veml->write_addr, &payload[0], 3, 500);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	795b      	ldrb	r3, [r3, #5]
 8002690:	b299      	uxth	r1, r3
 8002692:	193a      	adds	r2, r7, r4
 8002694:	23fa      	movs	r3, #250	; 0xfa
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	2303      	movs	r3, #3
 800269c:	f000 fd6c 	bl	8003178 <HAL_I2C_Master_Transmit>
 80026a0:	0003      	movs	r3, r0
}
 80026a2:	0018      	movs	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b005      	add	sp, #20
 80026a8:	bd90      	pop	{r4, r7, pc}

080026aa <_read_register>:

static uint16_t _read_register(veml6030 *veml, uint8_t reg)
{
 80026aa:	b590      	push	{r4, r7, lr}
 80026ac:	b089      	sub	sp, #36	; 0x24
 80026ae:	af04      	add	r7, sp, #16
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	000a      	movs	r2, r1
 80026b4:	1cfb      	adds	r3, r7, #3
 80026b6:	701a      	strb	r2, [r3, #0]
  uint8_t payload[2] = {0};
 80026b8:	2408      	movs	r4, #8
 80026ba:	193b      	adds	r3, r7, r4
 80026bc:	2200      	movs	r2, #0
 80026be:	801a      	strh	r2, [r3, #0]

  int err = HAL_I2C_Mem_Read(veml->i2c, veml->write_addr, reg, 1, &payload[0], 2, 500);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	795b      	ldrb	r3, [r3, #5]
 80026c8:	b299      	uxth	r1, r3
 80026ca:	1cfb      	adds	r3, r7, #3
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	23fa      	movs	r3, #250	; 0xfa
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	9302      	str	r3, [sp, #8]
 80026d6:	2302      	movs	r3, #2
 80026d8:	9301      	str	r3, [sp, #4]
 80026da:	193b      	adds	r3, r7, r4
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	2301      	movs	r3, #1
 80026e0:	f000 fe52 	bl	8003388 <HAL_I2C_Mem_Read>
 80026e4:	0003      	movs	r3, r0
 80026e6:	60fb      	str	r3, [r7, #12]
  if (err != HAL_OK) {
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <_read_register+0x48>
    return 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	e00a      	b.n	8002708 <_read_register+0x5e>
  }
  return (payload[1] << 8) | payload[0];
 80026f2:	2108      	movs	r1, #8
 80026f4:	187b      	adds	r3, r7, r1
 80026f6:	785b      	ldrb	r3, [r3, #1]
 80026f8:	021b      	lsls	r3, r3, #8
 80026fa:	b21a      	sxth	r2, r3
 80026fc:	187b      	adds	r3, r7, r1
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	b21b      	sxth	r3, r3
 8002702:	4313      	orrs	r3, r2
 8002704:	b21b      	sxth	r3, r3
 8002706:	b29b      	uxth	r3, r3
}
 8002708:	0018      	movs	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	b005      	add	sp, #20
 800270e:	bd90      	pop	{r4, r7, pc}

08002710 <veml6030_init>:

uint32_t veml6030_init(veml6030 *veml, I2C_HandleTypeDef *i2c, uint8_t addr)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	1dfb      	adds	r3, r7, #7
 800271c:	701a      	strb	r2, [r3, #0]
  veml->read_addr  = (addr << 1) | 0x01;
 800271e:	1dfb      	adds	r3, r7, #7
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	b25b      	sxtb	r3, r3
 8002726:	2201      	movs	r2, #1
 8002728:	4313      	orrs	r3, r2
 800272a:	b25b      	sxtb	r3, r3
 800272c:	b2da      	uxtb	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	711a      	strb	r2, [r3, #4]
  veml->write_addr = (addr << 1);
 8002732:	1dfb      	adds	r3, r7, #7
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	18db      	adds	r3, r3, r3
 8002738:	b2da      	uxtb	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	715a      	strb	r2, [r3, #5]
  veml->i2c        = i2c;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	601a      	str	r2, [r3, #0]

  // Reset VEML configuration (in order to check device)
  return _write_register(veml, REG_ALS_CONF, 0);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	2100      	movs	r1, #0
 800274a:	0018      	movs	r0, r3
 800274c:	f7ff ff7e 	bl	800264c <_write_register>
 8002750:	0003      	movs	r3, r0
}
 8002752:	0018      	movs	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	b004      	add	sp, #16
 8002758:	bd80      	pop	{r7, pc}

0800275a <veml6030_power_on>:

uint32_t veml6030_power_on(veml6030 *veml)
{
 800275a:	b5b0      	push	{r4, r5, r7, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  // Get current config and clear shutdown bit
  uint16_t config = _read_register(veml, REG_ALS_CONF);
 8002762:	250e      	movs	r5, #14
 8002764:	197c      	adds	r4, r7, r5
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2100      	movs	r1, #0
 800276a:	0018      	movs	r0, r3
 800276c:	f7ff ff9d 	bl	80026aa <_read_register>
 8002770:	0003      	movs	r3, r0
 8002772:	8023      	strh	r3, [r4, #0]
  config &= ~REG_ALS_CONF_SHUTDOWN;
 8002774:	0028      	movs	r0, r5
 8002776:	183b      	adds	r3, r7, r0
 8002778:	183a      	adds	r2, r7, r0
 800277a:	8812      	ldrh	r2, [r2, #0]
 800277c:	2101      	movs	r1, #1
 800277e:	438a      	bics	r2, r1
 8002780:	801a      	strh	r2, [r3, #0]

  return _write_register(veml, REG_ALS_CONF, config);
 8002782:	183b      	adds	r3, r7, r0
 8002784:	881a      	ldrh	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2100      	movs	r1, #0
 800278a:	0018      	movs	r0, r3
 800278c:	f7ff ff5e 	bl	800264c <_write_register>
 8002790:	0003      	movs	r3, r0
}
 8002792:	0018      	movs	r0, r3
 8002794:	46bd      	mov	sp, r7
 8002796:	b004      	add	sp, #16
 8002798:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800279c <veml6030_set_als_integration_time>:

  return _write_register(veml, REG_ALS_CONF, config);
}

uint32_t veml6030_set_als_integration_time(veml6030 *veml, uint16_t it)
{
 800279c:	b5b0      	push	{r4, r5, r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	000a      	movs	r2, r1
 80027a6:	1cbb      	adds	r3, r7, #2
 80027a8:	801a      	strh	r2, [r3, #0]
  uint16_t config = _read_register(veml, REG_ALS_CONF);
 80027aa:	250e      	movs	r5, #14
 80027ac:	197c      	adds	r4, r7, r5
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2100      	movs	r1, #0
 80027b2:	0018      	movs	r0, r3
 80027b4:	f7ff ff79 	bl	80026aa <_read_register>
 80027b8:	0003      	movs	r3, r0
 80027ba:	8023      	strh	r3, [r4, #0]
  config &= ~REG_ALS_CONF_IT_CLEAR;
 80027bc:	0028      	movs	r0, r5
 80027be:	183b      	adds	r3, r7, r0
 80027c0:	183a      	adds	r2, r7, r0
 80027c2:	8812      	ldrh	r2, [r2, #0]
 80027c4:	490a      	ldr	r1, [pc, #40]	; (80027f0 <veml6030_set_als_integration_time+0x54>)
 80027c6:	400a      	ands	r2, r1
 80027c8:	801a      	strh	r2, [r3, #0]
  config |= it;
 80027ca:	183b      	adds	r3, r7, r0
 80027cc:	1839      	adds	r1, r7, r0
 80027ce:	1cba      	adds	r2, r7, #2
 80027d0:	8809      	ldrh	r1, [r1, #0]
 80027d2:	8812      	ldrh	r2, [r2, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	801a      	strh	r2, [r3, #0]
  return _write_register(veml, REG_ALS_CONF, config);
 80027d8:	183b      	adds	r3, r7, r0
 80027da:	881a      	ldrh	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2100      	movs	r1, #0
 80027e0:	0018      	movs	r0, r3
 80027e2:	f7ff ff33 	bl	800264c <_write_register>
 80027e6:	0003      	movs	r3, r0
}
 80027e8:	0018      	movs	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b004      	add	sp, #16
 80027ee:	bdb0      	pop	{r4, r5, r7, pc}
 80027f0:	fffffc3f 	.word	0xfffffc3f

080027f4 <veml6030_set_als_gain>:
  return (config & REG_ALS_CONF_IT_CLEAR) >> 6;
//  return config;
}

uint32_t veml6030_set_als_gain(veml6030 *veml, uint16_t gain)
{
 80027f4:	b5b0      	push	{r4, r5, r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	000a      	movs	r2, r1
 80027fe:	1cbb      	adds	r3, r7, #2
 8002800:	801a      	strh	r2, [r3, #0]
  uint16_t config = _read_register(veml, REG_ALS_CONF);
 8002802:	250e      	movs	r5, #14
 8002804:	197c      	adds	r4, r7, r5
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2100      	movs	r1, #0
 800280a:	0018      	movs	r0, r3
 800280c:	f7ff ff4d 	bl	80026aa <_read_register>
 8002810:	0003      	movs	r3, r0
 8002812:	8023      	strh	r3, [r4, #0]
  // Clear all gain bits
  config &= ~REG_ALS_CONF_GAIN_1_4;
 8002814:	0028      	movs	r0, r5
 8002816:	183b      	adds	r3, r7, r0
 8002818:	183a      	adds	r2, r7, r0
 800281a:	8812      	ldrh	r2, [r2, #0]
 800281c:	490a      	ldr	r1, [pc, #40]	; (8002848 <veml6030_set_als_gain+0x54>)
 800281e:	400a      	ands	r2, r1
 8002820:	801a      	strh	r2, [r3, #0]
  config |= gain;
 8002822:	183b      	adds	r3, r7, r0
 8002824:	1839      	adds	r1, r7, r0
 8002826:	1cba      	adds	r2, r7, #2
 8002828:	8809      	ldrh	r1, [r1, #0]
 800282a:	8812      	ldrh	r2, [r2, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	801a      	strh	r2, [r3, #0]
  return _write_register(veml, REG_ALS_CONF, config);
 8002830:	183b      	adds	r3, r7, r0
 8002832:	881a      	ldrh	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2100      	movs	r1, #0
 8002838:	0018      	movs	r0, r3
 800283a:	f7ff ff07 	bl	800264c <_write_register>
 800283e:	0003      	movs	r3, r0
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	b004      	add	sp, #16
 8002846:	bdb0      	pop	{r4, r5, r7, pc}
 8002848:	ffffe7ff 	.word	0xffffe7ff

0800284c <veml6030_read_als>:
  uint16_t config = _read_register(veml, REG_ALS_CONF);
  return (config & REG_ALS_CONF_GAIN_1_4) >> 11;
}

uint16_t veml6030_read_als(veml6030 *veml)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  return _read_register(veml, REG_ALS);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2104      	movs	r1, #4
 8002858:	0018      	movs	r0, r3
 800285a:	f7ff ff26 	bl	80026aa <_read_register>
 800285e:	0003      	movs	r3, r0
}
 8002860:	0018      	movs	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	b002      	add	sp, #8
 8002866:	bd80      	pop	{r7, pc}

08002868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002868:	480d      	ldr	r0, [pc, #52]	; (80028a0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800286a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800286c:	f7ff fdc0 	bl	80023f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002870:	480c      	ldr	r0, [pc, #48]	; (80028a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002872:	490d      	ldr	r1, [pc, #52]	; (80028a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002874:	4a0d      	ldr	r2, [pc, #52]	; (80028ac <LoopForever+0xe>)
  movs r3, #0
 8002876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002878:	e002      	b.n	8002880 <LoopCopyDataInit>

0800287a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800287a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800287c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800287e:	3304      	adds	r3, #4

08002880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002884:	d3f9      	bcc.n	800287a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002886:	4a0a      	ldr	r2, [pc, #40]	; (80028b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002888:	4c0a      	ldr	r4, [pc, #40]	; (80028b4 <LoopForever+0x16>)
  movs r3, #0
 800288a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800288c:	e001      	b.n	8002892 <LoopFillZerobss>

0800288e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800288e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002890:	3204      	adds	r2, #4

08002892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002894:	d3fb      	bcc.n	800288e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002896:	f004 fc73 	bl	8007180 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800289a:	f7ff f8f3 	bl	8001a84 <main>

0800289e <LoopForever>:

LoopForever:
    b LoopForever
 800289e:	e7fe      	b.n	800289e <LoopForever>
   ldr   r0, =_estack
 80028a0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80028a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028a8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80028ac:	08007b98 	.word	0x08007b98
  ldr r2, =_sbss
 80028b0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80028b4:	20000748 	.word	0x20000748

080028b8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028b8:	e7fe      	b.n	80028b8 <ADC1_COMP_IRQHandler>
	...

080028bc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028c2:	1dfb      	adds	r3, r7, #7
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80028c8:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <HAL_Init+0x3c>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <HAL_Init+0x3c>)
 80028ce:	2140      	movs	r1, #64	; 0x40
 80028d0:	430a      	orrs	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028d4:	2003      	movs	r0, #3
 80028d6:	f000 f811 	bl	80028fc <HAL_InitTick>
 80028da:	1e03      	subs	r3, r0, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80028de:	1dfb      	adds	r3, r7, #7
 80028e0:	2201      	movs	r2, #1
 80028e2:	701a      	strb	r2, [r3, #0]
 80028e4:	e001      	b.n	80028ea <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028e6:	f7ff fce7 	bl	80022b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028ea:	1dfb      	adds	r3, r7, #7
 80028ec:	781b      	ldrb	r3, [r3, #0]
}
 80028ee:	0018      	movs	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b002      	add	sp, #8
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	40022000 	.word	0x40022000

080028fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028fc:	b590      	push	{r4, r7, lr}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002904:	4b14      	ldr	r3, [pc, #80]	; (8002958 <HAL_InitTick+0x5c>)
 8002906:	681c      	ldr	r4, [r3, #0]
 8002908:	4b14      	ldr	r3, [pc, #80]	; (800295c <HAL_InitTick+0x60>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	0019      	movs	r1, r3
 800290e:	23fa      	movs	r3, #250	; 0xfa
 8002910:	0098      	lsls	r0, r3, #2
 8002912:	f7fd fc03 	bl	800011c <__udivsi3>
 8002916:	0003      	movs	r3, r0
 8002918:	0019      	movs	r1, r3
 800291a:	0020      	movs	r0, r4
 800291c:	f7fd fbfe 	bl	800011c <__udivsi3>
 8002920:	0003      	movs	r3, r0
 8002922:	0018      	movs	r0, r3
 8002924:	f000 f92f 	bl	8002b86 <HAL_SYSTICK_Config>
 8002928:	1e03      	subs	r3, r0, #0
 800292a:	d001      	beq.n	8002930 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e00f      	b.n	8002950 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b03      	cmp	r3, #3
 8002934:	d80b      	bhi.n	800294e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	2301      	movs	r3, #1
 800293a:	425b      	negs	r3, r3
 800293c:	2200      	movs	r2, #0
 800293e:	0018      	movs	r0, r3
 8002940:	f000 f8fc 	bl	8002b3c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_InitTick+0x64>)
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	e000      	b.n	8002950 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
}
 8002950:	0018      	movs	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	b003      	add	sp, #12
 8002956:	bd90      	pop	{r4, r7, pc}
 8002958:	20000000 	.word	0x20000000
 800295c:	20000008 	.word	0x20000008
 8002960:	20000004 	.word	0x20000004

08002964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002968:	4b05      	ldr	r3, [pc, #20]	; (8002980 <HAL_IncTick+0x1c>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	001a      	movs	r2, r3
 800296e:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_IncTick+0x20>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	18d2      	adds	r2, r2, r3
 8002974:	4b03      	ldr	r3, [pc, #12]	; (8002984 <HAL_IncTick+0x20>)
 8002976:	601a      	str	r2, [r3, #0]
}
 8002978:	46c0      	nop			; (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	20000008 	.word	0x20000008
 8002984:	200005fc 	.word	0x200005fc

08002988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  return uwTick;
 800298c:	4b02      	ldr	r3, [pc, #8]	; (8002998 <HAL_GetTick+0x10>)
 800298e:	681b      	ldr	r3, [r3, #0]
}
 8002990:	0018      	movs	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	200005fc 	.word	0x200005fc

0800299c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029a4:	f7ff fff0 	bl	8002988 <HAL_GetTick>
 80029a8:	0003      	movs	r3, r0
 80029aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	3301      	adds	r3, #1
 80029b4:	d005      	beq.n	80029c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029b6:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <HAL_Delay+0x44>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	001a      	movs	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	189b      	adds	r3, r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	f7ff ffe0 	bl	8002988 <HAL_GetTick>
 80029c8:	0002      	movs	r2, r0
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d8f7      	bhi.n	80029c4 <HAL_Delay+0x28>
  {
  }
}
 80029d4:	46c0      	nop			; (mov r8, r8)
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	46bd      	mov	sp, r7
 80029da:	b004      	add	sp, #16
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	20000008 	.word	0x20000008

080029e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	0002      	movs	r2, r0
 80029ec:	1dfb      	adds	r3, r7, #7
 80029ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80029f0:	1dfb      	adds	r3, r7, #7
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b7f      	cmp	r3, #127	; 0x7f
 80029f6:	d809      	bhi.n	8002a0c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029f8:	1dfb      	adds	r3, r7, #7
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	001a      	movs	r2, r3
 80029fe:	231f      	movs	r3, #31
 8002a00:	401a      	ands	r2, r3
 8002a02:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <__NVIC_EnableIRQ+0x30>)
 8002a04:	2101      	movs	r1, #1
 8002a06:	4091      	lsls	r1, r2
 8002a08:	000a      	movs	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]
  }
}
 8002a0c:	46c0      	nop			; (mov r8, r8)
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b002      	add	sp, #8
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	e000e100 	.word	0xe000e100

08002a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a18:	b590      	push	{r4, r7, lr}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	0002      	movs	r2, r0
 8002a20:	6039      	str	r1, [r7, #0]
 8002a22:	1dfb      	adds	r3, r7, #7
 8002a24:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a26:	1dfb      	adds	r3, r7, #7
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b7f      	cmp	r3, #127	; 0x7f
 8002a2c:	d828      	bhi.n	8002a80 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a2e:	4a2f      	ldr	r2, [pc, #188]	; (8002aec <__NVIC_SetPriority+0xd4>)
 8002a30:	1dfb      	adds	r3, r7, #7
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	b25b      	sxtb	r3, r3
 8002a36:	089b      	lsrs	r3, r3, #2
 8002a38:	33c0      	adds	r3, #192	; 0xc0
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	589b      	ldr	r3, [r3, r2]
 8002a3e:	1dfa      	adds	r2, r7, #7
 8002a40:	7812      	ldrb	r2, [r2, #0]
 8002a42:	0011      	movs	r1, r2
 8002a44:	2203      	movs	r2, #3
 8002a46:	400a      	ands	r2, r1
 8002a48:	00d2      	lsls	r2, r2, #3
 8002a4a:	21ff      	movs	r1, #255	; 0xff
 8002a4c:	4091      	lsls	r1, r2
 8002a4e:	000a      	movs	r2, r1
 8002a50:	43d2      	mvns	r2, r2
 8002a52:	401a      	ands	r2, r3
 8002a54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	019b      	lsls	r3, r3, #6
 8002a5a:	22ff      	movs	r2, #255	; 0xff
 8002a5c:	401a      	ands	r2, r3
 8002a5e:	1dfb      	adds	r3, r7, #7
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	0018      	movs	r0, r3
 8002a64:	2303      	movs	r3, #3
 8002a66:	4003      	ands	r3, r0
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a6c:	481f      	ldr	r0, [pc, #124]	; (8002aec <__NVIC_SetPriority+0xd4>)
 8002a6e:	1dfb      	adds	r3, r7, #7
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	b25b      	sxtb	r3, r3
 8002a74:	089b      	lsrs	r3, r3, #2
 8002a76:	430a      	orrs	r2, r1
 8002a78:	33c0      	adds	r3, #192	; 0xc0
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002a7e:	e031      	b.n	8002ae4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a80:	4a1b      	ldr	r2, [pc, #108]	; (8002af0 <__NVIC_SetPriority+0xd8>)
 8002a82:	1dfb      	adds	r3, r7, #7
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	0019      	movs	r1, r3
 8002a88:	230f      	movs	r3, #15
 8002a8a:	400b      	ands	r3, r1
 8002a8c:	3b08      	subs	r3, #8
 8002a8e:	089b      	lsrs	r3, r3, #2
 8002a90:	3306      	adds	r3, #6
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	18d3      	adds	r3, r2, r3
 8002a96:	3304      	adds	r3, #4
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	1dfa      	adds	r2, r7, #7
 8002a9c:	7812      	ldrb	r2, [r2, #0]
 8002a9e:	0011      	movs	r1, r2
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	400a      	ands	r2, r1
 8002aa4:	00d2      	lsls	r2, r2, #3
 8002aa6:	21ff      	movs	r1, #255	; 0xff
 8002aa8:	4091      	lsls	r1, r2
 8002aaa:	000a      	movs	r2, r1
 8002aac:	43d2      	mvns	r2, r2
 8002aae:	401a      	ands	r2, r3
 8002ab0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	019b      	lsls	r3, r3, #6
 8002ab6:	22ff      	movs	r2, #255	; 0xff
 8002ab8:	401a      	ands	r2, r3
 8002aba:	1dfb      	adds	r3, r7, #7
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	0018      	movs	r0, r3
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	4003      	ands	r3, r0
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ac8:	4809      	ldr	r0, [pc, #36]	; (8002af0 <__NVIC_SetPriority+0xd8>)
 8002aca:	1dfb      	adds	r3, r7, #7
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	001c      	movs	r4, r3
 8002ad0:	230f      	movs	r3, #15
 8002ad2:	4023      	ands	r3, r4
 8002ad4:	3b08      	subs	r3, #8
 8002ad6:	089b      	lsrs	r3, r3, #2
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	3306      	adds	r3, #6
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	18c3      	adds	r3, r0, r3
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	601a      	str	r2, [r3, #0]
}
 8002ae4:	46c0      	nop			; (mov r8, r8)
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b003      	add	sp, #12
 8002aea:	bd90      	pop	{r4, r7, pc}
 8002aec:	e000e100 	.word	0xe000e100
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	1e5a      	subs	r2, r3, #1
 8002b00:	2380      	movs	r3, #128	; 0x80
 8002b02:	045b      	lsls	r3, r3, #17
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d301      	bcc.n	8002b0c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e010      	b.n	8002b2e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <SysTick_Config+0x44>)
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	3a01      	subs	r2, #1
 8002b12:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b14:	2301      	movs	r3, #1
 8002b16:	425b      	negs	r3, r3
 8002b18:	2103      	movs	r1, #3
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f7ff ff7c 	bl	8002a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <SysTick_Config+0x44>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b26:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <SysTick_Config+0x44>)
 8002b28:	2207      	movs	r2, #7
 8002b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	0018      	movs	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	b002      	add	sp, #8
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	e000e010 	.word	0xe000e010

08002b3c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	607a      	str	r2, [r7, #4]
 8002b46:	210f      	movs	r1, #15
 8002b48:	187b      	adds	r3, r7, r1
 8002b4a:	1c02      	adds	r2, r0, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	187b      	adds	r3, r7, r1
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	b25b      	sxtb	r3, r3
 8002b56:	0011      	movs	r1, r2
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f7ff ff5d 	bl	8002a18 <__NVIC_SetPriority>
}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b004      	add	sp, #16
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	0002      	movs	r2, r0
 8002b6e:	1dfb      	adds	r3, r7, #7
 8002b70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b72:	1dfb      	adds	r3, r7, #7
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	b25b      	sxtb	r3, r3
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f7ff ff33 	bl	80029e4 <__NVIC_EnableIRQ>
}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b002      	add	sp, #8
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	0018      	movs	r0, r3
 8002b92:	f7ff ffaf 	bl	8002af4 <SysTick_Config>
 8002b96:	0003      	movs	r3, r0
}
 8002b98:	0018      	movs	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	b002      	add	sp, #8
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba8:	230f      	movs	r3, #15
 8002baa:	18fb      	adds	r3, r7, r3
 8002bac:	2200      	movs	r2, #0
 8002bae:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2225      	movs	r2, #37	; 0x25
 8002bb4:	5c9b      	ldrb	r3, [r3, r2]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d008      	beq.n	8002bce <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2204      	movs	r2, #4
 8002bc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2224      	movs	r2, #36	; 0x24
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e024      	b.n	8002c18 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	210e      	movs	r1, #14
 8002bda:	438a      	bics	r2, r1
 8002bdc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2101      	movs	r1, #1
 8002bea:	438a      	bics	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	221c      	movs	r2, #28
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	4091      	lsls	r1, r2
 8002bfe:	000a      	movs	r2, r1
 8002c00:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2225      	movs	r2, #37	; 0x25
 8002c06:	2101      	movs	r1, #1
 8002c08:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2224      	movs	r2, #36	; 0x24
 8002c0e:	2100      	movs	r1, #0
 8002c10:	5499      	strb	r1, [r3, r2]

    return status;
 8002c12:	230f      	movs	r3, #15
 8002c14:	18fb      	adds	r3, r7, r3
 8002c16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002c18:	0018      	movs	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b004      	add	sp, #16
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c28:	210f      	movs	r1, #15
 8002c2a:	187b      	adds	r3, r7, r1
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2225      	movs	r2, #37	; 0x25
 8002c34:	5c9b      	ldrb	r3, [r3, r2]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d006      	beq.n	8002c4a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2204      	movs	r2, #4
 8002c40:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002c42:	187b      	adds	r3, r7, r1
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]
 8002c48:	e02a      	b.n	8002ca0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	210e      	movs	r1, #14
 8002c56:	438a      	bics	r2, r1
 8002c58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2101      	movs	r1, #1
 8002c66:	438a      	bics	r2, r1
 8002c68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	221c      	movs	r2, #28
 8002c70:	401a      	ands	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	2101      	movs	r1, #1
 8002c78:	4091      	lsls	r1, r2
 8002c7a:	000a      	movs	r2, r1
 8002c7c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2225      	movs	r2, #37	; 0x25
 8002c82:	2101      	movs	r1, #1
 8002c84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2224      	movs	r2, #36	; 0x24
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d004      	beq.n	8002ca0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	0010      	movs	r0, r2
 8002c9e:	4798      	blx	r3
    }
  }
  return status;
 8002ca0:	230f      	movs	r3, #15
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	781b      	ldrb	r3, [r3, #0]
}
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b004      	add	sp, #16
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2225      	movs	r2, #37	; 0x25
 8002cba:	5c9b      	ldrb	r3, [r3, r2]
 8002cbc:	b2db      	uxtb	r3, r3
}
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	b002      	add	sp, #8
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002cde:	e149      	b.n	8002f74 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	4091      	lsls	r1, r2
 8002cea:	000a      	movs	r2, r1
 8002cec:	4013      	ands	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d100      	bne.n	8002cf8 <HAL_GPIO_Init+0x30>
 8002cf6:	e13a      	b.n	8002f6e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2203      	movs	r2, #3
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d005      	beq.n	8002d10 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2203      	movs	r2, #3
 8002d0a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d130      	bne.n	8002d72 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	409a      	lsls	r2, r3
 8002d1e:	0013      	movs	r3, r2
 8002d20:	43da      	mvns	r2, r3
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4013      	ands	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	409a      	lsls	r2, r3
 8002d32:	0013      	movs	r3, r2
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d46:	2201      	movs	r2, #1
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	0013      	movs	r3, r2
 8002d4e:	43da      	mvns	r2, r3
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4013      	ands	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	091b      	lsrs	r3, r3, #4
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	401a      	ands	r2, r3
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	409a      	lsls	r2, r3
 8002d64:	0013      	movs	r3, r2
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2203      	movs	r2, #3
 8002d78:	4013      	ands	r3, r2
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	d017      	beq.n	8002dae <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	2203      	movs	r2, #3
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	0013      	movs	r3, r2
 8002d8e:	43da      	mvns	r2, r3
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4013      	ands	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	0013      	movs	r3, r2
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2203      	movs	r2, #3
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d123      	bne.n	8002e02 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	08da      	lsrs	r2, r3, #3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3208      	adds	r2, #8
 8002dc2:	0092      	lsls	r2, r2, #2
 8002dc4:	58d3      	ldr	r3, [r2, r3]
 8002dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	2207      	movs	r2, #7
 8002dcc:	4013      	ands	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	220f      	movs	r2, #15
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	0013      	movs	r3, r2
 8002dd6:	43da      	mvns	r2, r3
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	691a      	ldr	r2, [r3, #16]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2107      	movs	r1, #7
 8002de6:	400b      	ands	r3, r1
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	409a      	lsls	r2, r3
 8002dec:	0013      	movs	r3, r2
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	08da      	lsrs	r2, r3, #3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3208      	adds	r2, #8
 8002dfc:	0092      	lsls	r2, r2, #2
 8002dfe:	6939      	ldr	r1, [r7, #16]
 8002e00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	409a      	lsls	r2, r3
 8002e10:	0013      	movs	r3, r2
 8002e12:	43da      	mvns	r2, r3
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4013      	ands	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2203      	movs	r2, #3
 8002e20:	401a      	ands	r2, r3
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	409a      	lsls	r2, r3
 8002e28:	0013      	movs	r3, r2
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	23c0      	movs	r3, #192	; 0xc0
 8002e3c:	029b      	lsls	r3, r3, #10
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d100      	bne.n	8002e44 <HAL_GPIO_Init+0x17c>
 8002e42:	e094      	b.n	8002f6e <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e44:	4b51      	ldr	r3, [pc, #324]	; (8002f8c <HAL_GPIO_Init+0x2c4>)
 8002e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e48:	4b50      	ldr	r3, [pc, #320]	; (8002f8c <HAL_GPIO_Init+0x2c4>)
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e50:	4a4f      	ldr	r2, [pc, #316]	; (8002f90 <HAL_GPIO_Init+0x2c8>)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	089b      	lsrs	r3, r3, #2
 8002e56:	3302      	adds	r3, #2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	589b      	ldr	r3, [r3, r2]
 8002e5c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2203      	movs	r2, #3
 8002e62:	4013      	ands	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	220f      	movs	r2, #15
 8002e68:	409a      	lsls	r2, r3
 8002e6a:	0013      	movs	r3, r2
 8002e6c:	43da      	mvns	r2, r3
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4013      	ands	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	23a0      	movs	r3, #160	; 0xa0
 8002e78:	05db      	lsls	r3, r3, #23
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d013      	beq.n	8002ea6 <HAL_GPIO_Init+0x1de>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a44      	ldr	r2, [pc, #272]	; (8002f94 <HAL_GPIO_Init+0x2cc>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00d      	beq.n	8002ea2 <HAL_GPIO_Init+0x1da>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a43      	ldr	r2, [pc, #268]	; (8002f98 <HAL_GPIO_Init+0x2d0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d007      	beq.n	8002e9e <HAL_GPIO_Init+0x1d6>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a42      	ldr	r2, [pc, #264]	; (8002f9c <HAL_GPIO_Init+0x2d4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d101      	bne.n	8002e9a <HAL_GPIO_Init+0x1d2>
 8002e96:	2305      	movs	r3, #5
 8002e98:	e006      	b.n	8002ea8 <HAL_GPIO_Init+0x1e0>
 8002e9a:	2306      	movs	r3, #6
 8002e9c:	e004      	b.n	8002ea8 <HAL_GPIO_Init+0x1e0>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e002      	b.n	8002ea8 <HAL_GPIO_Init+0x1e0>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <HAL_GPIO_Init+0x1e0>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	2103      	movs	r1, #3
 8002eac:	400a      	ands	r2, r1
 8002eae:	0092      	lsls	r2, r2, #2
 8002eb0:	4093      	lsls	r3, r2
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002eb8:	4935      	ldr	r1, [pc, #212]	; (8002f90 <HAL_GPIO_Init+0x2c8>)
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	089b      	lsrs	r3, r3, #2
 8002ebe:	3302      	adds	r3, #2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ec6:	4b36      	ldr	r3, [pc, #216]	; (8002fa0 <HAL_GPIO_Init+0x2d8>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	035b      	lsls	r3, r3, #13
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002eea:	4b2d      	ldr	r3, [pc, #180]	; (8002fa0 <HAL_GPIO_Init+0x2d8>)
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002ef0:	4b2b      	ldr	r3, [pc, #172]	; (8002fa0 <HAL_GPIO_Init+0x2d8>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	43da      	mvns	r2, r3
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	039b      	lsls	r3, r3, #14
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d003      	beq.n	8002f14 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f14:	4b22      	ldr	r3, [pc, #136]	; (8002fa0 <HAL_GPIO_Init+0x2d8>)
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002f1a:	4b21      	ldr	r3, [pc, #132]	; (8002fa0 <HAL_GPIO_Init+0x2d8>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	43da      	mvns	r2, r3
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4013      	ands	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	029b      	lsls	r3, r3, #10
 8002f32:	4013      	ands	r3, r2
 8002f34:	d003      	beq.n	8002f3e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f3e:	4b18      	ldr	r3, [pc, #96]	; (8002fa0 <HAL_GPIO_Init+0x2d8>)
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f44:	4b16      	ldr	r3, [pc, #88]	; (8002fa0 <HAL_GPIO_Init+0x2d8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	43da      	mvns	r2, r3
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4013      	ands	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	2380      	movs	r3, #128	; 0x80
 8002f5a:	025b      	lsls	r3, r3, #9
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d003      	beq.n	8002f68 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f68:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <HAL_GPIO_Init+0x2d8>)
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	3301      	adds	r3, #1
 8002f72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	40da      	lsrs	r2, r3
 8002f7c:	1e13      	subs	r3, r2, #0
 8002f7e:	d000      	beq.n	8002f82 <HAL_GPIO_Init+0x2ba>
 8002f80:	e6ae      	b.n	8002ce0 <HAL_GPIO_Init+0x18>
  }
}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	46c0      	nop			; (mov r8, r8)
 8002f86:	46bd      	mov	sp, r7
 8002f88:	b006      	add	sp, #24
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	40010000 	.word	0x40010000
 8002f94:	50000400 	.word	0x50000400
 8002f98:	50000800 	.word	0x50000800
 8002f9c:	50001c00 	.word	0x50001c00
 8002fa0:	40010400 	.word	0x40010400

08002fa4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	0008      	movs	r0, r1
 8002fae:	0011      	movs	r1, r2
 8002fb0:	1cbb      	adds	r3, r7, #2
 8002fb2:	1c02      	adds	r2, r0, #0
 8002fb4:	801a      	strh	r2, [r3, #0]
 8002fb6:	1c7b      	adds	r3, r7, #1
 8002fb8:	1c0a      	adds	r2, r1, #0
 8002fba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fbc:	1c7b      	adds	r3, r7, #1
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d004      	beq.n	8002fce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fc4:	1cbb      	adds	r3, r7, #2
 8002fc6:	881a      	ldrh	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002fcc:	e003      	b.n	8002fd6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002fce:	1cbb      	adds	r3, r7, #2
 8002fd0:	881a      	ldrh	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b002      	add	sp, #8
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	000a      	movs	r2, r1
 8002fe8:	1cbb      	adds	r3, r7, #2
 8002fea:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ff2:	1cbb      	adds	r3, r7, #2
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	041a      	lsls	r2, r3, #16
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	43db      	mvns	r3, r3
 8003000:	1cb9      	adds	r1, r7, #2
 8003002:	8809      	ldrh	r1, [r1, #0]
 8003004:	400b      	ands	r3, r1
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	619a      	str	r2, [r3, #24]
}
 800300c:	46c0      	nop			; (mov r8, r8)
 800300e:	46bd      	mov	sp, r7
 8003010:	b004      	add	sp, #16
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	0002      	movs	r2, r0
 800301c:	1dbb      	adds	r3, r7, #6
 800301e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003020:	4b09      	ldr	r3, [pc, #36]	; (8003048 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	1dba      	adds	r2, r7, #6
 8003026:	8812      	ldrh	r2, [r2, #0]
 8003028:	4013      	ands	r3, r2
 800302a:	d008      	beq.n	800303e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800302c:	4b06      	ldr	r3, [pc, #24]	; (8003048 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800302e:	1dba      	adds	r2, r7, #6
 8003030:	8812      	ldrh	r2, [r2, #0]
 8003032:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003034:	1dbb      	adds	r3, r7, #6
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	0018      	movs	r0, r3
 800303a:	f7fe fe13 	bl	8001c64 <HAL_GPIO_EXTI_Callback>
  }
}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	46bd      	mov	sp, r7
 8003042:	b002      	add	sp, #8
 8003044:	bd80      	pop	{r7, pc}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	40010400 	.word	0x40010400

0800304c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e082      	b.n	8003164 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2241      	movs	r2, #65	; 0x41
 8003062:	5c9b      	ldrb	r3, [r3, r2]
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d107      	bne.n	800307a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2240      	movs	r2, #64	; 0x40
 800306e:	2100      	movs	r1, #0
 8003070:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	0018      	movs	r0, r3
 8003076:	f7fe fc05 	bl	8001884 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2241      	movs	r2, #65	; 0x41
 800307e:	2124      	movs	r1, #36	; 0x24
 8003080:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2101      	movs	r1, #1
 800308e:	438a      	bics	r2, r1
 8003090:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4934      	ldr	r1, [pc, #208]	; (800316c <HAL_I2C_Init+0x120>)
 800309c:	400a      	ands	r2, r1
 800309e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4931      	ldr	r1, [pc, #196]	; (8003170 <HAL_I2C_Init+0x124>)
 80030ac:	400a      	ands	r2, r1
 80030ae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d108      	bne.n	80030ca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2180      	movs	r1, #128	; 0x80
 80030c2:	0209      	lsls	r1, r1, #8
 80030c4:	430a      	orrs	r2, r1
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	e007      	b.n	80030da <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2184      	movs	r1, #132	; 0x84
 80030d4:	0209      	lsls	r1, r1, #8
 80030d6:	430a      	orrs	r2, r1
 80030d8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d104      	bne.n	80030ec <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2280      	movs	r2, #128	; 0x80
 80030e8:	0112      	lsls	r2, r2, #4
 80030ea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	491f      	ldr	r1, [pc, #124]	; (8003174 <HAL_I2C_Init+0x128>)
 80030f8:	430a      	orrs	r2, r1
 80030fa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	491a      	ldr	r1, [pc, #104]	; (8003170 <HAL_I2C_Init+0x124>)
 8003108:	400a      	ands	r2, r1
 800310a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	431a      	orrs	r2, r3
 8003116:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69d9      	ldr	r1, [r3, #28]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1a      	ldr	r2, [r3, #32]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2101      	movs	r1, #1
 8003142:	430a      	orrs	r2, r1
 8003144:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2241      	movs	r2, #65	; 0x41
 8003150:	2120      	movs	r1, #32
 8003152:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2242      	movs	r2, #66	; 0x42
 800315e:	2100      	movs	r1, #0
 8003160:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	0018      	movs	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	b002      	add	sp, #8
 800316a:	bd80      	pop	{r7, pc}
 800316c:	f0ffffff 	.word	0xf0ffffff
 8003170:	ffff7fff 	.word	0xffff7fff
 8003174:	02008000 	.word	0x02008000

08003178 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003178:	b590      	push	{r4, r7, lr}
 800317a:	b089      	sub	sp, #36	; 0x24
 800317c:	af02      	add	r7, sp, #8
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	0008      	movs	r0, r1
 8003182:	607a      	str	r2, [r7, #4]
 8003184:	0019      	movs	r1, r3
 8003186:	230a      	movs	r3, #10
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	1c02      	adds	r2, r0, #0
 800318c:	801a      	strh	r2, [r3, #0]
 800318e:	2308      	movs	r3, #8
 8003190:	18fb      	adds	r3, r7, r3
 8003192:	1c0a      	adds	r2, r1, #0
 8003194:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2241      	movs	r2, #65	; 0x41
 800319a:	5c9b      	ldrb	r3, [r3, r2]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b20      	cmp	r3, #32
 80031a0:	d000      	beq.n	80031a4 <HAL_I2C_Master_Transmit+0x2c>
 80031a2:	e0e7      	b.n	8003374 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2240      	movs	r2, #64	; 0x40
 80031a8:	5c9b      	ldrb	r3, [r3, r2]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_I2C_Master_Transmit+0x3a>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e0e1      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1fe>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2240      	movs	r2, #64	; 0x40
 80031b6:	2101      	movs	r1, #1
 80031b8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031ba:	f7ff fbe5 	bl	8002988 <HAL_GetTick>
 80031be:	0003      	movs	r3, r0
 80031c0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	0219      	lsls	r1, r3, #8
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	2319      	movs	r3, #25
 80031ce:	2201      	movs	r2, #1
 80031d0:	f001 f808 	bl	80041e4 <I2C_WaitOnFlagUntilTimeout>
 80031d4:	1e03      	subs	r3, r0, #0
 80031d6:	d001      	beq.n	80031dc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0cc      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2241      	movs	r2, #65	; 0x41
 80031e0:	2121      	movs	r1, #33	; 0x21
 80031e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2242      	movs	r2, #66	; 0x42
 80031e8:	2110      	movs	r1, #16
 80031ea:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2208      	movs	r2, #8
 80031fc:	18ba      	adds	r2, r7, r2
 80031fe:	8812      	ldrh	r2, [r2, #0]
 8003200:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320c:	b29b      	uxth	r3, r3
 800320e:	2bff      	cmp	r3, #255	; 0xff
 8003210:	d911      	bls.n	8003236 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	22ff      	movs	r2, #255	; 0xff
 8003216:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321c:	b2da      	uxtb	r2, r3
 800321e:	2380      	movs	r3, #128	; 0x80
 8003220:	045c      	lsls	r4, r3, #17
 8003222:	230a      	movs	r3, #10
 8003224:	18fb      	adds	r3, r7, r3
 8003226:	8819      	ldrh	r1, [r3, #0]
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	4b55      	ldr	r3, [pc, #340]	; (8003380 <HAL_I2C_Master_Transmit+0x208>)
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	0023      	movs	r3, r4
 8003230:	f001 f9b0 	bl	8004594 <I2C_TransferConfig>
 8003234:	e075      	b.n	8003322 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003244:	b2da      	uxtb	r2, r3
 8003246:	2380      	movs	r3, #128	; 0x80
 8003248:	049c      	lsls	r4, r3, #18
 800324a:	230a      	movs	r3, #10
 800324c:	18fb      	adds	r3, r7, r3
 800324e:	8819      	ldrh	r1, [r3, #0]
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	4b4b      	ldr	r3, [pc, #300]	; (8003380 <HAL_I2C_Master_Transmit+0x208>)
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	0023      	movs	r3, r4
 8003258:	f001 f99c 	bl	8004594 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800325c:	e061      	b.n	8003322 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	0018      	movs	r0, r3
 8003266:	f001 f80b 	bl	8004280 <I2C_WaitOnTXISFlagUntilTimeout>
 800326a:	1e03      	subs	r3, r0, #0
 800326c:	d001      	beq.n	8003272 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e081      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	781a      	ldrb	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328c:	b29b      	uxth	r3, r3
 800328e:	3b01      	subs	r3, #1
 8003290:	b29a      	uxth	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d03a      	beq.n	8003322 <HAL_I2C_Master_Transmit+0x1aa>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d136      	bne.n	8003322 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	0013      	movs	r3, r2
 80032be:	2200      	movs	r2, #0
 80032c0:	2180      	movs	r1, #128	; 0x80
 80032c2:	f000 ff8f 	bl	80041e4 <I2C_WaitOnFlagUntilTimeout>
 80032c6:	1e03      	subs	r3, r0, #0
 80032c8:	d001      	beq.n	80032ce <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e053      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	2bff      	cmp	r3, #255	; 0xff
 80032d6:	d911      	bls.n	80032fc <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	22ff      	movs	r2, #255	; 0xff
 80032dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	2380      	movs	r3, #128	; 0x80
 80032e6:	045c      	lsls	r4, r3, #17
 80032e8:	230a      	movs	r3, #10
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	8819      	ldrh	r1, [r3, #0]
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	2300      	movs	r3, #0
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	0023      	movs	r3, r4
 80032f6:	f001 f94d 	bl	8004594 <I2C_TransferConfig>
 80032fa:	e012      	b.n	8003322 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330a:	b2da      	uxtb	r2, r3
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	049c      	lsls	r4, r3, #18
 8003310:	230a      	movs	r3, #10
 8003312:	18fb      	adds	r3, r7, r3
 8003314:	8819      	ldrh	r1, [r3, #0]
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	2300      	movs	r3, #0
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	0023      	movs	r3, r4
 800331e:	f001 f939 	bl	8004594 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003326:	b29b      	uxth	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	d198      	bne.n	800325e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	0018      	movs	r0, r3
 8003334:	f000 ffea 	bl	800430c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003338:	1e03      	subs	r3, r0, #0
 800333a:	d001      	beq.n	8003340 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e01a      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2220      	movs	r2, #32
 8003346:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	490c      	ldr	r1, [pc, #48]	; (8003384 <HAL_I2C_Master_Transmit+0x20c>)
 8003354:	400a      	ands	r2, r1
 8003356:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2241      	movs	r2, #65	; 0x41
 800335c:	2120      	movs	r1, #32
 800335e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2242      	movs	r2, #66	; 0x42
 8003364:	2100      	movs	r1, #0
 8003366:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2240      	movs	r2, #64	; 0x40
 800336c:	2100      	movs	r1, #0
 800336e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	e000      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003374:	2302      	movs	r3, #2
  }
}
 8003376:	0018      	movs	r0, r3
 8003378:	46bd      	mov	sp, r7
 800337a:	b007      	add	sp, #28
 800337c:	bd90      	pop	{r4, r7, pc}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	80002000 	.word	0x80002000
 8003384:	fe00e800 	.word	0xfe00e800

08003388 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003388:	b590      	push	{r4, r7, lr}
 800338a:	b089      	sub	sp, #36	; 0x24
 800338c:	af02      	add	r7, sp, #8
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	000c      	movs	r4, r1
 8003392:	0010      	movs	r0, r2
 8003394:	0019      	movs	r1, r3
 8003396:	230a      	movs	r3, #10
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	1c22      	adds	r2, r4, #0
 800339c:	801a      	strh	r2, [r3, #0]
 800339e:	2308      	movs	r3, #8
 80033a0:	18fb      	adds	r3, r7, r3
 80033a2:	1c02      	adds	r2, r0, #0
 80033a4:	801a      	strh	r2, [r3, #0]
 80033a6:	1dbb      	adds	r3, r7, #6
 80033a8:	1c0a      	adds	r2, r1, #0
 80033aa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2241      	movs	r2, #65	; 0x41
 80033b0:	5c9b      	ldrb	r3, [r3, r2]
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b20      	cmp	r3, #32
 80033b6:	d000      	beq.n	80033ba <HAL_I2C_Mem_Read+0x32>
 80033b8:	e110      	b.n	80035dc <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80033ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d004      	beq.n	80033ca <HAL_I2C_Mem_Read+0x42>
 80033c0:	232c      	movs	r3, #44	; 0x2c
 80033c2:	18fb      	adds	r3, r7, r3
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d105      	bne.n	80033d6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2280      	movs	r2, #128	; 0x80
 80033ce:	0092      	lsls	r2, r2, #2
 80033d0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e103      	b.n	80035de <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2240      	movs	r2, #64	; 0x40
 80033da:	5c9b      	ldrb	r3, [r3, r2]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_I2C_Mem_Read+0x5c>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e0fc      	b.n	80035de <HAL_I2C_Mem_Read+0x256>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2240      	movs	r2, #64	; 0x40
 80033e8:	2101      	movs	r1, #1
 80033ea:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033ec:	f7ff facc 	bl	8002988 <HAL_GetTick>
 80033f0:	0003      	movs	r3, r0
 80033f2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033f4:	2380      	movs	r3, #128	; 0x80
 80033f6:	0219      	lsls	r1, r3, #8
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	2319      	movs	r3, #25
 8003400:	2201      	movs	r2, #1
 8003402:	f000 feef 	bl	80041e4 <I2C_WaitOnFlagUntilTimeout>
 8003406:	1e03      	subs	r3, r0, #0
 8003408:	d001      	beq.n	800340e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e0e7      	b.n	80035de <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2241      	movs	r2, #65	; 0x41
 8003412:	2122      	movs	r1, #34	; 0x22
 8003414:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2242      	movs	r2, #66	; 0x42
 800341a:	2140      	movs	r1, #64	; 0x40
 800341c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003428:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	222c      	movs	r2, #44	; 0x2c
 800342e:	18ba      	adds	r2, r7, r2
 8003430:	8812      	ldrh	r2, [r2, #0]
 8003432:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800343a:	1dbb      	adds	r3, r7, #6
 800343c:	881c      	ldrh	r4, [r3, #0]
 800343e:	2308      	movs	r3, #8
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	881a      	ldrh	r2, [r3, #0]
 8003444:	230a      	movs	r3, #10
 8003446:	18fb      	adds	r3, r7, r3
 8003448:	8819      	ldrh	r1, [r3, #0]
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	9301      	str	r3, [sp, #4]
 8003450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	0023      	movs	r3, r4
 8003456:	f000 fa77 	bl	8003948 <I2C_RequestMemoryRead>
 800345a:	1e03      	subs	r3, r0, #0
 800345c:	d005      	beq.n	800346a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2240      	movs	r2, #64	; 0x40
 8003462:	2100      	movs	r1, #0
 8003464:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e0b9      	b.n	80035de <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346e:	b29b      	uxth	r3, r3
 8003470:	2bff      	cmp	r3, #255	; 0xff
 8003472:	d911      	bls.n	8003498 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	22ff      	movs	r2, #255	; 0xff
 8003478:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347e:	b2da      	uxtb	r2, r3
 8003480:	2380      	movs	r3, #128	; 0x80
 8003482:	045c      	lsls	r4, r3, #17
 8003484:	230a      	movs	r3, #10
 8003486:	18fb      	adds	r3, r7, r3
 8003488:	8819      	ldrh	r1, [r3, #0]
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	4b56      	ldr	r3, [pc, #344]	; (80035e8 <HAL_I2C_Mem_Read+0x260>)
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	0023      	movs	r3, r4
 8003492:	f001 f87f 	bl	8004594 <I2C_TransferConfig>
 8003496:	e012      	b.n	80034be <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	2380      	movs	r3, #128	; 0x80
 80034aa:	049c      	lsls	r4, r3, #18
 80034ac:	230a      	movs	r3, #10
 80034ae:	18fb      	adds	r3, r7, r3
 80034b0:	8819      	ldrh	r1, [r3, #0]
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	4b4c      	ldr	r3, [pc, #304]	; (80035e8 <HAL_I2C_Mem_Read+0x260>)
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	0023      	movs	r3, r4
 80034ba:	f001 f86b 	bl	8004594 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80034be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	0013      	movs	r3, r2
 80034c8:	2200      	movs	r2, #0
 80034ca:	2104      	movs	r1, #4
 80034cc:	f000 fe8a 	bl	80041e4 <I2C_WaitOnFlagUntilTimeout>
 80034d0:	1e03      	subs	r3, r0, #0
 80034d2:	d001      	beq.n	80034d8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e082      	b.n	80035de <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003500:	b29b      	uxth	r3, r3
 8003502:	3b01      	subs	r3, #1
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d03a      	beq.n	800358a <HAL_I2C_Mem_Read+0x202>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003518:	2b00      	cmp	r3, #0
 800351a:	d136      	bne.n	800358a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800351c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	0013      	movs	r3, r2
 8003526:	2200      	movs	r2, #0
 8003528:	2180      	movs	r1, #128	; 0x80
 800352a:	f000 fe5b 	bl	80041e4 <I2C_WaitOnFlagUntilTimeout>
 800352e:	1e03      	subs	r3, r0, #0
 8003530:	d001      	beq.n	8003536 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e053      	b.n	80035de <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353a:	b29b      	uxth	r3, r3
 800353c:	2bff      	cmp	r3, #255	; 0xff
 800353e:	d911      	bls.n	8003564 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	22ff      	movs	r2, #255	; 0xff
 8003544:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354a:	b2da      	uxtb	r2, r3
 800354c:	2380      	movs	r3, #128	; 0x80
 800354e:	045c      	lsls	r4, r3, #17
 8003550:	230a      	movs	r3, #10
 8003552:	18fb      	adds	r3, r7, r3
 8003554:	8819      	ldrh	r1, [r3, #0]
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	2300      	movs	r3, #0
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	0023      	movs	r3, r4
 800355e:	f001 f819 	bl	8004594 <I2C_TransferConfig>
 8003562:	e012      	b.n	800358a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003572:	b2da      	uxtb	r2, r3
 8003574:	2380      	movs	r3, #128	; 0x80
 8003576:	049c      	lsls	r4, r3, #18
 8003578:	230a      	movs	r3, #10
 800357a:	18fb      	adds	r3, r7, r3
 800357c:	8819      	ldrh	r1, [r3, #0]
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	2300      	movs	r3, #0
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	0023      	movs	r3, r4
 8003586:	f001 f805 	bl	8004594 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d194      	bne.n	80034be <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	0018      	movs	r0, r3
 800359c:	f000 feb6 	bl	800430c <I2C_WaitOnSTOPFlagUntilTimeout>
 80035a0:	1e03      	subs	r3, r0, #0
 80035a2:	d001      	beq.n	80035a8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e01a      	b.n	80035de <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2220      	movs	r2, #32
 80035ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	490c      	ldr	r1, [pc, #48]	; (80035ec <HAL_I2C_Mem_Read+0x264>)
 80035bc:	400a      	ands	r2, r1
 80035be:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2241      	movs	r2, #65	; 0x41
 80035c4:	2120      	movs	r1, #32
 80035c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2242      	movs	r2, #66	; 0x42
 80035cc:	2100      	movs	r1, #0
 80035ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2240      	movs	r2, #64	; 0x40
 80035d4:	2100      	movs	r1, #0
 80035d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	e000      	b.n	80035de <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80035dc:	2302      	movs	r3, #2
  }
}
 80035de:	0018      	movs	r0, r3
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b007      	add	sp, #28
 80035e4:	bd90      	pop	{r4, r7, pc}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	80002400 	.word	0x80002400
 80035ec:	fe00e800 	.word	0xfe00e800

080035f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	68f9      	ldr	r1, [r7, #12]
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	4798      	blx	r3
  }
}
 800361c:	46c0      	nop			; (mov r8, r8)
 800361e:	46bd      	mov	sp, r7
 8003620:	b004      	add	sp, #16
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	2380      	movs	r3, #128	; 0x80
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	4013      	ands	r3, r2
 8003644:	d00e      	beq.n	8003664 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	2280      	movs	r2, #128	; 0x80
 800364a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800364c:	d00a      	beq.n	8003664 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003652:	2201      	movs	r2, #1
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2280      	movs	r2, #128	; 0x80
 8003660:	0052      	lsls	r2, r2, #1
 8003662:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4013      	ands	r3, r2
 800366c:	d00e      	beq.n	800368c <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	2280      	movs	r2, #128	; 0x80
 8003672:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003674:	d00a      	beq.n	800368c <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367a:	2208      	movs	r2, #8
 800367c:	431a      	orrs	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2280      	movs	r2, #128	; 0x80
 8003688:	00d2      	lsls	r2, r2, #3
 800368a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	2380      	movs	r3, #128	; 0x80
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4013      	ands	r3, r2
 8003694:	d00e      	beq.n	80036b4 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2280      	movs	r2, #128	; 0x80
 800369a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800369c:	d00a      	beq.n	80036b4 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	2202      	movs	r2, #2
 80036a4:	431a      	orrs	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2280      	movs	r2, #128	; 0x80
 80036b0:	0092      	lsls	r2, r2, #2
 80036b2:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b8:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	220b      	movs	r2, #11
 80036be:	4013      	ands	r3, r2
 80036c0:	d005      	beq.n	80036ce <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	0011      	movs	r1, r2
 80036c8:	0018      	movs	r0, r3
 80036ca:	f000 fc1f 	bl	8003f0c <I2C_ITError>
  }
}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b006      	add	sp, #24
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	46bd      	mov	sp, r7
 80036e2:	b002      	add	sp, #8
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b082      	sub	sp, #8
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b002      	add	sp, #8
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b082      	sub	sp, #8
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	0008      	movs	r0, r1
 8003700:	0011      	movs	r1, r2
 8003702:	1cfb      	adds	r3, r7, #3
 8003704:	1c02      	adds	r2, r0, #0
 8003706:	701a      	strb	r2, [r3, #0]
 8003708:	003b      	movs	r3, r7
 800370a:	1c0a      	adds	r2, r1, #0
 800370c:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	46bd      	mov	sp, r7
 8003712:	b002      	add	sp, #8
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	46bd      	mov	sp, r7
 8003722:	b002      	add	sp, #8
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	46bd      	mov	sp, r7
 8003732:	b002      	add	sp, #8
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	46bd      	mov	sp, r7
 8003742:	b002      	add	sp, #8
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2240      	movs	r2, #64	; 0x40
 8003762:	5c9b      	ldrb	r3, [r3, r2]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <I2C_Slave_ISR_IT+0x24>
 8003768:	2302      	movs	r3, #2
 800376a:	e0e6      	b.n	800393a <I2C_Slave_ISR_IT+0x1f2>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2240      	movs	r2, #64	; 0x40
 8003770:	2101      	movs	r1, #1
 8003772:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	2220      	movs	r2, #32
 8003778:	4013      	ands	r3, r2
 800377a:	d009      	beq.n	8003790 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2220      	movs	r2, #32
 8003780:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003782:	d005      	beq.n	8003790 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	0011      	movs	r1, r2
 800378a:	0018      	movs	r0, r3
 800378c:	f000 fa46 	bl	8003c1c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	2210      	movs	r2, #16
 8003794:	4013      	ands	r3, r2
 8003796:	d052      	beq.n	800383e <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2210      	movs	r2, #16
 800379c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800379e:	d04e      	beq.n	800383e <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d12d      	bne.n	8003806 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2241      	movs	r2, #65	; 0x41
 80037ae:	5c9b      	ldrb	r3, [r3, r2]
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b28      	cmp	r3, #40	; 0x28
 80037b4:	d10b      	bne.n	80037ce <I2C_Slave_ISR_IT+0x86>
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	2380      	movs	r3, #128	; 0x80
 80037ba:	049b      	lsls	r3, r3, #18
 80037bc:	429a      	cmp	r2, r3
 80037be:	d106      	bne.n	80037ce <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	0011      	movs	r1, r2
 80037c6:	0018      	movs	r0, r3
 80037c8:	f000 fb48 	bl	8003e5c <I2C_ITListenCplt>
 80037cc:	e036      	b.n	800383c <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2241      	movs	r2, #65	; 0x41
 80037d2:	5c9b      	ldrb	r3, [r3, r2]
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b29      	cmp	r3, #41	; 0x29
 80037d8:	d110      	bne.n	80037fc <I2C_Slave_ISR_IT+0xb4>
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	4a59      	ldr	r2, [pc, #356]	; (8003944 <I2C_Slave_ISR_IT+0x1fc>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00c      	beq.n	80037fc <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2210      	movs	r2, #16
 80037e8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	0018      	movs	r0, r3
 80037ee:	f000 fcb8 	bl	8004162 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	0018      	movs	r0, r3
 80037f6:	f000 f9ad 	bl	8003b54 <I2C_ITSlaveSeqCplt>
 80037fa:	e01f      	b.n	800383c <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2210      	movs	r2, #16
 8003802:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003804:	e091      	b.n	800392a <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2210      	movs	r2, #16
 800380c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003812:	2204      	movs	r2, #4
 8003814:	431a      	orrs	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <I2C_Slave_ISR_IT+0xe4>
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	2380      	movs	r3, #128	; 0x80
 8003824:	045b      	lsls	r3, r3, #17
 8003826:	429a      	cmp	r2, r3
 8003828:	d000      	beq.n	800382c <I2C_Slave_ISR_IT+0xe4>
 800382a:	e07e      	b.n	800392a <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	0011      	movs	r1, r2
 8003834:	0018      	movs	r0, r3
 8003836:	f000 fb69 	bl	8003f0c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800383a:	e076      	b.n	800392a <I2C_Slave_ISR_IT+0x1e2>
 800383c:	e075      	b.n	800392a <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	2204      	movs	r2, #4
 8003842:	4013      	ands	r3, r2
 8003844:	d02f      	beq.n	80038a6 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2204      	movs	r2, #4
 800384a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800384c:	d02b      	beq.n	80038a6 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003852:	b29b      	uxth	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d018      	beq.n	800388a <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d14c      	bne.n	800392e <I2C_Slave_ISR_IT+0x1e6>
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	4a2b      	ldr	r2, [pc, #172]	; (8003944 <I2C_Slave_ISR_IT+0x1fc>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d048      	beq.n	800392e <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	0018      	movs	r0, r3
 80038a0:	f000 f958 	bl	8003b54 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80038a4:	e043      	b.n	800392e <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2208      	movs	r2, #8
 80038aa:	4013      	ands	r3, r2
 80038ac:	d00a      	beq.n	80038c4 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2208      	movs	r2, #8
 80038b2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80038b4:	d006      	beq.n	80038c4 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	0011      	movs	r1, r2
 80038bc:	0018      	movs	r0, r3
 80038be:	f000 f8a5 	bl	8003a0c <I2C_ITAddrCplt>
 80038c2:	e035      	b.n	8003930 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	2202      	movs	r2, #2
 80038c8:	4013      	ands	r3, r2
 80038ca:	d031      	beq.n	8003930 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80038d2:	d02d      	beq.n	8003930 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d8:	b29b      	uxth	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d018      	beq.n	8003910 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	781a      	ldrb	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003906:	3b01      	subs	r3, #1
 8003908:	b29a      	uxth	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	851a      	strh	r2, [r3, #40]	; 0x28
 800390e:	e00f      	b.n	8003930 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	2380      	movs	r3, #128	; 0x80
 8003914:	045b      	lsls	r3, r3, #17
 8003916:	429a      	cmp	r2, r3
 8003918:	d002      	beq.n	8003920 <I2C_Slave_ISR_IT+0x1d8>
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d107      	bne.n	8003930 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	0018      	movs	r0, r3
 8003924:	f000 f916 	bl	8003b54 <I2C_ITSlaveSeqCplt>
 8003928:	e002      	b.n	8003930 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	e000      	b.n	8003930 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800392e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2240      	movs	r2, #64	; 0x40
 8003934:	2100      	movs	r1, #0
 8003936:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	0018      	movs	r0, r3
 800393c:	46bd      	mov	sp, r7
 800393e:	b006      	add	sp, #24
 8003940:	bd80      	pop	{r7, pc}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	ffff0000 	.word	0xffff0000

08003948 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003948:	b5b0      	push	{r4, r5, r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af02      	add	r7, sp, #8
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	000c      	movs	r4, r1
 8003952:	0010      	movs	r0, r2
 8003954:	0019      	movs	r1, r3
 8003956:	250a      	movs	r5, #10
 8003958:	197b      	adds	r3, r7, r5
 800395a:	1c22      	adds	r2, r4, #0
 800395c:	801a      	strh	r2, [r3, #0]
 800395e:	2308      	movs	r3, #8
 8003960:	18fb      	adds	r3, r7, r3
 8003962:	1c02      	adds	r2, r0, #0
 8003964:	801a      	strh	r2, [r3, #0]
 8003966:	1dbb      	adds	r3, r7, #6
 8003968:	1c0a      	adds	r2, r1, #0
 800396a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800396c:	1dbb      	adds	r3, r7, #6
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	b2da      	uxtb	r2, r3
 8003972:	197b      	adds	r3, r7, r5
 8003974:	8819      	ldrh	r1, [r3, #0]
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	4b23      	ldr	r3, [pc, #140]	; (8003a08 <I2C_RequestMemoryRead+0xc0>)
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	2300      	movs	r3, #0
 800397e:	f000 fe09 	bl	8004594 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003984:	6a39      	ldr	r1, [r7, #32]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	0018      	movs	r0, r3
 800398a:	f000 fc79 	bl	8004280 <I2C_WaitOnTXISFlagUntilTimeout>
 800398e:	1e03      	subs	r3, r0, #0
 8003990:	d001      	beq.n	8003996 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e033      	b.n	80039fe <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003996:	1dbb      	adds	r3, r7, #6
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d107      	bne.n	80039ae <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800399e:	2308      	movs	r3, #8
 80039a0:	18fb      	adds	r3, r7, r3
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	629a      	str	r2, [r3, #40]	; 0x28
 80039ac:	e019      	b.n	80039e2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80039ae:	2308      	movs	r3, #8
 80039b0:	18fb      	adds	r3, r7, r3
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	0a1b      	lsrs	r3, r3, #8
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c2:	6a39      	ldr	r1, [r7, #32]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	0018      	movs	r0, r3
 80039c8:	f000 fc5a 	bl	8004280 <I2C_WaitOnTXISFlagUntilTimeout>
 80039cc:	1e03      	subs	r3, r0, #0
 80039ce:	d001      	beq.n	80039d4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e014      	b.n	80039fe <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039d4:	2308      	movs	r3, #8
 80039d6:	18fb      	adds	r3, r7, r3
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80039e2:	6a3a      	ldr	r2, [r7, #32]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	0013      	movs	r3, r2
 80039ec:	2200      	movs	r2, #0
 80039ee:	2140      	movs	r1, #64	; 0x40
 80039f0:	f000 fbf8 	bl	80041e4 <I2C_WaitOnFlagUntilTimeout>
 80039f4:	1e03      	subs	r3, r0, #0
 80039f6:	d001      	beq.n	80039fc <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e000      	b.n	80039fe <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	0018      	movs	r0, r3
 8003a00:	46bd      	mov	sp, r7
 8003a02:	b004      	add	sp, #16
 8003a04:	bdb0      	pop	{r4, r5, r7, pc}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	80002000 	.word	0x80002000

08003a0c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003a0c:	b5b0      	push	{r4, r5, r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2241      	movs	r2, #65	; 0x41
 8003a1a:	5c9b      	ldrb	r3, [r3, r2]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	001a      	movs	r2, r3
 8003a20:	2328      	movs	r3, #40	; 0x28
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b28      	cmp	r3, #40	; 0x28
 8003a26:	d000      	beq.n	8003a2a <I2C_ITAddrCplt+0x1e>
 8003a28:	e088      	b.n	8003b3c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	0c1b      	lsrs	r3, r3, #16
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	250f      	movs	r5, #15
 8003a36:	197b      	adds	r3, r7, r5
 8003a38:	2101      	movs	r1, #1
 8003a3a:	400a      	ands	r2, r1
 8003a3c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	0c1b      	lsrs	r3, r3, #16
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	200c      	movs	r0, #12
 8003a4a:	183b      	adds	r3, r7, r0
 8003a4c:	21fe      	movs	r1, #254	; 0xfe
 8003a4e:	400a      	ands	r2, r1
 8003a50:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	240a      	movs	r4, #10
 8003a5c:	193b      	adds	r3, r7, r4
 8003a5e:	0592      	lsls	r2, r2, #22
 8003a60:	0d92      	lsrs	r2, r2, #22
 8003a62:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	2308      	movs	r3, #8
 8003a6e:	18fb      	adds	r3, r7, r3
 8003a70:	21fe      	movs	r1, #254	; 0xfe
 8003a72:	400a      	ands	r2, r1
 8003a74:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d148      	bne.n	8003b10 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003a7e:	0021      	movs	r1, r4
 8003a80:	187b      	adds	r3, r7, r1
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	09db      	lsrs	r3, r3, #7
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	183b      	adds	r3, r7, r0
 8003a8a:	881b      	ldrh	r3, [r3, #0]
 8003a8c:	4053      	eors	r3, r2
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	001a      	movs	r2, r3
 8003a92:	2306      	movs	r3, #6
 8003a94:	4013      	ands	r3, r2
 8003a96:	d120      	bne.n	8003ada <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8003a98:	183b      	adds	r3, r7, r0
 8003a9a:	187a      	adds	r2, r7, r1
 8003a9c:	8812      	ldrh	r2, [r2, #0]
 8003a9e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d14c      	bne.n	8003b4c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2208      	movs	r2, #8
 8003abe:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2240      	movs	r2, #64	; 0x40
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003ac8:	183b      	adds	r3, r7, r0
 8003aca:	881a      	ldrh	r2, [r3, #0]
 8003acc:	197b      	adds	r3, r7, r5
 8003ace:	7819      	ldrb	r1, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f7ff fe0f 	bl	80036f6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003ad8:	e038      	b.n	8003b4c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8003ada:	240c      	movs	r4, #12
 8003adc:	193b      	adds	r3, r7, r4
 8003ade:	2208      	movs	r2, #8
 8003ae0:	18ba      	adds	r2, r7, r2
 8003ae2:	8812      	ldrh	r2, [r2, #0]
 8003ae4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003ae6:	2380      	movs	r3, #128	; 0x80
 8003ae8:	021a      	lsls	r2, r3, #8
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	0011      	movs	r1, r2
 8003aee:	0018      	movs	r0, r3
 8003af0:	f000 fd8a 	bl	8004608 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2240      	movs	r2, #64	; 0x40
 8003af8:	2100      	movs	r1, #0
 8003afa:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003afc:	193b      	adds	r3, r7, r4
 8003afe:	881a      	ldrh	r2, [r3, #0]
 8003b00:	230f      	movs	r3, #15
 8003b02:	18fb      	adds	r3, r7, r3
 8003b04:	7819      	ldrb	r1, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f7ff fdf4 	bl	80036f6 <HAL_I2C_AddrCallback>
}
 8003b0e:	e01d      	b.n	8003b4c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003b10:	2380      	movs	r3, #128	; 0x80
 8003b12:	021a      	lsls	r2, r3, #8
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	0011      	movs	r1, r2
 8003b18:	0018      	movs	r0, r3
 8003b1a:	f000 fd75 	bl	8004608 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2240      	movs	r2, #64	; 0x40
 8003b22:	2100      	movs	r1, #0
 8003b24:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003b26:	230c      	movs	r3, #12
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	881a      	ldrh	r2, [r3, #0]
 8003b2c:	230f      	movs	r3, #15
 8003b2e:	18fb      	adds	r3, r7, r3
 8003b30:	7819      	ldrb	r1, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	0018      	movs	r0, r3
 8003b36:	f7ff fdde 	bl	80036f6 <HAL_I2C_AddrCallback>
}
 8003b3a:	e007      	b.n	8003b4c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2208      	movs	r2, #8
 8003b42:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2240      	movs	r2, #64	; 0x40
 8003b48:	2100      	movs	r1, #0
 8003b4a:	5499      	strb	r1, [r3, r2]
}
 8003b4c:	46c0      	nop			; (mov r8, r8)
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	b004      	add	sp, #16
 8003b52:	bdb0      	pop	{r4, r5, r7, pc}

08003b54 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2242      	movs	r2, #66	; 0x42
 8003b68:	2100      	movs	r1, #0
 8003b6a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	2380      	movs	r3, #128	; 0x80
 8003b70:	01db      	lsls	r3, r3, #7
 8003b72:	4013      	ands	r3, r2
 8003b74:	d008      	beq.n	8003b88 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4924      	ldr	r1, [pc, #144]	; (8003c14 <I2C_ITSlaveSeqCplt+0xc0>)
 8003b82:	400a      	ands	r2, r1
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	e00c      	b.n	8003ba2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	2380      	movs	r3, #128	; 0x80
 8003b8c:	021b      	lsls	r3, r3, #8
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d007      	beq.n	8003ba2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	491e      	ldr	r1, [pc, #120]	; (8003c18 <I2C_ITSlaveSeqCplt+0xc4>)
 8003b9e:	400a      	ands	r2, r1
 8003ba0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2241      	movs	r2, #65	; 0x41
 8003ba6:	5c9b      	ldrb	r3, [r3, r2]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b29      	cmp	r3, #41	; 0x29
 8003bac:	d114      	bne.n	8003bd8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2241      	movs	r2, #65	; 0x41
 8003bb2:	2128      	movs	r1, #40	; 0x28
 8003bb4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2221      	movs	r2, #33	; 0x21
 8003bba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	f000 fd21 	bl	8004608 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2240      	movs	r2, #64	; 0x40
 8003bca:	2100      	movs	r1, #0
 8003bcc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f7ff fd80 	bl	80036d6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003bd6:	e019      	b.n	8003c0c <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2241      	movs	r2, #65	; 0x41
 8003bdc:	5c9b      	ldrb	r3, [r3, r2]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b2a      	cmp	r3, #42	; 0x2a
 8003be2:	d113      	bne.n	8003c0c <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2241      	movs	r2, #65	; 0x41
 8003be8:	2128      	movs	r1, #40	; 0x28
 8003bea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2222      	movs	r2, #34	; 0x22
 8003bf0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2102      	movs	r1, #2
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f000 fd06 	bl	8004608 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2240      	movs	r2, #64	; 0x40
 8003c00:	2100      	movs	r1, #0
 8003c02:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	0018      	movs	r0, r3
 8003c08:	f7ff fd6d 	bl	80036e6 <HAL_I2C_SlaveRxCpltCallback>
}
 8003c0c:	46c0      	nop			; (mov r8, r8)
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	b004      	add	sp, #16
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	ffffbfff 	.word	0xffffbfff
 8003c18:	ffff7fff 	.word	0xffff7fff

08003c1c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003c32:	200f      	movs	r0, #15
 8003c34:	183b      	adds	r3, r7, r0
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	2141      	movs	r1, #65	; 0x41
 8003c3a:	5c52      	ldrb	r2, [r2, r1]
 8003c3c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2220      	movs	r2, #32
 8003c44:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c46:	183b      	adds	r3, r7, r0
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b21      	cmp	r3, #33	; 0x21
 8003c4c:	d003      	beq.n	8003c56 <I2C_ITSlaveCplt+0x3a>
 8003c4e:	183b      	adds	r3, r7, r0
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2b29      	cmp	r3, #41	; 0x29
 8003c54:	d109      	bne.n	8003c6a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003c56:	4a7b      	ldr	r2, [pc, #492]	; (8003e44 <I2C_ITSlaveCplt+0x228>)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	0011      	movs	r1, r2
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f000 fcd3 	bl	8004608 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2221      	movs	r2, #33	; 0x21
 8003c66:	631a      	str	r2, [r3, #48]	; 0x30
 8003c68:	e011      	b.n	8003c8e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c6a:	220f      	movs	r2, #15
 8003c6c:	18bb      	adds	r3, r7, r2
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b22      	cmp	r3, #34	; 0x22
 8003c72:	d003      	beq.n	8003c7c <I2C_ITSlaveCplt+0x60>
 8003c74:	18bb      	adds	r3, r7, r2
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b2a      	cmp	r3, #42	; 0x2a
 8003c7a:	d108      	bne.n	8003c8e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003c7c:	4a72      	ldr	r2, [pc, #456]	; (8003e48 <I2C_ITSlaveCplt+0x22c>)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	0011      	movs	r1, r2
 8003c82:	0018      	movs	r0, r3
 8003c84:	f000 fcc0 	bl	8004608 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2222      	movs	r2, #34	; 0x22
 8003c8c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2180      	movs	r1, #128	; 0x80
 8003c9a:	0209      	lsls	r1, r1, #8
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4968      	ldr	r1, [pc, #416]	; (8003e4c <I2C_ITSlaveCplt+0x230>)
 8003cac:	400a      	ands	r2, r1
 8003cae:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f000 fa55 	bl	8004162 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	2380      	movs	r3, #128	; 0x80
 8003cbc:	01db      	lsls	r3, r3, #7
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d013      	beq.n	8003cea <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4960      	ldr	r1, [pc, #384]	; (8003e50 <I2C_ITSlaveCplt+0x234>)
 8003cce:	400a      	ands	r2, r1
 8003cd0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d01f      	beq.n	8003d1a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ce8:	e017      	b.n	8003d1a <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	2380      	movs	r3, #128	; 0x80
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	d012      	beq.n	8003d1a <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4955      	ldr	r1, [pc, #340]	; (8003e54 <I2C_ITSlaveCplt+0x238>)
 8003d00:	400a      	ands	r2, r1
 8003d02:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d006      	beq.n	8003d1a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2204      	movs	r2, #4
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d020      	beq.n	8003d64 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2204      	movs	r2, #4
 8003d26:	4393      	bics	r3, r2
 8003d28:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	b2d2      	uxtb	r2, r2
 8003d36:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00c      	beq.n	8003d64 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d005      	beq.n	8003d7a <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d72:	2204      	movs	r2, #4
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2242      	movs	r2, #66	; 0x42
 8003d7e:	2100      	movs	r1, #0
 8003d80:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d013      	beq.n	8003db8 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	0011      	movs	r1, r2
 8003d98:	0018      	movs	r0, r3
 8003d9a:	f000 f8b7 	bl	8003f0c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2241      	movs	r2, #65	; 0x41
 8003da2:	5c9b      	ldrb	r3, [r3, r2]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b28      	cmp	r3, #40	; 0x28
 8003da8:	d147      	bne.n	8003e3a <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	0011      	movs	r1, r2
 8003db0:	0018      	movs	r0, r3
 8003db2:	f000 f853 	bl	8003e5c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003db6:	e040      	b.n	8003e3a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	4a26      	ldr	r2, [pc, #152]	; (8003e58 <I2C_ITSlaveCplt+0x23c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d016      	beq.n	8003df0 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f7ff fec5 	bl	8003b54 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a22      	ldr	r2, [pc, #136]	; (8003e58 <I2C_ITSlaveCplt+0x23c>)
 8003dce:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2241      	movs	r2, #65	; 0x41
 8003dd4:	2120      	movs	r1, #32
 8003dd6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2240      	movs	r2, #64	; 0x40
 8003de2:	2100      	movs	r1, #0
 8003de4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	0018      	movs	r0, r3
 8003dea:	f7ff fc94 	bl	8003716 <HAL_I2C_ListenCpltCallback>
}
 8003dee:	e024      	b.n	8003e3a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2241      	movs	r2, #65	; 0x41
 8003df4:	5c9b      	ldrb	r3, [r3, r2]
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b22      	cmp	r3, #34	; 0x22
 8003dfa:	d10f      	bne.n	8003e1c <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2241      	movs	r2, #65	; 0x41
 8003e00:	2120      	movs	r1, #32
 8003e02:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2240      	movs	r2, #64	; 0x40
 8003e0e:	2100      	movs	r1, #0
 8003e10:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	0018      	movs	r0, r3
 8003e16:	f7ff fc66 	bl	80036e6 <HAL_I2C_SlaveRxCpltCallback>
}
 8003e1a:	e00e      	b.n	8003e3a <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2241      	movs	r2, #65	; 0x41
 8003e20:	2120      	movs	r1, #32
 8003e22:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2240      	movs	r2, #64	; 0x40
 8003e2e:	2100      	movs	r1, #0
 8003e30:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	0018      	movs	r0, r3
 8003e36:	f7ff fc4e 	bl	80036d6 <HAL_I2C_SlaveTxCpltCallback>
}
 8003e3a:	46c0      	nop			; (mov r8, r8)
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	b006      	add	sp, #24
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	00008001 	.word	0x00008001
 8003e48:	00008002 	.word	0x00008002
 8003e4c:	fe00e800 	.word	0xfe00e800
 8003e50:	ffffbfff 	.word	0xffffbfff
 8003e54:	ffff7fff 	.word	0xffff7fff
 8003e58:	ffff0000 	.word	0xffff0000

08003e5c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a26      	ldr	r2, [pc, #152]	; (8003f04 <I2C_ITListenCplt+0xa8>)
 8003e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2241      	movs	r2, #65	; 0x41
 8003e76:	2120      	movs	r1, #32
 8003e78:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2242      	movs	r2, #66	; 0x42
 8003e7e:	2100      	movs	r1, #0
 8003e80:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2204      	movs	r2, #4
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	d022      	beq.n	8003ed6 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d012      	beq.n	8003ed6 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ece:	2204      	movs	r2, #4
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003ed6:	4a0c      	ldr	r2, [pc, #48]	; (8003f08 <I2C_ITListenCplt+0xac>)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	0011      	movs	r1, r2
 8003edc:	0018      	movs	r0, r3
 8003ede:	f000 fb93 	bl	8004608 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2210      	movs	r2, #16
 8003ee8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2240      	movs	r2, #64	; 0x40
 8003eee:	2100      	movs	r1, #0
 8003ef0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f7ff fc0e 	bl	8003716 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	46bd      	mov	sp, r7
 8003efe:	b002      	add	sp, #8
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	ffff0000 	.word	0xffff0000
 8003f08:	00008003 	.word	0x00008003

08003f0c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003f16:	200f      	movs	r0, #15
 8003f18:	183b      	adds	r3, r7, r0
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	2141      	movs	r1, #65	; 0x41
 8003f1e:	5c52      	ldrb	r2, [r2, r1]
 8003f20:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2242      	movs	r2, #66	; 0x42
 8003f26:	2100      	movs	r1, #0
 8003f28:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a72      	ldr	r2, [pc, #456]	; (80040f8 <I2C_ITError+0x1ec>)
 8003f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003f42:	183b      	adds	r3, r7, r0
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b28      	cmp	r3, #40	; 0x28
 8003f48:	d007      	beq.n	8003f5a <I2C_ITError+0x4e>
 8003f4a:	183b      	adds	r3, r7, r0
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	2b29      	cmp	r3, #41	; 0x29
 8003f50:	d003      	beq.n	8003f5a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003f52:	183b      	adds	r3, r7, r0
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b2a      	cmp	r3, #42	; 0x2a
 8003f58:	d10c      	bne.n	8003f74 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2103      	movs	r1, #3
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f000 fb52 	bl	8004608 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2241      	movs	r2, #65	; 0x41
 8003f68:	2128      	movs	r1, #40	; 0x28
 8003f6a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a63      	ldr	r2, [pc, #396]	; (80040fc <I2C_ITError+0x1f0>)
 8003f70:	635a      	str	r2, [r3, #52]	; 0x34
 8003f72:	e032      	b.n	8003fda <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003f74:	4a62      	ldr	r2, [pc, #392]	; (8004100 <I2C_ITError+0x1f4>)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	0011      	movs	r1, r2
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f000 fb44 	bl	8004608 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	0018      	movs	r0, r3
 8003f84:	f000 f8ed 	bl	8004162 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2241      	movs	r2, #65	; 0x41
 8003f8c:	5c9b      	ldrb	r3, [r3, r2]
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b60      	cmp	r3, #96	; 0x60
 8003f92:	d01f      	beq.n	8003fd4 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2241      	movs	r2, #65	; 0x41
 8003f98:	2120      	movs	r1, #32
 8003f9a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	2b20      	cmp	r3, #32
 8003fa8:	d114      	bne.n	8003fd4 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	2210      	movs	r2, #16
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2b10      	cmp	r3, #16
 8003fb6:	d109      	bne.n	8003fcc <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2210      	movs	r2, #16
 8003fbe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc4:	2204      	movs	r2, #4
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d03b      	beq.n	8004060 <I2C_ITError+0x154>
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2b11      	cmp	r3, #17
 8003fec:	d002      	beq.n	8003ff4 <I2C_ITError+0xe8>
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2b21      	cmp	r3, #33	; 0x21
 8003ff2:	d135      	bne.n	8004060 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	2380      	movs	r3, #128	; 0x80
 8003ffc:	01db      	lsls	r3, r3, #7
 8003ffe:	401a      	ands	r2, r3
 8004000:	2380      	movs	r3, #128	; 0x80
 8004002:	01db      	lsls	r3, r3, #7
 8004004:	429a      	cmp	r2, r3
 8004006:	d107      	bne.n	8004018 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	493c      	ldr	r1, [pc, #240]	; (8004104 <I2C_ITError+0x1f8>)
 8004014:	400a      	ands	r2, r1
 8004016:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401c:	0018      	movs	r0, r3
 800401e:	f7fe fe46 	bl	8002cae <HAL_DMA_GetState>
 8004022:	0003      	movs	r3, r0
 8004024:	2b01      	cmp	r3, #1
 8004026:	d016      	beq.n	8004056 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402c:	4a36      	ldr	r2, [pc, #216]	; (8004108 <I2C_ITError+0x1fc>)
 800402e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2240      	movs	r2, #64	; 0x40
 8004034:	2100      	movs	r1, #0
 8004036:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403c:	0018      	movs	r0, r3
 800403e:	f7fe fdef 	bl	8002c20 <HAL_DMA_Abort_IT>
 8004042:	1e03      	subs	r3, r0, #0
 8004044:	d051      	beq.n	80040ea <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004050:	0018      	movs	r0, r3
 8004052:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004054:	e049      	b.n	80040ea <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	0018      	movs	r0, r3
 800405a:	f000 f859 	bl	8004110 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800405e:	e044      	b.n	80040ea <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004064:	2b00      	cmp	r3, #0
 8004066:	d03b      	beq.n	80040e0 <I2C_ITError+0x1d4>
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2b12      	cmp	r3, #18
 800406c:	d002      	beq.n	8004074 <I2C_ITError+0x168>
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b22      	cmp	r3, #34	; 0x22
 8004072:	d135      	bne.n	80040e0 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	2380      	movs	r3, #128	; 0x80
 800407c:	021b      	lsls	r3, r3, #8
 800407e:	401a      	ands	r2, r3
 8004080:	2380      	movs	r3, #128	; 0x80
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	429a      	cmp	r2, r3
 8004086:	d107      	bne.n	8004098 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	491e      	ldr	r1, [pc, #120]	; (800410c <I2C_ITError+0x200>)
 8004094:	400a      	ands	r2, r1
 8004096:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409c:	0018      	movs	r0, r3
 800409e:	f7fe fe06 	bl	8002cae <HAL_DMA_GetState>
 80040a2:	0003      	movs	r3, r0
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d016      	beq.n	80040d6 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ac:	4a16      	ldr	r2, [pc, #88]	; (8004108 <I2C_ITError+0x1fc>)
 80040ae:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2240      	movs	r2, #64	; 0x40
 80040b4:	2100      	movs	r1, #0
 80040b6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040bc:	0018      	movs	r0, r3
 80040be:	f7fe fdaf 	bl	8002c20 <HAL_DMA_Abort_IT>
 80040c2:	1e03      	subs	r3, r0, #0
 80040c4:	d013      	beq.n	80040ee <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d0:	0018      	movs	r0, r3
 80040d2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040d4:	e00b      	b.n	80040ee <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	0018      	movs	r0, r3
 80040da:	f000 f819 	bl	8004110 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040de:	e006      	b.n	80040ee <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	0018      	movs	r0, r3
 80040e4:	f000 f814 	bl	8004110 <I2C_TreatErrorCallback>
  }
}
 80040e8:	e002      	b.n	80040f0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	e000      	b.n	80040f0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040ee:	46c0      	nop			; (mov r8, r8)
}
 80040f0:	46c0      	nop			; (mov r8, r8)
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b004      	add	sp, #16
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	ffff0000 	.word	0xffff0000
 80040fc:	08003749 	.word	0x08003749
 8004100:	00008003 	.word	0x00008003
 8004104:	ffffbfff 	.word	0xffffbfff
 8004108:	080041a7 	.word	0x080041a7
 800410c:	ffff7fff 	.word	0xffff7fff

08004110 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2241      	movs	r2, #65	; 0x41
 800411c:	5c9b      	ldrb	r3, [r3, r2]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b60      	cmp	r3, #96	; 0x60
 8004122:	d10f      	bne.n	8004144 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2241      	movs	r2, #65	; 0x41
 8004128:	2120      	movs	r1, #32
 800412a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2240      	movs	r2, #64	; 0x40
 8004136:	2100      	movs	r1, #0
 8004138:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	0018      	movs	r0, r3
 800413e:	f7ff fafa 	bl	8003736 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004142:	e00a      	b.n	800415a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2240      	movs	r2, #64	; 0x40
 800414e:	2100      	movs	r1, #0
 8004150:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	0018      	movs	r0, r3
 8004156:	f7ff fae6 	bl	8003726 <HAL_I2C_ErrorCallback>
}
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	46bd      	mov	sp, r7
 800415e:	b002      	add	sp, #8
 8004160:	bd80      	pop	{r7, pc}

08004162 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b082      	sub	sp, #8
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	2202      	movs	r2, #2
 8004172:	4013      	ands	r3, r2
 8004174:	2b02      	cmp	r3, #2
 8004176:	d103      	bne.n	8004180 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2200      	movs	r2, #0
 800417e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	2201      	movs	r2, #1
 8004188:	4013      	ands	r3, r2
 800418a:	2b01      	cmp	r3, #1
 800418c:	d007      	beq.n	800419e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	699a      	ldr	r2, [r3, #24]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2101      	movs	r1, #1
 800419a:	430a      	orrs	r2, r1
 800419c:	619a      	str	r2, [r3, #24]
  }
}
 800419e:	46c0      	nop			; (mov r8, r8)
 80041a0:	46bd      	mov	sp, r7
 80041a2:	b002      	add	sp, #8
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b084      	sub	sp, #16
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c0:	2200      	movs	r2, #0
 80041c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d0:	2200      	movs	r2, #0
 80041d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	0018      	movs	r0, r3
 80041d8:	f7ff ff9a 	bl	8004110 <I2C_TreatErrorCallback>
}
 80041dc:	46c0      	nop			; (mov r8, r8)
 80041de:	46bd      	mov	sp, r7
 80041e0:	b004      	add	sp, #16
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	603b      	str	r3, [r7, #0]
 80041f0:	1dfb      	adds	r3, r7, #7
 80041f2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041f4:	e030      	b.n	8004258 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	3301      	adds	r3, #1
 80041fa:	d02d      	beq.n	8004258 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fc:	f7fe fbc4 	bl	8002988 <HAL_GetTick>
 8004200:	0002      	movs	r2, r0
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d302      	bcc.n	8004212 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d122      	bne.n	8004258 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	4013      	ands	r3, r2
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	425a      	negs	r2, r3
 8004222:	4153      	adcs	r3, r2
 8004224:	b2db      	uxtb	r3, r3
 8004226:	001a      	movs	r2, r3
 8004228:	1dfb      	adds	r3, r7, #7
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d113      	bne.n	8004258 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004234:	2220      	movs	r2, #32
 8004236:	431a      	orrs	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2241      	movs	r2, #65	; 0x41
 8004240:	2120      	movs	r1, #32
 8004242:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2242      	movs	r2, #66	; 0x42
 8004248:	2100      	movs	r1, #0
 800424a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2240      	movs	r2, #64	; 0x40
 8004250:	2100      	movs	r1, #0
 8004252:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e00f      	b.n	8004278 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	4013      	ands	r3, r2
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	425a      	negs	r2, r3
 8004268:	4153      	adcs	r3, r2
 800426a:	b2db      	uxtb	r3, r3
 800426c:	001a      	movs	r2, r3
 800426e:	1dfb      	adds	r3, r7, #7
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	429a      	cmp	r2, r3
 8004274:	d0bf      	beq.n	80041f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	0018      	movs	r0, r3
 800427a:	46bd      	mov	sp, r7
 800427c:	b004      	add	sp, #16
 800427e:	bd80      	pop	{r7, pc}

08004280 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800428c:	e032      	b.n	80042f4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	68b9      	ldr	r1, [r7, #8]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	0018      	movs	r0, r3
 8004296:	f000 f87d 	bl	8004394 <I2C_IsErrorOccurred>
 800429a:	1e03      	subs	r3, r0, #0
 800429c:	d001      	beq.n	80042a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e030      	b.n	8004304 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	3301      	adds	r3, #1
 80042a6:	d025      	beq.n	80042f4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a8:	f7fe fb6e 	bl	8002988 <HAL_GetTick>
 80042ac:	0002      	movs	r2, r0
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d302      	bcc.n	80042be <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d11a      	bne.n	80042f4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	2202      	movs	r2, #2
 80042c6:	4013      	ands	r3, r2
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d013      	beq.n	80042f4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d0:	2220      	movs	r2, #32
 80042d2:	431a      	orrs	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2241      	movs	r2, #65	; 0x41
 80042dc:	2120      	movs	r1, #32
 80042de:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2242      	movs	r2, #66	; 0x42
 80042e4:	2100      	movs	r1, #0
 80042e6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2240      	movs	r2, #64	; 0x40
 80042ec:	2100      	movs	r1, #0
 80042ee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e007      	b.n	8004304 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	2202      	movs	r2, #2
 80042fc:	4013      	ands	r3, r2
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d1c5      	bne.n	800428e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	0018      	movs	r0, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	b004      	add	sp, #16
 800430a:	bd80      	pop	{r7, pc}

0800430c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004318:	e02f      	b.n	800437a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	68b9      	ldr	r1, [r7, #8]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	0018      	movs	r0, r3
 8004322:	f000 f837 	bl	8004394 <I2C_IsErrorOccurred>
 8004326:	1e03      	subs	r3, r0, #0
 8004328:	d001      	beq.n	800432e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e02d      	b.n	800438a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800432e:	f7fe fb2b 	bl	8002988 <HAL_GetTick>
 8004332:	0002      	movs	r2, r0
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	429a      	cmp	r2, r3
 800433c:	d302      	bcc.n	8004344 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d11a      	bne.n	800437a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	2220      	movs	r2, #32
 800434c:	4013      	ands	r3, r2
 800434e:	2b20      	cmp	r3, #32
 8004350:	d013      	beq.n	800437a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004356:	2220      	movs	r2, #32
 8004358:	431a      	orrs	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2241      	movs	r2, #65	; 0x41
 8004362:	2120      	movs	r1, #32
 8004364:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2242      	movs	r2, #66	; 0x42
 800436a:	2100      	movs	r1, #0
 800436c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2240      	movs	r2, #64	; 0x40
 8004372:	2100      	movs	r1, #0
 8004374:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e007      	b.n	800438a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	2220      	movs	r2, #32
 8004382:	4013      	ands	r3, r2
 8004384:	2b20      	cmp	r3, #32
 8004386:	d1c8      	bne.n	800431a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	0018      	movs	r0, r3
 800438c:	46bd      	mov	sp, r7
 800438e:	b004      	add	sp, #16
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004394:	b590      	push	{r4, r7, lr}
 8004396:	b08b      	sub	sp, #44	; 0x2c
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043a0:	2327      	movs	r3, #39	; 0x27
 80043a2:	18fb      	adds	r3, r7, r3
 80043a4:	2200      	movs	r2, #0
 80043a6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80043b0:	2300      	movs	r3, #0
 80043b2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	2210      	movs	r2, #16
 80043bc:	4013      	ands	r3, r2
 80043be:	d100      	bne.n	80043c2 <I2C_IsErrorOccurred+0x2e>
 80043c0:	e082      	b.n	80044c8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2210      	movs	r2, #16
 80043c8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043ca:	e060      	b.n	800448e <I2C_IsErrorOccurred+0xfa>
 80043cc:	2427      	movs	r4, #39	; 0x27
 80043ce:	193b      	adds	r3, r7, r4
 80043d0:	193a      	adds	r2, r7, r4
 80043d2:	7812      	ldrb	r2, [r2, #0]
 80043d4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	3301      	adds	r3, #1
 80043da:	d058      	beq.n	800448e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043dc:	f7fe fad4 	bl	8002988 <HAL_GetTick>
 80043e0:	0002      	movs	r2, r0
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d306      	bcc.n	80043fa <I2C_IsErrorOccurred+0x66>
 80043ec:	193b      	adds	r3, r7, r4
 80043ee:	193a      	adds	r2, r7, r4
 80043f0:	7812      	ldrb	r2, [r2, #0]
 80043f2:	701a      	strb	r2, [r3, #0]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d149      	bne.n	800448e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	2380      	movs	r3, #128	; 0x80
 8004402:	01db      	lsls	r3, r3, #7
 8004404:	4013      	ands	r3, r2
 8004406:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004408:	2013      	movs	r0, #19
 800440a:	183b      	adds	r3, r7, r0
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	2142      	movs	r1, #66	; 0x42
 8004410:	5c52      	ldrb	r2, [r2, r1]
 8004412:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699a      	ldr	r2, [r3, #24]
 800441a:	2380      	movs	r3, #128	; 0x80
 800441c:	021b      	lsls	r3, r3, #8
 800441e:	401a      	ands	r2, r3
 8004420:	2380      	movs	r3, #128	; 0x80
 8004422:	021b      	lsls	r3, r3, #8
 8004424:	429a      	cmp	r2, r3
 8004426:	d126      	bne.n	8004476 <I2C_IsErrorOccurred+0xe2>
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	2380      	movs	r3, #128	; 0x80
 800442c:	01db      	lsls	r3, r3, #7
 800442e:	429a      	cmp	r2, r3
 8004430:	d021      	beq.n	8004476 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8004432:	183b      	adds	r3, r7, r0
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	2b20      	cmp	r3, #32
 8004438:	d01d      	beq.n	8004476 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2180      	movs	r1, #128	; 0x80
 8004446:	01c9      	lsls	r1, r1, #7
 8004448:	430a      	orrs	r2, r1
 800444a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800444c:	f7fe fa9c 	bl	8002988 <HAL_GetTick>
 8004450:	0003      	movs	r3, r0
 8004452:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004454:	e00f      	b.n	8004476 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004456:	f7fe fa97 	bl	8002988 <HAL_GetTick>
 800445a:	0002      	movs	r2, r0
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b19      	cmp	r3, #25
 8004462:	d908      	bls.n	8004476 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	2220      	movs	r2, #32
 8004468:	4313      	orrs	r3, r2
 800446a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800446c:	2327      	movs	r3, #39	; 0x27
 800446e:	18fb      	adds	r3, r7, r3
 8004470:	2201      	movs	r2, #1
 8004472:	701a      	strb	r2, [r3, #0]

              break;
 8004474:	e00b      	b.n	800448e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	2220      	movs	r2, #32
 800447e:	4013      	ands	r3, r2
 8004480:	2127      	movs	r1, #39	; 0x27
 8004482:	187a      	adds	r2, r7, r1
 8004484:	1879      	adds	r1, r7, r1
 8004486:	7809      	ldrb	r1, [r1, #0]
 8004488:	7011      	strb	r1, [r2, #0]
 800448a:	2b20      	cmp	r3, #32
 800448c:	d1e3      	bne.n	8004456 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	2220      	movs	r2, #32
 8004496:	4013      	ands	r3, r2
 8004498:	2b20      	cmp	r3, #32
 800449a:	d004      	beq.n	80044a6 <I2C_IsErrorOccurred+0x112>
 800449c:	2327      	movs	r3, #39	; 0x27
 800449e:	18fb      	adds	r3, r7, r3
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d092      	beq.n	80043cc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80044a6:	2327      	movs	r3, #39	; 0x27
 80044a8:	18fb      	adds	r3, r7, r3
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d103      	bne.n	80044b8 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2220      	movs	r2, #32
 80044b6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	2204      	movs	r2, #4
 80044bc:	4313      	orrs	r3, r2
 80044be:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80044c0:	2327      	movs	r3, #39	; 0x27
 80044c2:	18fb      	adds	r3, r7, r3
 80044c4:	2201      	movs	r2, #1
 80044c6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	2380      	movs	r3, #128	; 0x80
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	4013      	ands	r3, r2
 80044d8:	d00c      	beq.n	80044f4 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	2201      	movs	r2, #1
 80044de:	4313      	orrs	r3, r2
 80044e0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2280      	movs	r2, #128	; 0x80
 80044e8:	0052      	lsls	r2, r2, #1
 80044ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044ec:	2327      	movs	r3, #39	; 0x27
 80044ee:	18fb      	adds	r3, r7, r3
 80044f0:	2201      	movs	r2, #1
 80044f2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	2380      	movs	r3, #128	; 0x80
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	4013      	ands	r3, r2
 80044fc:	d00c      	beq.n	8004518 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	2208      	movs	r2, #8
 8004502:	4313      	orrs	r3, r2
 8004504:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2280      	movs	r2, #128	; 0x80
 800450c:	00d2      	lsls	r2, r2, #3
 800450e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004510:	2327      	movs	r3, #39	; 0x27
 8004512:	18fb      	adds	r3, r7, r3
 8004514:	2201      	movs	r2, #1
 8004516:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	2380      	movs	r3, #128	; 0x80
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4013      	ands	r3, r2
 8004520:	d00c      	beq.n	800453c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	2202      	movs	r2, #2
 8004526:	4313      	orrs	r3, r2
 8004528:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2280      	movs	r2, #128	; 0x80
 8004530:	0092      	lsls	r2, r2, #2
 8004532:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004534:	2327      	movs	r3, #39	; 0x27
 8004536:	18fb      	adds	r3, r7, r3
 8004538:	2201      	movs	r2, #1
 800453a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800453c:	2327      	movs	r3, #39	; 0x27
 800453e:	18fb      	adds	r3, r7, r3
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d01d      	beq.n	8004582 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	0018      	movs	r0, r3
 800454a:	f7ff fe0a 	bl	8004162 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	490d      	ldr	r1, [pc, #52]	; (8004590 <I2C_IsErrorOccurred+0x1fc>)
 800455a:	400a      	ands	r2, r1
 800455c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	431a      	orrs	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2241      	movs	r2, #65	; 0x41
 800456e:	2120      	movs	r1, #32
 8004570:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2242      	movs	r2, #66	; 0x42
 8004576:	2100      	movs	r1, #0
 8004578:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2240      	movs	r2, #64	; 0x40
 800457e:	2100      	movs	r1, #0
 8004580:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004582:	2327      	movs	r3, #39	; 0x27
 8004584:	18fb      	adds	r3, r7, r3
 8004586:	781b      	ldrb	r3, [r3, #0]
}
 8004588:	0018      	movs	r0, r3
 800458a:	46bd      	mov	sp, r7
 800458c:	b00b      	add	sp, #44	; 0x2c
 800458e:	bd90      	pop	{r4, r7, pc}
 8004590:	fe00e800 	.word	0xfe00e800

08004594 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004594:	b590      	push	{r4, r7, lr}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	0008      	movs	r0, r1
 800459e:	0011      	movs	r1, r2
 80045a0:	607b      	str	r3, [r7, #4]
 80045a2:	240a      	movs	r4, #10
 80045a4:	193b      	adds	r3, r7, r4
 80045a6:	1c02      	adds	r2, r0, #0
 80045a8:	801a      	strh	r2, [r3, #0]
 80045aa:	2009      	movs	r0, #9
 80045ac:	183b      	adds	r3, r7, r0
 80045ae:	1c0a      	adds	r2, r1, #0
 80045b0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045b2:	193b      	adds	r3, r7, r4
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	059b      	lsls	r3, r3, #22
 80045b8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045ba:	183b      	adds	r3, r7, r0
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	0419      	lsls	r1, r3, #16
 80045c0:	23ff      	movs	r3, #255	; 0xff
 80045c2:	041b      	lsls	r3, r3, #16
 80045c4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045c6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ce:	4313      	orrs	r3, r2
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	085b      	lsrs	r3, r3, #1
 80045d4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045de:	0d51      	lsrs	r1, r2, #21
 80045e0:	2280      	movs	r2, #128	; 0x80
 80045e2:	00d2      	lsls	r2, r2, #3
 80045e4:	400a      	ands	r2, r1
 80045e6:	4907      	ldr	r1, [pc, #28]	; (8004604 <I2C_TransferConfig+0x70>)
 80045e8:	430a      	orrs	r2, r1
 80045ea:	43d2      	mvns	r2, r2
 80045ec:	401a      	ands	r2, r3
 80045ee:	0011      	movs	r1, r2
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80045fa:	46c0      	nop			; (mov r8, r8)
 80045fc:	46bd      	mov	sp, r7
 80045fe:	b007      	add	sp, #28
 8004600:	bd90      	pop	{r4, r7, pc}
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	03ff63ff 	.word	0x03ff63ff

08004608 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	000a      	movs	r2, r1
 8004612:	1cbb      	adds	r3, r7, #2
 8004614:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800461a:	1cbb      	adds	r3, r7, #2
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	2201      	movs	r2, #1
 8004620:	4013      	ands	r3, r2
 8004622:	d010      	beq.n	8004646 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2242      	movs	r2, #66	; 0x42
 8004628:	4313      	orrs	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2241      	movs	r2, #65	; 0x41
 8004630:	5c9b      	ldrb	r3, [r3, r2]
 8004632:	b2db      	uxtb	r3, r3
 8004634:	001a      	movs	r2, r3
 8004636:	2328      	movs	r3, #40	; 0x28
 8004638:	4013      	ands	r3, r2
 800463a:	2b28      	cmp	r3, #40	; 0x28
 800463c:	d003      	beq.n	8004646 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	22b0      	movs	r2, #176	; 0xb0
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004646:	1cbb      	adds	r3, r7, #2
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	2202      	movs	r2, #2
 800464c:	4013      	ands	r3, r2
 800464e:	d010      	beq.n	8004672 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2244      	movs	r2, #68	; 0x44
 8004654:	4313      	orrs	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2241      	movs	r2, #65	; 0x41
 800465c:	5c9b      	ldrb	r3, [r3, r2]
 800465e:	b2db      	uxtb	r3, r3
 8004660:	001a      	movs	r2, r3
 8004662:	2328      	movs	r3, #40	; 0x28
 8004664:	4013      	ands	r3, r2
 8004666:	2b28      	cmp	r3, #40	; 0x28
 8004668:	d003      	beq.n	8004672 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	22b0      	movs	r2, #176	; 0xb0
 800466e:	4313      	orrs	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004672:	1cbb      	adds	r3, r7, #2
 8004674:	2200      	movs	r2, #0
 8004676:	5e9b      	ldrsh	r3, [r3, r2]
 8004678:	2b00      	cmp	r3, #0
 800467a:	da03      	bge.n	8004684 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	22b8      	movs	r2, #184	; 0xb8
 8004680:	4313      	orrs	r3, r2
 8004682:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004684:	1cbb      	adds	r3, r7, #2
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	2b10      	cmp	r3, #16
 800468a:	d103      	bne.n	8004694 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2290      	movs	r2, #144	; 0x90
 8004690:	4313      	orrs	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004694:	1cbb      	adds	r3, r7, #2
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	2b20      	cmp	r3, #32
 800469a:	d103      	bne.n	80046a4 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2220      	movs	r2, #32
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80046a4:	1cbb      	adds	r3, r7, #2
 80046a6:	881b      	ldrh	r3, [r3, #0]
 80046a8:	2b40      	cmp	r3, #64	; 0x40
 80046aa:	d103      	bne.n	80046b4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2240      	movs	r2, #64	; 0x40
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	43d9      	mvns	r1, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	400a      	ands	r2, r1
 80046c4:	601a      	str	r2, [r3, #0]
}
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b004      	add	sp, #16
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2241      	movs	r2, #65	; 0x41
 80046de:	5c9b      	ldrb	r3, [r3, r2]
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b20      	cmp	r3, #32
 80046e4:	d138      	bne.n	8004758 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2240      	movs	r2, #64	; 0x40
 80046ea:	5c9b      	ldrb	r3, [r3, r2]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e032      	b.n	800475a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2240      	movs	r2, #64	; 0x40
 80046f8:	2101      	movs	r1, #1
 80046fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2241      	movs	r2, #65	; 0x41
 8004700:	2124      	movs	r1, #36	; 0x24
 8004702:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2101      	movs	r1, #1
 8004710:	438a      	bics	r2, r1
 8004712:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4911      	ldr	r1, [pc, #68]	; (8004764 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004720:	400a      	ands	r2, r1
 8004722:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6819      	ldr	r1, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2101      	movs	r1, #1
 8004740:	430a      	orrs	r2, r1
 8004742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2241      	movs	r2, #65	; 0x41
 8004748:	2120      	movs	r1, #32
 800474a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2240      	movs	r2, #64	; 0x40
 8004750:	2100      	movs	r1, #0
 8004752:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004754:	2300      	movs	r3, #0
 8004756:	e000      	b.n	800475a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004758:	2302      	movs	r3, #2
  }
}
 800475a:	0018      	movs	r0, r3
 800475c:	46bd      	mov	sp, r7
 800475e:	b002      	add	sp, #8
 8004760:	bd80      	pop	{r7, pc}
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	ffffefff 	.word	0xffffefff

08004768 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2241      	movs	r2, #65	; 0x41
 8004776:	5c9b      	ldrb	r3, [r3, r2]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b20      	cmp	r3, #32
 800477c:	d139      	bne.n	80047f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2240      	movs	r2, #64	; 0x40
 8004782:	5c9b      	ldrb	r3, [r3, r2]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d101      	bne.n	800478c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004788:	2302      	movs	r3, #2
 800478a:	e033      	b.n	80047f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2240      	movs	r2, #64	; 0x40
 8004790:	2101      	movs	r1, #1
 8004792:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2241      	movs	r2, #65	; 0x41
 8004798:	2124      	movs	r1, #36	; 0x24
 800479a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2101      	movs	r1, #1
 80047a8:	438a      	bics	r2, r1
 80047aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4a11      	ldr	r2, [pc, #68]	; (80047fc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80047b8:	4013      	ands	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	021b      	lsls	r3, r3, #8
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2101      	movs	r1, #1
 80047da:	430a      	orrs	r2, r1
 80047dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2241      	movs	r2, #65	; 0x41
 80047e2:	2120      	movs	r1, #32
 80047e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2240      	movs	r2, #64	; 0x40
 80047ea:	2100      	movs	r1, #0
 80047ec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	e000      	b.n	80047f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047f2:	2302      	movs	r3, #2
  }
}
 80047f4:	0018      	movs	r0, r3
 80047f6:	46bd      	mov	sp, r7
 80047f8:	b004      	add	sp, #16
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	fffff0ff 	.word	0xfffff0ff

08004800 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004800:	b5b0      	push	{r4, r5, r7, lr}
 8004802:	b08a      	sub	sp, #40	; 0x28
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d102      	bne.n	8004814 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	f000 fb6c 	bl	8004eec <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004814:	4bc8      	ldr	r3, [pc, #800]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	220c      	movs	r2, #12
 800481a:	4013      	ands	r3, r2
 800481c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800481e:	4bc6      	ldr	r3, [pc, #792]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	2380      	movs	r3, #128	; 0x80
 8004824:	025b      	lsls	r3, r3, #9
 8004826:	4013      	ands	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2201      	movs	r2, #1
 8004830:	4013      	ands	r3, r2
 8004832:	d100      	bne.n	8004836 <HAL_RCC_OscConfig+0x36>
 8004834:	e07d      	b.n	8004932 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	2b08      	cmp	r3, #8
 800483a:	d007      	beq.n	800484c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	2b0c      	cmp	r3, #12
 8004840:	d112      	bne.n	8004868 <HAL_RCC_OscConfig+0x68>
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	025b      	lsls	r3, r3, #9
 8004848:	429a      	cmp	r2, r3
 800484a:	d10d      	bne.n	8004868 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800484c:	4bba      	ldr	r3, [pc, #744]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	2380      	movs	r3, #128	; 0x80
 8004852:	029b      	lsls	r3, r3, #10
 8004854:	4013      	ands	r3, r2
 8004856:	d100      	bne.n	800485a <HAL_RCC_OscConfig+0x5a>
 8004858:	e06a      	b.n	8004930 <HAL_RCC_OscConfig+0x130>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d166      	bne.n	8004930 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	f000 fb42 	bl	8004eec <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	2380      	movs	r3, #128	; 0x80
 800486e:	025b      	lsls	r3, r3, #9
 8004870:	429a      	cmp	r2, r3
 8004872:	d107      	bne.n	8004884 <HAL_RCC_OscConfig+0x84>
 8004874:	4bb0      	ldr	r3, [pc, #704]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	4baf      	ldr	r3, [pc, #700]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 800487a:	2180      	movs	r1, #128	; 0x80
 800487c:	0249      	lsls	r1, r1, #9
 800487e:	430a      	orrs	r2, r1
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	e027      	b.n	80048d4 <HAL_RCC_OscConfig+0xd4>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	23a0      	movs	r3, #160	; 0xa0
 800488a:	02db      	lsls	r3, r3, #11
 800488c:	429a      	cmp	r2, r3
 800488e:	d10e      	bne.n	80048ae <HAL_RCC_OscConfig+0xae>
 8004890:	4ba9      	ldr	r3, [pc, #676]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	4ba8      	ldr	r3, [pc, #672]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 8004896:	2180      	movs	r1, #128	; 0x80
 8004898:	02c9      	lsls	r1, r1, #11
 800489a:	430a      	orrs	r2, r1
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	4ba6      	ldr	r3, [pc, #664]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	4ba5      	ldr	r3, [pc, #660]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 80048a4:	2180      	movs	r1, #128	; 0x80
 80048a6:	0249      	lsls	r1, r1, #9
 80048a8:	430a      	orrs	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	e012      	b.n	80048d4 <HAL_RCC_OscConfig+0xd4>
 80048ae:	4ba2      	ldr	r3, [pc, #648]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	4ba1      	ldr	r3, [pc, #644]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 80048b4:	49a1      	ldr	r1, [pc, #644]	; (8004b3c <HAL_RCC_OscConfig+0x33c>)
 80048b6:	400a      	ands	r2, r1
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	4b9f      	ldr	r3, [pc, #636]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	2380      	movs	r3, #128	; 0x80
 80048c0:	025b      	lsls	r3, r3, #9
 80048c2:	4013      	ands	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4b9b      	ldr	r3, [pc, #620]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	4b9a      	ldr	r3, [pc, #616]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 80048ce:	499c      	ldr	r1, [pc, #624]	; (8004b40 <HAL_RCC_OscConfig+0x340>)
 80048d0:	400a      	ands	r2, r1
 80048d2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d014      	beq.n	8004906 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048dc:	f7fe f854 	bl	8002988 <HAL_GetTick>
 80048e0:	0003      	movs	r3, r0
 80048e2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048e6:	f7fe f84f 	bl	8002988 <HAL_GetTick>
 80048ea:	0002      	movs	r2, r0
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b64      	cmp	r3, #100	; 0x64
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e2f9      	b.n	8004eec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048f8:	4b8f      	ldr	r3, [pc, #572]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	2380      	movs	r3, #128	; 0x80
 80048fe:	029b      	lsls	r3, r3, #10
 8004900:	4013      	ands	r3, r2
 8004902:	d0f0      	beq.n	80048e6 <HAL_RCC_OscConfig+0xe6>
 8004904:	e015      	b.n	8004932 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004906:	f7fe f83f 	bl	8002988 <HAL_GetTick>
 800490a:	0003      	movs	r3, r0
 800490c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004910:	f7fe f83a 	bl	8002988 <HAL_GetTick>
 8004914:	0002      	movs	r2, r0
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b64      	cmp	r3, #100	; 0x64
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e2e4      	b.n	8004eec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004922:	4b85      	ldr	r3, [pc, #532]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	2380      	movs	r3, #128	; 0x80
 8004928:	029b      	lsls	r3, r3, #10
 800492a:	4013      	ands	r3, r2
 800492c:	d1f0      	bne.n	8004910 <HAL_RCC_OscConfig+0x110>
 800492e:	e000      	b.n	8004932 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004930:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2202      	movs	r2, #2
 8004938:	4013      	ands	r3, r2
 800493a:	d100      	bne.n	800493e <HAL_RCC_OscConfig+0x13e>
 800493c:	e099      	b.n	8004a72 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	2220      	movs	r2, #32
 8004948:	4013      	ands	r3, r2
 800494a:	d009      	beq.n	8004960 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800494c:	4b7a      	ldr	r3, [pc, #488]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	4b79      	ldr	r3, [pc, #484]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 8004952:	2120      	movs	r1, #32
 8004954:	430a      	orrs	r2, r1
 8004956:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	2220      	movs	r2, #32
 800495c:	4393      	bics	r3, r2
 800495e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	2b04      	cmp	r3, #4
 8004964:	d005      	beq.n	8004972 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	2b0c      	cmp	r3, #12
 800496a:	d13e      	bne.n	80049ea <HAL_RCC_OscConfig+0x1ea>
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d13b      	bne.n	80049ea <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004972:	4b71      	ldr	r3, [pc, #452]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2204      	movs	r2, #4
 8004978:	4013      	ands	r3, r2
 800497a:	d004      	beq.n	8004986 <HAL_RCC_OscConfig+0x186>
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e2b2      	b.n	8004eec <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004986:	4b6c      	ldr	r3, [pc, #432]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	4a6e      	ldr	r2, [pc, #440]	; (8004b44 <HAL_RCC_OscConfig+0x344>)
 800498c:	4013      	ands	r3, r2
 800498e:	0019      	movs	r1, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	021a      	lsls	r2, r3, #8
 8004996:	4b68      	ldr	r3, [pc, #416]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 8004998:	430a      	orrs	r2, r1
 800499a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800499c:	4b66      	ldr	r3, [pc, #408]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2209      	movs	r2, #9
 80049a2:	4393      	bics	r3, r2
 80049a4:	0019      	movs	r1, r3
 80049a6:	4b64      	ldr	r3, [pc, #400]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 80049a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049aa:	430a      	orrs	r2, r1
 80049ac:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049ae:	f000 fbeb 	bl	8005188 <HAL_RCC_GetSysClockFreq>
 80049b2:	0001      	movs	r1, r0
 80049b4:	4b60      	ldr	r3, [pc, #384]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	091b      	lsrs	r3, r3, #4
 80049ba:	220f      	movs	r2, #15
 80049bc:	4013      	ands	r3, r2
 80049be:	4a62      	ldr	r2, [pc, #392]	; (8004b48 <HAL_RCC_OscConfig+0x348>)
 80049c0:	5cd3      	ldrb	r3, [r2, r3]
 80049c2:	000a      	movs	r2, r1
 80049c4:	40da      	lsrs	r2, r3
 80049c6:	4b61      	ldr	r3, [pc, #388]	; (8004b4c <HAL_RCC_OscConfig+0x34c>)
 80049c8:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80049ca:	4b61      	ldr	r3, [pc, #388]	; (8004b50 <HAL_RCC_OscConfig+0x350>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2513      	movs	r5, #19
 80049d0:	197c      	adds	r4, r7, r5
 80049d2:	0018      	movs	r0, r3
 80049d4:	f7fd ff92 	bl	80028fc <HAL_InitTick>
 80049d8:	0003      	movs	r3, r0
 80049da:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80049dc:	197b      	adds	r3, r7, r5
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d046      	beq.n	8004a72 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80049e4:	197b      	adds	r3, r7, r5
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	e280      	b.n	8004eec <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d027      	beq.n	8004a40 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80049f0:	4b51      	ldr	r3, [pc, #324]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2209      	movs	r2, #9
 80049f6:	4393      	bics	r3, r2
 80049f8:	0019      	movs	r1, r3
 80049fa:	4b4f      	ldr	r3, [pc, #316]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 80049fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049fe:	430a      	orrs	r2, r1
 8004a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a02:	f7fd ffc1 	bl	8002988 <HAL_GetTick>
 8004a06:	0003      	movs	r3, r0
 8004a08:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a0c:	f7fd ffbc 	bl	8002988 <HAL_GetTick>
 8004a10:	0002      	movs	r2, r0
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e266      	b.n	8004eec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a1e:	4b46      	ldr	r3, [pc, #280]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2204      	movs	r2, #4
 8004a24:	4013      	ands	r3, r2
 8004a26:	d0f1      	beq.n	8004a0c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a28:	4b43      	ldr	r3, [pc, #268]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	4a45      	ldr	r2, [pc, #276]	; (8004b44 <HAL_RCC_OscConfig+0x344>)
 8004a2e:	4013      	ands	r3, r2
 8004a30:	0019      	movs	r1, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	021a      	lsls	r2, r3, #8
 8004a38:	4b3f      	ldr	r3, [pc, #252]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
 8004a3e:	e018      	b.n	8004a72 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a40:	4b3d      	ldr	r3, [pc, #244]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	4b3c      	ldr	r3, [pc, #240]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 8004a46:	2101      	movs	r1, #1
 8004a48:	438a      	bics	r2, r1
 8004a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4c:	f7fd ff9c 	bl	8002988 <HAL_GetTick>
 8004a50:	0003      	movs	r3, r0
 8004a52:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a54:	e008      	b.n	8004a68 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a56:	f7fd ff97 	bl	8002988 <HAL_GetTick>
 8004a5a:	0002      	movs	r2, r0
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e241      	b.n	8004eec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a68:	4b33      	ldr	r3, [pc, #204]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2204      	movs	r2, #4
 8004a6e:	4013      	ands	r3, r2
 8004a70:	d1f1      	bne.n	8004a56 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2210      	movs	r2, #16
 8004a78:	4013      	ands	r3, r2
 8004a7a:	d100      	bne.n	8004a7e <HAL_RCC_OscConfig+0x27e>
 8004a7c:	e0a1      	b.n	8004bc2 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d140      	bne.n	8004b06 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a84:	4b2c      	ldr	r3, [pc, #176]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	2380      	movs	r3, #128	; 0x80
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	d005      	beq.n	8004a9c <HAL_RCC_OscConfig+0x29c>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e227      	b.n	8004eec <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a9c:	4b26      	ldr	r3, [pc, #152]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	4a2c      	ldr	r2, [pc, #176]	; (8004b54 <HAL_RCC_OscConfig+0x354>)
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	0019      	movs	r1, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1a      	ldr	r2, [r3, #32]
 8004aaa:	4b23      	ldr	r3, [pc, #140]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 8004aac:	430a      	orrs	r2, r1
 8004aae:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ab0:	4b21      	ldr	r3, [pc, #132]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	021b      	lsls	r3, r3, #8
 8004ab6:	0a19      	lsrs	r1, r3, #8
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	061a      	lsls	r2, r3, #24
 8004abe:	4b1e      	ldr	r3, [pc, #120]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	0b5b      	lsrs	r3, r3, #13
 8004aca:	3301      	adds	r3, #1
 8004acc:	2280      	movs	r2, #128	; 0x80
 8004ace:	0212      	lsls	r2, r2, #8
 8004ad0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004ad2:	4b19      	ldr	r3, [pc, #100]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	091b      	lsrs	r3, r3, #4
 8004ad8:	210f      	movs	r1, #15
 8004ada:	400b      	ands	r3, r1
 8004adc:	491a      	ldr	r1, [pc, #104]	; (8004b48 <HAL_RCC_OscConfig+0x348>)
 8004ade:	5ccb      	ldrb	r3, [r1, r3]
 8004ae0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004ae2:	4b1a      	ldr	r3, [pc, #104]	; (8004b4c <HAL_RCC_OscConfig+0x34c>)
 8004ae4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004ae6:	4b1a      	ldr	r3, [pc, #104]	; (8004b50 <HAL_RCC_OscConfig+0x350>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2513      	movs	r5, #19
 8004aec:	197c      	adds	r4, r7, r5
 8004aee:	0018      	movs	r0, r3
 8004af0:	f7fd ff04 	bl	80028fc <HAL_InitTick>
 8004af4:	0003      	movs	r3, r0
 8004af6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004af8:	197b      	adds	r3, r7, r5
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d060      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8004b00:	197b      	adds	r3, r7, r5
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	e1f2      	b.n	8004eec <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d03f      	beq.n	8004b8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b0e:	4b0a      	ldr	r3, [pc, #40]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <HAL_RCC_OscConfig+0x338>)
 8004b14:	2180      	movs	r1, #128	; 0x80
 8004b16:	0049      	lsls	r1, r1, #1
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b1c:	f7fd ff34 	bl	8002988 <HAL_GetTick>
 8004b20:	0003      	movs	r3, r0
 8004b22:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004b24:	e018      	b.n	8004b58 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b26:	f7fd ff2f 	bl	8002988 <HAL_GetTick>
 8004b2a:	0002      	movs	r2, r0
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d911      	bls.n	8004b58 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e1d9      	b.n	8004eec <HAL_RCC_OscConfig+0x6ec>
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	fffeffff 	.word	0xfffeffff
 8004b40:	fffbffff 	.word	0xfffbffff
 8004b44:	ffffe0ff 	.word	0xffffe0ff
 8004b48:	08007ae8 	.word	0x08007ae8
 8004b4c:	20000000 	.word	0x20000000
 8004b50:	20000004 	.word	0x20000004
 8004b54:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004b58:	4bc9      	ldr	r3, [pc, #804]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	2380      	movs	r3, #128	; 0x80
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4013      	ands	r3, r2
 8004b62:	d0e0      	beq.n	8004b26 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b64:	4bc6      	ldr	r3, [pc, #792]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	4ac6      	ldr	r2, [pc, #792]	; (8004e84 <HAL_RCC_OscConfig+0x684>)
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	0019      	movs	r1, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1a      	ldr	r2, [r3, #32]
 8004b72:	4bc3      	ldr	r3, [pc, #780]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004b74:	430a      	orrs	r2, r1
 8004b76:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b78:	4bc1      	ldr	r3, [pc, #772]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	021b      	lsls	r3, r3, #8
 8004b7e:	0a19      	lsrs	r1, r3, #8
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	061a      	lsls	r2, r3, #24
 8004b86:	4bbe      	ldr	r3, [pc, #760]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	605a      	str	r2, [r3, #4]
 8004b8c:	e019      	b.n	8004bc2 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b8e:	4bbc      	ldr	r3, [pc, #752]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	4bbb      	ldr	r3, [pc, #748]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004b94:	49bc      	ldr	r1, [pc, #752]	; (8004e88 <HAL_RCC_OscConfig+0x688>)
 8004b96:	400a      	ands	r2, r1
 8004b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9a:	f7fd fef5 	bl	8002988 <HAL_GetTick>
 8004b9e:	0003      	movs	r3, r0
 8004ba0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ba4:	f7fd fef0 	bl	8002988 <HAL_GetTick>
 8004ba8:	0002      	movs	r2, r0
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e19a      	b.n	8004eec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004bb6:	4bb2      	ldr	r3, [pc, #712]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	2380      	movs	r3, #128	; 0x80
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2208      	movs	r2, #8
 8004bc8:	4013      	ands	r3, r2
 8004bca:	d036      	beq.n	8004c3a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d019      	beq.n	8004c08 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bd4:	4baa      	ldr	r3, [pc, #680]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004bd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004bd8:	4ba9      	ldr	r3, [pc, #676]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004bda:	2101      	movs	r1, #1
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004be0:	f7fd fed2 	bl	8002988 <HAL_GetTick>
 8004be4:	0003      	movs	r3, r0
 8004be6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bea:	f7fd fecd 	bl	8002988 <HAL_GetTick>
 8004bee:	0002      	movs	r2, r0
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e177      	b.n	8004eec <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004bfc:	4ba0      	ldr	r3, [pc, #640]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c00:	2202      	movs	r2, #2
 8004c02:	4013      	ands	r3, r2
 8004c04:	d0f1      	beq.n	8004bea <HAL_RCC_OscConfig+0x3ea>
 8004c06:	e018      	b.n	8004c3a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c08:	4b9d      	ldr	r3, [pc, #628]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004c0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c0c:	4b9c      	ldr	r3, [pc, #624]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004c0e:	2101      	movs	r1, #1
 8004c10:	438a      	bics	r2, r1
 8004c12:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c14:	f7fd feb8 	bl	8002988 <HAL_GetTick>
 8004c18:	0003      	movs	r3, r0
 8004c1a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c1c:	e008      	b.n	8004c30 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c1e:	f7fd feb3 	bl	8002988 <HAL_GetTick>
 8004c22:	0002      	movs	r2, r0
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e15d      	b.n	8004eec <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c30:	4b93      	ldr	r3, [pc, #588]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c34:	2202      	movs	r2, #2
 8004c36:	4013      	ands	r3, r2
 8004c38:	d1f1      	bne.n	8004c1e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2204      	movs	r2, #4
 8004c40:	4013      	ands	r3, r2
 8004c42:	d100      	bne.n	8004c46 <HAL_RCC_OscConfig+0x446>
 8004c44:	e0ae      	b.n	8004da4 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c46:	2023      	movs	r0, #35	; 0x23
 8004c48:	183b      	adds	r3, r7, r0
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c4e:	4b8c      	ldr	r3, [pc, #560]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c52:	2380      	movs	r3, #128	; 0x80
 8004c54:	055b      	lsls	r3, r3, #21
 8004c56:	4013      	ands	r3, r2
 8004c58:	d109      	bne.n	8004c6e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c5a:	4b89      	ldr	r3, [pc, #548]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c5e:	4b88      	ldr	r3, [pc, #544]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004c60:	2180      	movs	r1, #128	; 0x80
 8004c62:	0549      	lsls	r1, r1, #21
 8004c64:	430a      	orrs	r2, r1
 8004c66:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004c68:	183b      	adds	r3, r7, r0
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c6e:	4b87      	ldr	r3, [pc, #540]	; (8004e8c <HAL_RCC_OscConfig+0x68c>)
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	2380      	movs	r3, #128	; 0x80
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	4013      	ands	r3, r2
 8004c78:	d11a      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c7a:	4b84      	ldr	r3, [pc, #528]	; (8004e8c <HAL_RCC_OscConfig+0x68c>)
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	4b83      	ldr	r3, [pc, #524]	; (8004e8c <HAL_RCC_OscConfig+0x68c>)
 8004c80:	2180      	movs	r1, #128	; 0x80
 8004c82:	0049      	lsls	r1, r1, #1
 8004c84:	430a      	orrs	r2, r1
 8004c86:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c88:	f7fd fe7e 	bl	8002988 <HAL_GetTick>
 8004c8c:	0003      	movs	r3, r0
 8004c8e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c90:	e008      	b.n	8004ca4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c92:	f7fd fe79 	bl	8002988 <HAL_GetTick>
 8004c96:	0002      	movs	r2, r0
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b64      	cmp	r3, #100	; 0x64
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e123      	b.n	8004eec <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca4:	4b79      	ldr	r3, [pc, #484]	; (8004e8c <HAL_RCC_OscConfig+0x68c>)
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	2380      	movs	r3, #128	; 0x80
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	4013      	ands	r3, r2
 8004cae:	d0f0      	beq.n	8004c92 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	2380      	movs	r3, #128	; 0x80
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d107      	bne.n	8004ccc <HAL_RCC_OscConfig+0x4cc>
 8004cbc:	4b70      	ldr	r3, [pc, #448]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004cbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cc0:	4b6f      	ldr	r3, [pc, #444]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004cc2:	2180      	movs	r1, #128	; 0x80
 8004cc4:	0049      	lsls	r1, r1, #1
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	651a      	str	r2, [r3, #80]	; 0x50
 8004cca:	e031      	b.n	8004d30 <HAL_RCC_OscConfig+0x530>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10c      	bne.n	8004cee <HAL_RCC_OscConfig+0x4ee>
 8004cd4:	4b6a      	ldr	r3, [pc, #424]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004cd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cd8:	4b69      	ldr	r3, [pc, #420]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004cda:	496b      	ldr	r1, [pc, #428]	; (8004e88 <HAL_RCC_OscConfig+0x688>)
 8004cdc:	400a      	ands	r2, r1
 8004cde:	651a      	str	r2, [r3, #80]	; 0x50
 8004ce0:	4b67      	ldr	r3, [pc, #412]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004ce2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ce4:	4b66      	ldr	r3, [pc, #408]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004ce6:	496a      	ldr	r1, [pc, #424]	; (8004e90 <HAL_RCC_OscConfig+0x690>)
 8004ce8:	400a      	ands	r2, r1
 8004cea:	651a      	str	r2, [r3, #80]	; 0x50
 8004cec:	e020      	b.n	8004d30 <HAL_RCC_OscConfig+0x530>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	23a0      	movs	r3, #160	; 0xa0
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d10e      	bne.n	8004d18 <HAL_RCC_OscConfig+0x518>
 8004cfa:	4b61      	ldr	r3, [pc, #388]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004cfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cfe:	4b60      	ldr	r3, [pc, #384]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004d00:	2180      	movs	r1, #128	; 0x80
 8004d02:	00c9      	lsls	r1, r1, #3
 8004d04:	430a      	orrs	r2, r1
 8004d06:	651a      	str	r2, [r3, #80]	; 0x50
 8004d08:	4b5d      	ldr	r3, [pc, #372]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004d0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d0c:	4b5c      	ldr	r3, [pc, #368]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004d0e:	2180      	movs	r1, #128	; 0x80
 8004d10:	0049      	lsls	r1, r1, #1
 8004d12:	430a      	orrs	r2, r1
 8004d14:	651a      	str	r2, [r3, #80]	; 0x50
 8004d16:	e00b      	b.n	8004d30 <HAL_RCC_OscConfig+0x530>
 8004d18:	4b59      	ldr	r3, [pc, #356]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004d1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d1c:	4b58      	ldr	r3, [pc, #352]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004d1e:	495a      	ldr	r1, [pc, #360]	; (8004e88 <HAL_RCC_OscConfig+0x688>)
 8004d20:	400a      	ands	r2, r1
 8004d22:	651a      	str	r2, [r3, #80]	; 0x50
 8004d24:	4b56      	ldr	r3, [pc, #344]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004d26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d28:	4b55      	ldr	r3, [pc, #340]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004d2a:	4959      	ldr	r1, [pc, #356]	; (8004e90 <HAL_RCC_OscConfig+0x690>)
 8004d2c:	400a      	ands	r2, r1
 8004d2e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d015      	beq.n	8004d64 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d38:	f7fd fe26 	bl	8002988 <HAL_GetTick>
 8004d3c:	0003      	movs	r3, r0
 8004d3e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d40:	e009      	b.n	8004d56 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d42:	f7fd fe21 	bl	8002988 <HAL_GetTick>
 8004d46:	0002      	movs	r2, r0
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	4a51      	ldr	r2, [pc, #324]	; (8004e94 <HAL_RCC_OscConfig+0x694>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e0ca      	b.n	8004eec <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d56:	4b4a      	ldr	r3, [pc, #296]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004d58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d5a:	2380      	movs	r3, #128	; 0x80
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4013      	ands	r3, r2
 8004d60:	d0ef      	beq.n	8004d42 <HAL_RCC_OscConfig+0x542>
 8004d62:	e014      	b.n	8004d8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d64:	f7fd fe10 	bl	8002988 <HAL_GetTick>
 8004d68:	0003      	movs	r3, r0
 8004d6a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d6c:	e009      	b.n	8004d82 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d6e:	f7fd fe0b 	bl	8002988 <HAL_GetTick>
 8004d72:	0002      	movs	r2, r0
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	4a46      	ldr	r2, [pc, #280]	; (8004e94 <HAL_RCC_OscConfig+0x694>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e0b4      	b.n	8004eec <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d82:	4b3f      	ldr	r3, [pc, #252]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004d84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d86:	2380      	movs	r3, #128	; 0x80
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	d1ef      	bne.n	8004d6e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d8e:	2323      	movs	r3, #35	; 0x23
 8004d90:	18fb      	adds	r3, r7, r3
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d105      	bne.n	8004da4 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d98:	4b39      	ldr	r3, [pc, #228]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004d9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d9c:	4b38      	ldr	r3, [pc, #224]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004d9e:	493e      	ldr	r1, [pc, #248]	; (8004e98 <HAL_RCC_OscConfig+0x698>)
 8004da0:	400a      	ands	r2, r1
 8004da2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d100      	bne.n	8004dae <HAL_RCC_OscConfig+0x5ae>
 8004dac:	e09d      	b.n	8004eea <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	2b0c      	cmp	r3, #12
 8004db2:	d100      	bne.n	8004db6 <HAL_RCC_OscConfig+0x5b6>
 8004db4:	e076      	b.n	8004ea4 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d145      	bne.n	8004e4a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dbe:	4b30      	ldr	r3, [pc, #192]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	4b2f      	ldr	r3, [pc, #188]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004dc4:	4935      	ldr	r1, [pc, #212]	; (8004e9c <HAL_RCC_OscConfig+0x69c>)
 8004dc6:	400a      	ands	r2, r1
 8004dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dca:	f7fd fddd 	bl	8002988 <HAL_GetTick>
 8004dce:	0003      	movs	r3, r0
 8004dd0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dd4:	f7fd fdd8 	bl	8002988 <HAL_GetTick>
 8004dd8:	0002      	movs	r2, r0
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e082      	b.n	8004eec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004de6:	4b26      	ldr	r3, [pc, #152]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	2380      	movs	r3, #128	; 0x80
 8004dec:	049b      	lsls	r3, r3, #18
 8004dee:	4013      	ands	r3, r2
 8004df0:	d1f0      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004df2:	4b23      	ldr	r3, [pc, #140]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	4a2a      	ldr	r2, [pc, #168]	; (8004ea0 <HAL_RCC_OscConfig+0x6a0>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	0019      	movs	r1, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	431a      	orrs	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	4b1c      	ldr	r3, [pc, #112]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e12:	4b1b      	ldr	r3, [pc, #108]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	4b1a      	ldr	r3, [pc, #104]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004e18:	2180      	movs	r1, #128	; 0x80
 8004e1a:	0449      	lsls	r1, r1, #17
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e20:	f7fd fdb2 	bl	8002988 <HAL_GetTick>
 8004e24:	0003      	movs	r3, r0
 8004e26:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e2a:	f7fd fdad 	bl	8002988 <HAL_GetTick>
 8004e2e:	0002      	movs	r2, r0
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e057      	b.n	8004eec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004e3c:	4b10      	ldr	r3, [pc, #64]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	2380      	movs	r3, #128	; 0x80
 8004e42:	049b      	lsls	r3, r3, #18
 8004e44:	4013      	ands	r3, r2
 8004e46:	d0f0      	beq.n	8004e2a <HAL_RCC_OscConfig+0x62a>
 8004e48:	e04f      	b.n	8004eea <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e4a:	4b0d      	ldr	r3, [pc, #52]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	4b0c      	ldr	r3, [pc, #48]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004e50:	4912      	ldr	r1, [pc, #72]	; (8004e9c <HAL_RCC_OscConfig+0x69c>)
 8004e52:	400a      	ands	r2, r1
 8004e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e56:	f7fd fd97 	bl	8002988 <HAL_GetTick>
 8004e5a:	0003      	movs	r3, r0
 8004e5c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e60:	f7fd fd92 	bl	8002988 <HAL_GetTick>
 8004e64:	0002      	movs	r2, r0
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e03c      	b.n	8004eec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004e72:	4b03      	ldr	r3, [pc, #12]	; (8004e80 <HAL_RCC_OscConfig+0x680>)
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	2380      	movs	r3, #128	; 0x80
 8004e78:	049b      	lsls	r3, r3, #18
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	d1f0      	bne.n	8004e60 <HAL_RCC_OscConfig+0x660>
 8004e7e:	e034      	b.n	8004eea <HAL_RCC_OscConfig+0x6ea>
 8004e80:	40021000 	.word	0x40021000
 8004e84:	ffff1fff 	.word	0xffff1fff
 8004e88:	fffffeff 	.word	0xfffffeff
 8004e8c:	40007000 	.word	0x40007000
 8004e90:	fffffbff 	.word	0xfffffbff
 8004e94:	00001388 	.word	0x00001388
 8004e98:	efffffff 	.word	0xefffffff
 8004e9c:	feffffff 	.word	0xfeffffff
 8004ea0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e01d      	b.n	8004eec <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004eb0:	4b10      	ldr	r3, [pc, #64]	; (8004ef4 <HAL_RCC_OscConfig+0x6f4>)
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	2380      	movs	r3, #128	; 0x80
 8004eba:	025b      	lsls	r3, r3, #9
 8004ebc:	401a      	ands	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d10f      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	23f0      	movs	r3, #240	; 0xf0
 8004eca:	039b      	lsls	r3, r3, #14
 8004ecc:	401a      	ands	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d107      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	23c0      	movs	r3, #192	; 0xc0
 8004eda:	041b      	lsls	r3, r3, #16
 8004edc:	401a      	ands	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d001      	beq.n	8004eea <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	0018      	movs	r0, r3
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	b00a      	add	sp, #40	; 0x28
 8004ef2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ef4:	40021000 	.word	0x40021000

08004ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ef8:	b5b0      	push	{r4, r5, r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e128      	b.n	800515e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f0c:	4b96      	ldr	r3, [pc, #600]	; (8005168 <HAL_RCC_ClockConfig+0x270>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2201      	movs	r2, #1
 8004f12:	4013      	ands	r3, r2
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d91e      	bls.n	8004f58 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1a:	4b93      	ldr	r3, [pc, #588]	; (8005168 <HAL_RCC_ClockConfig+0x270>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	4393      	bics	r3, r2
 8004f22:	0019      	movs	r1, r3
 8004f24:	4b90      	ldr	r3, [pc, #576]	; (8005168 <HAL_RCC_ClockConfig+0x270>)
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f2c:	f7fd fd2c 	bl	8002988 <HAL_GetTick>
 8004f30:	0003      	movs	r3, r0
 8004f32:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f34:	e009      	b.n	8004f4a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f36:	f7fd fd27 	bl	8002988 <HAL_GetTick>
 8004f3a:	0002      	movs	r2, r0
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	4a8a      	ldr	r2, [pc, #552]	; (800516c <HAL_RCC_ClockConfig+0x274>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e109      	b.n	800515e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f4a:	4b87      	ldr	r3, [pc, #540]	; (8005168 <HAL_RCC_ClockConfig+0x270>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	4013      	ands	r3, r2
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d1ee      	bne.n	8004f36 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	4013      	ands	r3, r2
 8004f60:	d009      	beq.n	8004f76 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f62:	4b83      	ldr	r3, [pc, #524]	; (8005170 <HAL_RCC_ClockConfig+0x278>)
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	22f0      	movs	r2, #240	; 0xf0
 8004f68:	4393      	bics	r3, r2
 8004f6a:	0019      	movs	r1, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	4b7f      	ldr	r3, [pc, #508]	; (8005170 <HAL_RCC_ClockConfig+0x278>)
 8004f72:	430a      	orrs	r2, r1
 8004f74:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	d100      	bne.n	8004f82 <HAL_RCC_ClockConfig+0x8a>
 8004f80:	e089      	b.n	8005096 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d107      	bne.n	8004f9a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f8a:	4b79      	ldr	r3, [pc, #484]	; (8005170 <HAL_RCC_ClockConfig+0x278>)
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	2380      	movs	r3, #128	; 0x80
 8004f90:	029b      	lsls	r3, r3, #10
 8004f92:	4013      	ands	r3, r2
 8004f94:	d120      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e0e1      	b.n	800515e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b03      	cmp	r3, #3
 8004fa0:	d107      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fa2:	4b73      	ldr	r3, [pc, #460]	; (8005170 <HAL_RCC_ClockConfig+0x278>)
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	2380      	movs	r3, #128	; 0x80
 8004fa8:	049b      	lsls	r3, r3, #18
 8004faa:	4013      	ands	r3, r2
 8004fac:	d114      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e0d5      	b.n	800515e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d106      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fba:	4b6d      	ldr	r3, [pc, #436]	; (8005170 <HAL_RCC_ClockConfig+0x278>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	d109      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0ca      	b.n	800515e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004fc8:	4b69      	ldr	r3, [pc, #420]	; (8005170 <HAL_RCC_ClockConfig+0x278>)
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	2380      	movs	r3, #128	; 0x80
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	d101      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e0c2      	b.n	800515e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fd8:	4b65      	ldr	r3, [pc, #404]	; (8005170 <HAL_RCC_ClockConfig+0x278>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	2203      	movs	r2, #3
 8004fde:	4393      	bics	r3, r2
 8004fe0:	0019      	movs	r1, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	4b62      	ldr	r3, [pc, #392]	; (8005170 <HAL_RCC_ClockConfig+0x278>)
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fec:	f7fd fccc 	bl	8002988 <HAL_GetTick>
 8004ff0:	0003      	movs	r3, r0
 8004ff2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d111      	bne.n	8005020 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ffc:	e009      	b.n	8005012 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ffe:	f7fd fcc3 	bl	8002988 <HAL_GetTick>
 8005002:	0002      	movs	r2, r0
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	4a58      	ldr	r2, [pc, #352]	; (800516c <HAL_RCC_ClockConfig+0x274>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e0a5      	b.n	800515e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005012:	4b57      	ldr	r3, [pc, #348]	; (8005170 <HAL_RCC_ClockConfig+0x278>)
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	220c      	movs	r2, #12
 8005018:	4013      	ands	r3, r2
 800501a:	2b08      	cmp	r3, #8
 800501c:	d1ef      	bne.n	8004ffe <HAL_RCC_ClockConfig+0x106>
 800501e:	e03a      	b.n	8005096 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	2b03      	cmp	r3, #3
 8005026:	d111      	bne.n	800504c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005028:	e009      	b.n	800503e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800502a:	f7fd fcad 	bl	8002988 <HAL_GetTick>
 800502e:	0002      	movs	r2, r0
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	4a4d      	ldr	r2, [pc, #308]	; (800516c <HAL_RCC_ClockConfig+0x274>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d901      	bls.n	800503e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e08f      	b.n	800515e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800503e:	4b4c      	ldr	r3, [pc, #304]	; (8005170 <HAL_RCC_ClockConfig+0x278>)
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	220c      	movs	r2, #12
 8005044:	4013      	ands	r3, r2
 8005046:	2b0c      	cmp	r3, #12
 8005048:	d1ef      	bne.n	800502a <HAL_RCC_ClockConfig+0x132>
 800504a:	e024      	b.n	8005096 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d11b      	bne.n	800508c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005054:	e009      	b.n	800506a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005056:	f7fd fc97 	bl	8002988 <HAL_GetTick>
 800505a:	0002      	movs	r2, r0
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	4a42      	ldr	r2, [pc, #264]	; (800516c <HAL_RCC_ClockConfig+0x274>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d901      	bls.n	800506a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e079      	b.n	800515e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800506a:	4b41      	ldr	r3, [pc, #260]	; (8005170 <HAL_RCC_ClockConfig+0x278>)
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	220c      	movs	r2, #12
 8005070:	4013      	ands	r3, r2
 8005072:	2b04      	cmp	r3, #4
 8005074:	d1ef      	bne.n	8005056 <HAL_RCC_ClockConfig+0x15e>
 8005076:	e00e      	b.n	8005096 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005078:	f7fd fc86 	bl	8002988 <HAL_GetTick>
 800507c:	0002      	movs	r2, r0
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	4a3a      	ldr	r2, [pc, #232]	; (800516c <HAL_RCC_ClockConfig+0x274>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d901      	bls.n	800508c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e068      	b.n	800515e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800508c:	4b38      	ldr	r3, [pc, #224]	; (8005170 <HAL_RCC_ClockConfig+0x278>)
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	220c      	movs	r2, #12
 8005092:	4013      	ands	r3, r2
 8005094:	d1f0      	bne.n	8005078 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005096:	4b34      	ldr	r3, [pc, #208]	; (8005168 <HAL_RCC_ClockConfig+0x270>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2201      	movs	r2, #1
 800509c:	4013      	ands	r3, r2
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d21e      	bcs.n	80050e2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050a4:	4b30      	ldr	r3, [pc, #192]	; (8005168 <HAL_RCC_ClockConfig+0x270>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2201      	movs	r2, #1
 80050aa:	4393      	bics	r3, r2
 80050ac:	0019      	movs	r1, r3
 80050ae:	4b2e      	ldr	r3, [pc, #184]	; (8005168 <HAL_RCC_ClockConfig+0x270>)
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80050b6:	f7fd fc67 	bl	8002988 <HAL_GetTick>
 80050ba:	0003      	movs	r3, r0
 80050bc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050be:	e009      	b.n	80050d4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c0:	f7fd fc62 	bl	8002988 <HAL_GetTick>
 80050c4:	0002      	movs	r2, r0
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	4a28      	ldr	r2, [pc, #160]	; (800516c <HAL_RCC_ClockConfig+0x274>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e044      	b.n	800515e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d4:	4b24      	ldr	r3, [pc, #144]	; (8005168 <HAL_RCC_ClockConfig+0x270>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2201      	movs	r2, #1
 80050da:	4013      	ands	r3, r2
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d1ee      	bne.n	80050c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2204      	movs	r2, #4
 80050e8:	4013      	ands	r3, r2
 80050ea:	d009      	beq.n	8005100 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050ec:	4b20      	ldr	r3, [pc, #128]	; (8005170 <HAL_RCC_ClockConfig+0x278>)
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	4a20      	ldr	r2, [pc, #128]	; (8005174 <HAL_RCC_ClockConfig+0x27c>)
 80050f2:	4013      	ands	r3, r2
 80050f4:	0019      	movs	r1, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	4b1d      	ldr	r3, [pc, #116]	; (8005170 <HAL_RCC_ClockConfig+0x278>)
 80050fc:	430a      	orrs	r2, r1
 80050fe:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2208      	movs	r2, #8
 8005106:	4013      	ands	r3, r2
 8005108:	d00a      	beq.n	8005120 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800510a:	4b19      	ldr	r3, [pc, #100]	; (8005170 <HAL_RCC_ClockConfig+0x278>)
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	4a1a      	ldr	r2, [pc, #104]	; (8005178 <HAL_RCC_ClockConfig+0x280>)
 8005110:	4013      	ands	r3, r2
 8005112:	0019      	movs	r1, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	00da      	lsls	r2, r3, #3
 800511a:	4b15      	ldr	r3, [pc, #84]	; (8005170 <HAL_RCC_ClockConfig+0x278>)
 800511c:	430a      	orrs	r2, r1
 800511e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005120:	f000 f832 	bl	8005188 <HAL_RCC_GetSysClockFreq>
 8005124:	0001      	movs	r1, r0
 8005126:	4b12      	ldr	r3, [pc, #72]	; (8005170 <HAL_RCC_ClockConfig+0x278>)
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	091b      	lsrs	r3, r3, #4
 800512c:	220f      	movs	r2, #15
 800512e:	4013      	ands	r3, r2
 8005130:	4a12      	ldr	r2, [pc, #72]	; (800517c <HAL_RCC_ClockConfig+0x284>)
 8005132:	5cd3      	ldrb	r3, [r2, r3]
 8005134:	000a      	movs	r2, r1
 8005136:	40da      	lsrs	r2, r3
 8005138:	4b11      	ldr	r3, [pc, #68]	; (8005180 <HAL_RCC_ClockConfig+0x288>)
 800513a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800513c:	4b11      	ldr	r3, [pc, #68]	; (8005184 <HAL_RCC_ClockConfig+0x28c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	250b      	movs	r5, #11
 8005142:	197c      	adds	r4, r7, r5
 8005144:	0018      	movs	r0, r3
 8005146:	f7fd fbd9 	bl	80028fc <HAL_InitTick>
 800514a:	0003      	movs	r3, r0
 800514c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800514e:	197b      	adds	r3, r7, r5
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005156:	197b      	adds	r3, r7, r5
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	e000      	b.n	800515e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	0018      	movs	r0, r3
 8005160:	46bd      	mov	sp, r7
 8005162:	b004      	add	sp, #16
 8005164:	bdb0      	pop	{r4, r5, r7, pc}
 8005166:	46c0      	nop			; (mov r8, r8)
 8005168:	40022000 	.word	0x40022000
 800516c:	00001388 	.word	0x00001388
 8005170:	40021000 	.word	0x40021000
 8005174:	fffff8ff 	.word	0xfffff8ff
 8005178:	ffffc7ff 	.word	0xffffc7ff
 800517c:	08007ae8 	.word	0x08007ae8
 8005180:	20000000 	.word	0x20000000
 8005184:	20000004 	.word	0x20000004

08005188 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005188:	b5b0      	push	{r4, r5, r7, lr}
 800518a:	b08e      	sub	sp, #56	; 0x38
 800518c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800518e:	4b4c      	ldr	r3, [pc, #304]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005196:	230c      	movs	r3, #12
 8005198:	4013      	ands	r3, r2
 800519a:	2b0c      	cmp	r3, #12
 800519c:	d014      	beq.n	80051c8 <HAL_RCC_GetSysClockFreq+0x40>
 800519e:	d900      	bls.n	80051a2 <HAL_RCC_GetSysClockFreq+0x1a>
 80051a0:	e07b      	b.n	800529a <HAL_RCC_GetSysClockFreq+0x112>
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d002      	beq.n	80051ac <HAL_RCC_GetSysClockFreq+0x24>
 80051a6:	2b08      	cmp	r3, #8
 80051a8:	d00b      	beq.n	80051c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80051aa:	e076      	b.n	800529a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80051ac:	4b44      	ldr	r3, [pc, #272]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x138>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2210      	movs	r2, #16
 80051b2:	4013      	ands	r3, r2
 80051b4:	d002      	beq.n	80051bc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80051b6:	4b43      	ldr	r3, [pc, #268]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80051b8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80051ba:	e07c      	b.n	80052b6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80051bc:	4b42      	ldr	r3, [pc, #264]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x140>)
 80051be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80051c0:	e079      	b.n	80052b6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80051c2:	4b42      	ldr	r3, [pc, #264]	; (80052cc <HAL_RCC_GetSysClockFreq+0x144>)
 80051c4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80051c6:	e076      	b.n	80052b6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80051c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ca:	0c9a      	lsrs	r2, r3, #18
 80051cc:	230f      	movs	r3, #15
 80051ce:	401a      	ands	r2, r3
 80051d0:	4b3f      	ldr	r3, [pc, #252]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x148>)
 80051d2:	5c9b      	ldrb	r3, [r3, r2]
 80051d4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80051d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d8:	0d9a      	lsrs	r2, r3, #22
 80051da:	2303      	movs	r3, #3
 80051dc:	4013      	ands	r3, r2
 80051de:	3301      	adds	r3, #1
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051e2:	4b37      	ldr	r3, [pc, #220]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x138>)
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	2380      	movs	r3, #128	; 0x80
 80051e8:	025b      	lsls	r3, r3, #9
 80051ea:	4013      	ands	r3, r2
 80051ec:	d01a      	beq.n	8005224 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	61bb      	str	r3, [r7, #24]
 80051f2:	2300      	movs	r3, #0
 80051f4:	61fb      	str	r3, [r7, #28]
 80051f6:	4a35      	ldr	r2, [pc, #212]	; (80052cc <HAL_RCC_GetSysClockFreq+0x144>)
 80051f8:	2300      	movs	r3, #0
 80051fa:	69b8      	ldr	r0, [r7, #24]
 80051fc:	69f9      	ldr	r1, [r7, #28]
 80051fe:	f7fb f923 	bl	8000448 <__aeabi_lmul>
 8005202:	0002      	movs	r2, r0
 8005204:	000b      	movs	r3, r1
 8005206:	0010      	movs	r0, r2
 8005208:	0019      	movs	r1, r3
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	613b      	str	r3, [r7, #16]
 800520e:	2300      	movs	r3, #0
 8005210:	617b      	str	r3, [r7, #20]
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f7fb f8f7 	bl	8000408 <__aeabi_uldivmod>
 800521a:	0002      	movs	r2, r0
 800521c:	000b      	movs	r3, r1
 800521e:	0013      	movs	r3, r2
 8005220:	637b      	str	r3, [r7, #52]	; 0x34
 8005222:	e037      	b.n	8005294 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005224:	4b26      	ldr	r3, [pc, #152]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2210      	movs	r2, #16
 800522a:	4013      	ands	r3, r2
 800522c:	d01a      	beq.n	8005264 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800522e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005230:	60bb      	str	r3, [r7, #8]
 8005232:	2300      	movs	r3, #0
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	4a23      	ldr	r2, [pc, #140]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005238:	2300      	movs	r3, #0
 800523a:	68b8      	ldr	r0, [r7, #8]
 800523c:	68f9      	ldr	r1, [r7, #12]
 800523e:	f7fb f903 	bl	8000448 <__aeabi_lmul>
 8005242:	0002      	movs	r2, r0
 8005244:	000b      	movs	r3, r1
 8005246:	0010      	movs	r0, r2
 8005248:	0019      	movs	r1, r3
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	603b      	str	r3, [r7, #0]
 800524e:	2300      	movs	r3, #0
 8005250:	607b      	str	r3, [r7, #4]
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f7fb f8d7 	bl	8000408 <__aeabi_uldivmod>
 800525a:	0002      	movs	r2, r0
 800525c:	000b      	movs	r3, r1
 800525e:	0013      	movs	r3, r2
 8005260:	637b      	str	r3, [r7, #52]	; 0x34
 8005262:	e017      	b.n	8005294 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005266:	0018      	movs	r0, r3
 8005268:	2300      	movs	r3, #0
 800526a:	0019      	movs	r1, r3
 800526c:	4a16      	ldr	r2, [pc, #88]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x140>)
 800526e:	2300      	movs	r3, #0
 8005270:	f7fb f8ea 	bl	8000448 <__aeabi_lmul>
 8005274:	0002      	movs	r2, r0
 8005276:	000b      	movs	r3, r1
 8005278:	0010      	movs	r0, r2
 800527a:	0019      	movs	r1, r3
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	001c      	movs	r4, r3
 8005280:	2300      	movs	r3, #0
 8005282:	001d      	movs	r5, r3
 8005284:	0022      	movs	r2, r4
 8005286:	002b      	movs	r3, r5
 8005288:	f7fb f8be 	bl	8000408 <__aeabi_uldivmod>
 800528c:	0002      	movs	r2, r0
 800528e:	000b      	movs	r3, r1
 8005290:	0013      	movs	r3, r2
 8005292:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005296:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005298:	e00d      	b.n	80052b6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800529a:	4b09      	ldr	r3, [pc, #36]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x138>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	0b5b      	lsrs	r3, r3, #13
 80052a0:	2207      	movs	r2, #7
 80052a2:	4013      	ands	r3, r2
 80052a4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	3301      	adds	r3, #1
 80052aa:	2280      	movs	r2, #128	; 0x80
 80052ac:	0212      	lsls	r2, r2, #8
 80052ae:	409a      	lsls	r2, r3
 80052b0:	0013      	movs	r3, r2
 80052b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80052b4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80052b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80052b8:	0018      	movs	r0, r3
 80052ba:	46bd      	mov	sp, r7
 80052bc:	b00e      	add	sp, #56	; 0x38
 80052be:	bdb0      	pop	{r4, r5, r7, pc}
 80052c0:	40021000 	.word	0x40021000
 80052c4:	003d0900 	.word	0x003d0900
 80052c8:	00f42400 	.word	0x00f42400
 80052cc:	007a1200 	.word	0x007a1200
 80052d0:	08007b00 	.word	0x08007b00

080052d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052d8:	4b02      	ldr	r3, [pc, #8]	; (80052e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80052da:	681b      	ldr	r3, [r3, #0]
}
 80052dc:	0018      	movs	r0, r3
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	46c0      	nop			; (mov r8, r8)
 80052e4:	20000000 	.word	0x20000000

080052e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052ec:	f7ff fff2 	bl	80052d4 <HAL_RCC_GetHCLKFreq>
 80052f0:	0001      	movs	r1, r0
 80052f2:	4b06      	ldr	r3, [pc, #24]	; (800530c <HAL_RCC_GetPCLK1Freq+0x24>)
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	0a1b      	lsrs	r3, r3, #8
 80052f8:	2207      	movs	r2, #7
 80052fa:	4013      	ands	r3, r2
 80052fc:	4a04      	ldr	r2, [pc, #16]	; (8005310 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052fe:	5cd3      	ldrb	r3, [r2, r3]
 8005300:	40d9      	lsrs	r1, r3
 8005302:	000b      	movs	r3, r1
}
 8005304:	0018      	movs	r0, r3
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	46c0      	nop			; (mov r8, r8)
 800530c:	40021000 	.word	0x40021000
 8005310:	08007af8 	.word	0x08007af8

08005314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005318:	f7ff ffdc 	bl	80052d4 <HAL_RCC_GetHCLKFreq>
 800531c:	0001      	movs	r1, r0
 800531e:	4b06      	ldr	r3, [pc, #24]	; (8005338 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	0adb      	lsrs	r3, r3, #11
 8005324:	2207      	movs	r2, #7
 8005326:	4013      	ands	r3, r2
 8005328:	4a04      	ldr	r2, [pc, #16]	; (800533c <HAL_RCC_GetPCLK2Freq+0x28>)
 800532a:	5cd3      	ldrb	r3, [r2, r3]
 800532c:	40d9      	lsrs	r1, r3
 800532e:	000b      	movs	r3, r1
}
 8005330:	0018      	movs	r0, r3
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	46c0      	nop			; (mov r8, r8)
 8005338:	40021000 	.word	0x40021000
 800533c:	08007af8 	.word	0x08007af8

08005340 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005348:	2017      	movs	r0, #23
 800534a:	183b      	adds	r3, r7, r0
 800534c:	2200      	movs	r2, #0
 800534e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2220      	movs	r2, #32
 8005356:	4013      	ands	r3, r2
 8005358:	d100      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800535a:	e0c7      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800535c:	4b84      	ldr	r3, [pc, #528]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800535e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005360:	2380      	movs	r3, #128	; 0x80
 8005362:	055b      	lsls	r3, r3, #21
 8005364:	4013      	ands	r3, r2
 8005366:	d109      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005368:	4b81      	ldr	r3, [pc, #516]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800536a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800536c:	4b80      	ldr	r3, [pc, #512]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800536e:	2180      	movs	r1, #128	; 0x80
 8005370:	0549      	lsls	r1, r1, #21
 8005372:	430a      	orrs	r2, r1
 8005374:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005376:	183b      	adds	r3, r7, r0
 8005378:	2201      	movs	r2, #1
 800537a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800537c:	4b7d      	ldr	r3, [pc, #500]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	2380      	movs	r3, #128	; 0x80
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	4013      	ands	r3, r2
 8005386:	d11a      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005388:	4b7a      	ldr	r3, [pc, #488]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	4b79      	ldr	r3, [pc, #484]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800538e:	2180      	movs	r1, #128	; 0x80
 8005390:	0049      	lsls	r1, r1, #1
 8005392:	430a      	orrs	r2, r1
 8005394:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005396:	f7fd faf7 	bl	8002988 <HAL_GetTick>
 800539a:	0003      	movs	r3, r0
 800539c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800539e:	e008      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053a0:	f7fd faf2 	bl	8002988 <HAL_GetTick>
 80053a4:	0002      	movs	r2, r0
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b64      	cmp	r3, #100	; 0x64
 80053ac:	d901      	bls.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e0d9      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053b2:	4b70      	ldr	r3, [pc, #448]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	2380      	movs	r3, #128	; 0x80
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	4013      	ands	r3, r2
 80053bc:	d0f0      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80053be:	4b6c      	ldr	r3, [pc, #432]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	23c0      	movs	r3, #192	; 0xc0
 80053c4:	039b      	lsls	r3, r3, #14
 80053c6:	4013      	ands	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	23c0      	movs	r3, #192	; 0xc0
 80053d0:	039b      	lsls	r3, r3, #14
 80053d2:	4013      	ands	r3, r2
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d013      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	23c0      	movs	r3, #192	; 0xc0
 80053e0:	029b      	lsls	r3, r3, #10
 80053e2:	401a      	ands	r2, r3
 80053e4:	23c0      	movs	r3, #192	; 0xc0
 80053e6:	029b      	lsls	r3, r3, #10
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d10a      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80053ec:	4b60      	ldr	r3, [pc, #384]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	2380      	movs	r3, #128	; 0x80
 80053f2:	029b      	lsls	r3, r3, #10
 80053f4:	401a      	ands	r2, r3
 80053f6:	2380      	movs	r3, #128	; 0x80
 80053f8:	029b      	lsls	r3, r3, #10
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d101      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e0b1      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005402:	4b5b      	ldr	r3, [pc, #364]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005404:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005406:	23c0      	movs	r3, #192	; 0xc0
 8005408:	029b      	lsls	r3, r3, #10
 800540a:	4013      	ands	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d03b      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	23c0      	movs	r3, #192	; 0xc0
 800541a:	029b      	lsls	r3, r3, #10
 800541c:	4013      	ands	r3, r2
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	429a      	cmp	r2, r3
 8005422:	d033      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2220      	movs	r2, #32
 800542a:	4013      	ands	r3, r2
 800542c:	d02e      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800542e:	4b50      	ldr	r3, [pc, #320]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005432:	4a51      	ldr	r2, [pc, #324]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8005434:	4013      	ands	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005438:	4b4d      	ldr	r3, [pc, #308]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800543a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800543c:	4b4c      	ldr	r3, [pc, #304]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800543e:	2180      	movs	r1, #128	; 0x80
 8005440:	0309      	lsls	r1, r1, #12
 8005442:	430a      	orrs	r2, r1
 8005444:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005446:	4b4a      	ldr	r3, [pc, #296]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005448:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800544a:	4b49      	ldr	r3, [pc, #292]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800544c:	494b      	ldr	r1, [pc, #300]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800544e:	400a      	ands	r2, r1
 8005450:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005452:	4b47      	ldr	r3, [pc, #284]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	2380      	movs	r3, #128	; 0x80
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	4013      	ands	r3, r2
 8005460:	d014      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005462:	f7fd fa91 	bl	8002988 <HAL_GetTick>
 8005466:	0003      	movs	r3, r0
 8005468:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800546a:	e009      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800546c:	f7fd fa8c 	bl	8002988 <HAL_GetTick>
 8005470:	0002      	movs	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	4a42      	ldr	r2, [pc, #264]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d901      	bls.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e072      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005480:	4b3b      	ldr	r3, [pc, #236]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005482:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005484:	2380      	movs	r3, #128	; 0x80
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4013      	ands	r3, r2
 800548a:	d0ef      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2220      	movs	r2, #32
 8005492:	4013      	ands	r3, r2
 8005494:	d01f      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	23c0      	movs	r3, #192	; 0xc0
 800549c:	029b      	lsls	r3, r3, #10
 800549e:	401a      	ands	r2, r3
 80054a0:	23c0      	movs	r3, #192	; 0xc0
 80054a2:	029b      	lsls	r3, r3, #10
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d10c      	bne.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80054a8:	4b31      	ldr	r3, [pc, #196]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a35      	ldr	r2, [pc, #212]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80054ae:	4013      	ands	r3, r2
 80054b0:	0019      	movs	r1, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	23c0      	movs	r3, #192	; 0xc0
 80054b8:	039b      	lsls	r3, r3, #14
 80054ba:	401a      	ands	r2, r3
 80054bc:	4b2c      	ldr	r3, [pc, #176]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80054be:	430a      	orrs	r2, r1
 80054c0:	601a      	str	r2, [r3, #0]
 80054c2:	4b2b      	ldr	r3, [pc, #172]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80054c4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	23c0      	movs	r3, #192	; 0xc0
 80054cc:	029b      	lsls	r3, r3, #10
 80054ce:	401a      	ands	r2, r3
 80054d0:	4b27      	ldr	r3, [pc, #156]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80054d2:	430a      	orrs	r2, r1
 80054d4:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80054d6:	2317      	movs	r3, #23
 80054d8:	18fb      	adds	r3, r7, r3
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d105      	bne.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054e0:	4b23      	ldr	r3, [pc, #140]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80054e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054e4:	4b22      	ldr	r3, [pc, #136]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80054e6:	4928      	ldr	r1, [pc, #160]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054e8:	400a      	ands	r2, r1
 80054ea:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2202      	movs	r2, #2
 80054f2:	4013      	ands	r3, r2
 80054f4:	d009      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054f6:	4b1e      	ldr	r3, [pc, #120]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80054f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054fa:	220c      	movs	r2, #12
 80054fc:	4393      	bics	r3, r2
 80054fe:	0019      	movs	r1, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	4b1a      	ldr	r3, [pc, #104]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005506:	430a      	orrs	r2, r1
 8005508:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2204      	movs	r2, #4
 8005510:	4013      	ands	r3, r2
 8005512:	d009      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005514:	4b16      	ldr	r3, [pc, #88]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005518:	4a1c      	ldr	r2, [pc, #112]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800551a:	4013      	ands	r3, r2
 800551c:	0019      	movs	r1, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	4b13      	ldr	r3, [pc, #76]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005524:	430a      	orrs	r2, r1
 8005526:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2208      	movs	r2, #8
 800552e:	4013      	ands	r3, r2
 8005530:	d009      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005532:	4b0f      	ldr	r3, [pc, #60]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005536:	4a16      	ldr	r2, [pc, #88]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005538:	4013      	ands	r3, r2
 800553a:	0019      	movs	r1, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	691a      	ldr	r2, [r3, #16]
 8005540:	4b0b      	ldr	r3, [pc, #44]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005542:	430a      	orrs	r2, r1
 8005544:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2280      	movs	r2, #128	; 0x80
 800554c:	4013      	ands	r3, r2
 800554e:	d009      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005550:	4b07      	ldr	r3, [pc, #28]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005554:	4a0f      	ldr	r2, [pc, #60]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005556:	4013      	ands	r3, r2
 8005558:	0019      	movs	r1, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695a      	ldr	r2, [r3, #20]
 800555e:	4b04      	ldr	r3, [pc, #16]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005560:	430a      	orrs	r2, r1
 8005562:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	0018      	movs	r0, r3
 8005568:	46bd      	mov	sp, r7
 800556a:	b006      	add	sp, #24
 800556c:	bd80      	pop	{r7, pc}
 800556e:	46c0      	nop			; (mov r8, r8)
 8005570:	40021000 	.word	0x40021000
 8005574:	40007000 	.word	0x40007000
 8005578:	fffcffff 	.word	0xfffcffff
 800557c:	fff7ffff 	.word	0xfff7ffff
 8005580:	00001388 	.word	0x00001388
 8005584:	ffcfffff 	.word	0xffcfffff
 8005588:	efffffff 	.word	0xefffffff
 800558c:	fffff3ff 	.word	0xfffff3ff
 8005590:	ffffcfff 	.word	0xffffcfff
 8005594:	fff3ffff 	.word	0xfff3ffff

08005598 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e07b      	b.n	80056a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d109      	bne.n	80055c6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	2382      	movs	r3, #130	; 0x82
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d009      	beq.n	80055d2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	61da      	str	r2, [r3, #28]
 80055c4:	e005      	b.n	80055d2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2251      	movs	r2, #81	; 0x51
 80055dc:	5c9b      	ldrb	r3, [r3, r2]
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d107      	bne.n	80055f4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2250      	movs	r2, #80	; 0x50
 80055e8:	2100      	movs	r1, #0
 80055ea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	0018      	movs	r0, r3
 80055f0:	f7fc fb9c 	bl	8001d2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2251      	movs	r2, #81	; 0x51
 80055f8:	2102      	movs	r1, #2
 80055fa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2140      	movs	r1, #64	; 0x40
 8005608:	438a      	bics	r2, r1
 800560a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	2382      	movs	r3, #130	; 0x82
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	401a      	ands	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6899      	ldr	r1, [r3, #8]
 800561a:	2384      	movs	r3, #132	; 0x84
 800561c:	021b      	lsls	r3, r3, #8
 800561e:	400b      	ands	r3, r1
 8005620:	431a      	orrs	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68d9      	ldr	r1, [r3, #12]
 8005626:	2380      	movs	r3, #128	; 0x80
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	400b      	ands	r3, r1
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	2102      	movs	r1, #2
 8005634:	400b      	ands	r3, r1
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	2101      	movs	r1, #1
 800563e:	400b      	ands	r3, r1
 8005640:	431a      	orrs	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6999      	ldr	r1, [r3, #24]
 8005646:	2380      	movs	r3, #128	; 0x80
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	400b      	ands	r3, r1
 800564c:	431a      	orrs	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	2138      	movs	r1, #56	; 0x38
 8005654:	400b      	ands	r3, r1
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	2180      	movs	r1, #128	; 0x80
 800565e:	400b      	ands	r3, r1
 8005660:	431a      	orrs	r2, r3
 8005662:	0011      	movs	r1, r2
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005668:	2380      	movs	r3, #128	; 0x80
 800566a:	019b      	lsls	r3, r3, #6
 800566c:	401a      	ands	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	0c1b      	lsrs	r3, r3, #16
 800567c:	2204      	movs	r2, #4
 800567e:	4013      	ands	r3, r2
 8005680:	0019      	movs	r1, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	2210      	movs	r2, #16
 8005688:	401a      	ands	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2251      	movs	r2, #81	; 0x51
 800569c:	2101      	movs	r1, #1
 800569e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	0018      	movs	r0, r3
 80056a4:	46bd      	mov	sp, r7
 80056a6:	b002      	add	sp, #8
 80056a8:	bd80      	pop	{r7, pc}

080056aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b088      	sub	sp, #32
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	603b      	str	r3, [r7, #0]
 80056b6:	1dbb      	adds	r3, r7, #6
 80056b8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056ba:	231f      	movs	r3, #31
 80056bc:	18fb      	adds	r3, r7, r3
 80056be:	2200      	movs	r2, #0
 80056c0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2250      	movs	r2, #80	; 0x50
 80056c6:	5c9b      	ldrb	r3, [r3, r2]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d101      	bne.n	80056d0 <HAL_SPI_Transmit+0x26>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e145      	b.n	800595c <HAL_SPI_Transmit+0x2b2>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2250      	movs	r2, #80	; 0x50
 80056d4:	2101      	movs	r1, #1
 80056d6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056d8:	f7fd f956 	bl	8002988 <HAL_GetTick>
 80056dc:	0003      	movs	r3, r0
 80056de:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80056e0:	2316      	movs	r3, #22
 80056e2:	18fb      	adds	r3, r7, r3
 80056e4:	1dba      	adds	r2, r7, #6
 80056e6:	8812      	ldrh	r2, [r2, #0]
 80056e8:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2251      	movs	r2, #81	; 0x51
 80056ee:	5c9b      	ldrb	r3, [r3, r2]
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d004      	beq.n	8005700 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80056f6:	231f      	movs	r3, #31
 80056f8:	18fb      	adds	r3, r7, r3
 80056fa:	2202      	movs	r2, #2
 80056fc:	701a      	strb	r2, [r3, #0]
    goto error;
 80056fe:	e126      	b.n	800594e <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_SPI_Transmit+0x64>
 8005706:	1dbb      	adds	r3, r7, #6
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d104      	bne.n	8005718 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800570e:	231f      	movs	r3, #31
 8005710:	18fb      	adds	r3, r7, r3
 8005712:	2201      	movs	r2, #1
 8005714:	701a      	strb	r2, [r3, #0]
    goto error;
 8005716:	e11a      	b.n	800594e <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2251      	movs	r2, #81	; 0x51
 800571c:	2103      	movs	r1, #3
 800571e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	1dba      	adds	r2, r7, #6
 8005730:	8812      	ldrh	r2, [r2, #0]
 8005732:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	1dba      	adds	r2, r7, #6
 8005738:	8812      	ldrh	r2, [r2, #0]
 800573a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	689a      	ldr	r2, [r3, #8]
 800575e:	2380      	movs	r3, #128	; 0x80
 8005760:	021b      	lsls	r3, r3, #8
 8005762:	429a      	cmp	r2, r3
 8005764:	d110      	bne.n	8005788 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2140      	movs	r1, #64	; 0x40
 8005772:	438a      	bics	r2, r1
 8005774:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2180      	movs	r1, #128	; 0x80
 8005782:	01c9      	lsls	r1, r1, #7
 8005784:	430a      	orrs	r2, r1
 8005786:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2240      	movs	r2, #64	; 0x40
 8005790:	4013      	ands	r3, r2
 8005792:	2b40      	cmp	r3, #64	; 0x40
 8005794:	d007      	beq.n	80057a6 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2140      	movs	r1, #64	; 0x40
 80057a2:	430a      	orrs	r2, r1
 80057a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	2380      	movs	r3, #128	; 0x80
 80057ac:	011b      	lsls	r3, r3, #4
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d152      	bne.n	8005858 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d004      	beq.n	80057c4 <HAL_SPI_Transmit+0x11a>
 80057ba:	2316      	movs	r3, #22
 80057bc:	18fb      	adds	r3, r7, r3
 80057be:	881b      	ldrh	r3, [r3, #0]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d143      	bne.n	800584c <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c8:	881a      	ldrh	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d4:	1c9a      	adds	r2, r3, #2
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057de:	b29b      	uxth	r3, r3
 80057e0:	3b01      	subs	r3, #1
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80057e8:	e030      	b.n	800584c <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	2202      	movs	r2, #2
 80057f2:	4013      	ands	r3, r2
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d112      	bne.n	800581e <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fc:	881a      	ldrh	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005808:	1c9a      	adds	r2, r3, #2
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005812:	b29b      	uxth	r3, r3
 8005814:	3b01      	subs	r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	86da      	strh	r2, [r3, #54]	; 0x36
 800581c:	e016      	b.n	800584c <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800581e:	f7fd f8b3 	bl	8002988 <HAL_GetTick>
 8005822:	0002      	movs	r2, r0
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d802      	bhi.n	8005834 <HAL_SPI_Transmit+0x18a>
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	3301      	adds	r3, #1
 8005832:	d102      	bne.n	800583a <HAL_SPI_Transmit+0x190>
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d108      	bne.n	800584c <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 800583a:	231f      	movs	r3, #31
 800583c:	18fb      	adds	r3, r7, r3
 800583e:	2203      	movs	r2, #3
 8005840:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2251      	movs	r2, #81	; 0x51
 8005846:	2101      	movs	r1, #1
 8005848:	5499      	strb	r1, [r3, r2]
          goto error;
 800584a:	e080      	b.n	800594e <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005850:	b29b      	uxth	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1c9      	bne.n	80057ea <HAL_SPI_Transmit+0x140>
 8005856:	e053      	b.n	8005900 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d004      	beq.n	800586a <HAL_SPI_Transmit+0x1c0>
 8005860:	2316      	movs	r3, #22
 8005862:	18fb      	adds	r3, r7, r3
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d145      	bne.n	80058f6 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	330c      	adds	r3, #12
 8005874:	7812      	ldrb	r2, [r2, #0]
 8005876:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005886:	b29b      	uxth	r3, r3
 8005888:	3b01      	subs	r3, #1
 800588a:	b29a      	uxth	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005890:	e031      	b.n	80058f6 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	2202      	movs	r2, #2
 800589a:	4013      	ands	r3, r2
 800589c:	2b02      	cmp	r3, #2
 800589e:	d113      	bne.n	80058c8 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	330c      	adds	r3, #12
 80058aa:	7812      	ldrb	r2, [r2, #0]
 80058ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058bc:	b29b      	uxth	r3, r3
 80058be:	3b01      	subs	r3, #1
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80058c6:	e016      	b.n	80058f6 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058c8:	f7fd f85e 	bl	8002988 <HAL_GetTick>
 80058cc:	0002      	movs	r2, r0
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d802      	bhi.n	80058de <HAL_SPI_Transmit+0x234>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	3301      	adds	r3, #1
 80058dc:	d102      	bne.n	80058e4 <HAL_SPI_Transmit+0x23a>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d108      	bne.n	80058f6 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 80058e4:	231f      	movs	r3, #31
 80058e6:	18fb      	adds	r3, r7, r3
 80058e8:	2203      	movs	r2, #3
 80058ea:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2251      	movs	r2, #81	; 0x51
 80058f0:	2101      	movs	r1, #1
 80058f2:	5499      	strb	r1, [r3, r2]
          goto error;
 80058f4:	e02b      	b.n	800594e <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1c8      	bne.n	8005892 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	6839      	ldr	r1, [r7, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	0018      	movs	r0, r3
 8005908:	f000 f8ba 	bl	8005a80 <SPI_EndRxTxTransaction>
 800590c:	1e03      	subs	r3, r0, #0
 800590e:	d002      	beq.n	8005916 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2220      	movs	r2, #32
 8005914:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10a      	bne.n	8005934 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800591e:	2300      	movs	r3, #0
 8005920:	613b      	str	r3, [r7, #16]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	613b      	str	r3, [r7, #16]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	613b      	str	r3, [r7, #16]
 8005932:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005938:	2b00      	cmp	r3, #0
 800593a:	d004      	beq.n	8005946 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 800593c:	231f      	movs	r3, #31
 800593e:	18fb      	adds	r3, r7, r3
 8005940:	2201      	movs	r2, #1
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	e003      	b.n	800594e <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2251      	movs	r2, #81	; 0x51
 800594a:	2101      	movs	r1, #1
 800594c:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2250      	movs	r2, #80	; 0x50
 8005952:	2100      	movs	r1, #0
 8005954:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005956:	231f      	movs	r3, #31
 8005958:	18fb      	adds	r3, r7, r3
 800595a:	781b      	ldrb	r3, [r3, #0]
}
 800595c:	0018      	movs	r0, r3
 800595e:	46bd      	mov	sp, r7
 8005960:	b008      	add	sp, #32
 8005962:	bd80      	pop	{r7, pc}

08005964 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b088      	sub	sp, #32
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	603b      	str	r3, [r7, #0]
 8005970:	1dfb      	adds	r3, r7, #7
 8005972:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005974:	f7fd f808 	bl	8002988 <HAL_GetTick>
 8005978:	0002      	movs	r2, r0
 800597a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597c:	1a9b      	subs	r3, r3, r2
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	18d3      	adds	r3, r2, r3
 8005982:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005984:	f7fd f800 	bl	8002988 <HAL_GetTick>
 8005988:	0003      	movs	r3, r0
 800598a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800598c:	4b3a      	ldr	r3, [pc, #232]	; (8005a78 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	015b      	lsls	r3, r3, #5
 8005992:	0d1b      	lsrs	r3, r3, #20
 8005994:	69fa      	ldr	r2, [r7, #28]
 8005996:	4353      	muls	r3, r2
 8005998:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800599a:	e058      	b.n	8005a4e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	3301      	adds	r3, #1
 80059a0:	d055      	beq.n	8005a4e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059a2:	f7fc fff1 	bl	8002988 <HAL_GetTick>
 80059a6:	0002      	movs	r2, r0
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	69fa      	ldr	r2, [r7, #28]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d902      	bls.n	80059b8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d142      	bne.n	8005a3e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	21e0      	movs	r1, #224	; 0xe0
 80059c4:	438a      	bics	r2, r1
 80059c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	2382      	movs	r3, #130	; 0x82
 80059ce:	005b      	lsls	r3, r3, #1
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d113      	bne.n	80059fc <SPI_WaitFlagStateUntilTimeout+0x98>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	2380      	movs	r3, #128	; 0x80
 80059da:	021b      	lsls	r3, r3, #8
 80059dc:	429a      	cmp	r2, r3
 80059de:	d005      	beq.n	80059ec <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	2380      	movs	r3, #128	; 0x80
 80059e6:	00db      	lsls	r3, r3, #3
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d107      	bne.n	80059fc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2140      	movs	r1, #64	; 0x40
 80059f8:	438a      	bics	r2, r1
 80059fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a00:	2380      	movs	r3, #128	; 0x80
 8005a02:	019b      	lsls	r3, r3, #6
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d110      	bne.n	8005a2a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	491a      	ldr	r1, [pc, #104]	; (8005a7c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005a14:	400a      	ands	r2, r1
 8005a16:	601a      	str	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2180      	movs	r1, #128	; 0x80
 8005a24:	0189      	lsls	r1, r1, #6
 8005a26:	430a      	orrs	r2, r1
 8005a28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2251      	movs	r2, #81	; 0x51
 8005a2e:	2101      	movs	r1, #1
 8005a30:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2250      	movs	r2, #80	; 0x50
 8005a36:	2100      	movs	r1, #0
 8005a38:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e017      	b.n	8005a6e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	4013      	ands	r3, r2
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	425a      	negs	r2, r3
 8005a5e:	4153      	adcs	r3, r2
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	001a      	movs	r2, r3
 8005a64:	1dfb      	adds	r3, r7, #7
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d197      	bne.n	800599c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	0018      	movs	r0, r3
 8005a70:	46bd      	mov	sp, r7
 8005a72:	b008      	add	sp, #32
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	46c0      	nop			; (mov r8, r8)
 8005a78:	20000000 	.word	0x20000000
 8005a7c:	ffffdfff 	.word	0xffffdfff

08005a80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a8c:	4b1d      	ldr	r3, [pc, #116]	; (8005b04 <SPI_EndRxTxTransaction+0x84>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	491d      	ldr	r1, [pc, #116]	; (8005b08 <SPI_EndRxTxTransaction+0x88>)
 8005a92:	0018      	movs	r0, r3
 8005a94:	f7fa fb42 	bl	800011c <__udivsi3>
 8005a98:	0003      	movs	r3, r0
 8005a9a:	001a      	movs	r2, r3
 8005a9c:	0013      	movs	r3, r2
 8005a9e:	015b      	lsls	r3, r3, #5
 8005aa0:	1a9b      	subs	r3, r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	189b      	adds	r3, r3, r2
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	2382      	movs	r3, #130	; 0x82
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d112      	bne.n	8005adc <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	0013      	movs	r3, r2
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	2180      	movs	r1, #128	; 0x80
 8005ac4:	f7ff ff4e 	bl	8005964 <SPI_WaitFlagStateUntilTimeout>
 8005ac8:	1e03      	subs	r3, r0, #0
 8005aca:	d016      	beq.n	8005afa <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e00f      	b.n	8005afc <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2280      	movs	r2, #128	; 0x80
 8005af0:	4013      	ands	r3, r2
 8005af2:	2b80      	cmp	r3, #128	; 0x80
 8005af4:	d0f2      	beq.n	8005adc <SPI_EndRxTxTransaction+0x5c>
 8005af6:	e000      	b.n	8005afa <SPI_EndRxTxTransaction+0x7a>
        break;
 8005af8:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	0018      	movs	r0, r3
 8005afe:	46bd      	mov	sp, r7
 8005b00:	b006      	add	sp, #24
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	20000000 	.word	0x20000000
 8005b08:	016e3600 	.word	0x016e3600

08005b0c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e088      	b.n	8005c32 <HAL_TIM_Encoder_Init+0x126>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2239      	movs	r2, #57	; 0x39
 8005b24:	5c9b      	ldrb	r3, [r3, r2]
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d107      	bne.n	8005b3c <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2238      	movs	r2, #56	; 0x38
 8005b30:	2100      	movs	r1, #0
 8005b32:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	0018      	movs	r0, r3
 8005b38:	f7fc fcc2 	bl	80024c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2239      	movs	r2, #57	; 0x39
 8005b40:	2102      	movs	r1, #2
 8005b42:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	493b      	ldr	r1, [pc, #236]	; (8005c3c <HAL_TIM_Encoder_Init+0x130>)
 8005b50:	400a      	ands	r2, r1
 8005b52:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	0019      	movs	r1, r3
 8005b5e:	0010      	movs	r0, r2
 8005b60:	f000 f984 	bl	8005e6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	4a2d      	ldr	r2, [pc, #180]	; (8005c40 <HAL_TIM_Encoder_Init+0x134>)
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	689a      	ldr	r2, [r3, #8]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	021b      	lsls	r3, r3, #8
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	4a28      	ldr	r2, [pc, #160]	; (8005c44 <HAL_TIM_Encoder_Init+0x138>)
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	4a27      	ldr	r2, [pc, #156]	; (8005c48 <HAL_TIM_Encoder_Init+0x13c>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	68da      	ldr	r2, [r3, #12]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	021b      	lsls	r3, r3, #8
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	011a      	lsls	r2, r3, #4
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	031b      	lsls	r3, r3, #12
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2222      	movs	r2, #34	; 0x22
 8005bda:	4393      	bics	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2288      	movs	r2, #136	; 0x88
 8005be2:	4393      	bics	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685a      	ldr	r2, [r3, #4]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	011b      	lsls	r3, r3, #4
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	223e      	movs	r2, #62	; 0x3e
 8005c14:	2101      	movs	r1, #1
 8005c16:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	223a      	movs	r2, #58	; 0x3a
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	223b      	movs	r2, #59	; 0x3b
 8005c24:	2101      	movs	r1, #1
 8005c26:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2239      	movs	r2, #57	; 0x39
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	0018      	movs	r0, r3
 8005c34:	46bd      	mov	sp, r7
 8005c36:	b006      	add	sp, #24
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	46c0      	nop			; (mov r8, r8)
 8005c3c:	ffffbff8 	.word	0xffffbff8
 8005c40:	fffffcfc 	.word	0xfffffcfc
 8005c44:	fffff3f3 	.word	0xfffff3f3
 8005c48:	ffff0f0f 	.word	0xffff0f0f

08005c4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d124      	bne.n	8005cac <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	2202      	movs	r2, #2
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d11d      	bne.n	8005cac <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2203      	movs	r2, #3
 8005c76:	4252      	negs	r2, r2
 8005c78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	2203      	movs	r2, #3
 8005c88:	4013      	ands	r3, r2
 8005c8a:	d004      	beq.n	8005c96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	0018      	movs	r0, r3
 8005c90:	f000 f8d4 	bl	8005e3c <HAL_TIM_IC_CaptureCallback>
 8005c94:	e007      	b.n	8005ca6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	0018      	movs	r0, r3
 8005c9a:	f000 f8c7 	bl	8005e2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	f000 f8d3 	bl	8005e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	2204      	movs	r2, #4
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d125      	bne.n	8005d06 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	2204      	movs	r2, #4
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	2b04      	cmp	r3, #4
 8005cc6:	d11e      	bne.n	8005d06 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2205      	movs	r2, #5
 8005cce:	4252      	negs	r2, r2
 8005cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	699a      	ldr	r2, [r3, #24]
 8005cde:	23c0      	movs	r3, #192	; 0xc0
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	d004      	beq.n	8005cf0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	0018      	movs	r0, r3
 8005cea:	f000 f8a7 	bl	8005e3c <HAL_TIM_IC_CaptureCallback>
 8005cee:	e007      	b.n	8005d00 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	0018      	movs	r0, r3
 8005cf4:	f000 f89a 	bl	8005e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	0018      	movs	r0, r3
 8005cfc:	f000 f8a6 	bl	8005e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	2208      	movs	r2, #8
 8005d0e:	4013      	ands	r3, r2
 8005d10:	2b08      	cmp	r3, #8
 8005d12:	d124      	bne.n	8005d5e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	2208      	movs	r2, #8
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	2b08      	cmp	r3, #8
 8005d20:	d11d      	bne.n	8005d5e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2209      	movs	r2, #9
 8005d28:	4252      	negs	r2, r2
 8005d2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2204      	movs	r2, #4
 8005d30:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	2203      	movs	r2, #3
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	d004      	beq.n	8005d48 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	0018      	movs	r0, r3
 8005d42:	f000 f87b 	bl	8005e3c <HAL_TIM_IC_CaptureCallback>
 8005d46:	e007      	b.n	8005d58 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	0018      	movs	r0, r3
 8005d4c:	f000 f86e 	bl	8005e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	0018      	movs	r0, r3
 8005d54:	f000 f87a 	bl	8005e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	2210      	movs	r2, #16
 8005d66:	4013      	ands	r3, r2
 8005d68:	2b10      	cmp	r3, #16
 8005d6a:	d125      	bne.n	8005db8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	2210      	movs	r2, #16
 8005d74:	4013      	ands	r3, r2
 8005d76:	2b10      	cmp	r3, #16
 8005d78:	d11e      	bne.n	8005db8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2211      	movs	r2, #17
 8005d80:	4252      	negs	r2, r2
 8005d82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2208      	movs	r2, #8
 8005d88:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	69da      	ldr	r2, [r3, #28]
 8005d90:	23c0      	movs	r3, #192	; 0xc0
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4013      	ands	r3, r2
 8005d96:	d004      	beq.n	8005da2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	0018      	movs	r0, r3
 8005d9c:	f000 f84e 	bl	8005e3c <HAL_TIM_IC_CaptureCallback>
 8005da0:	e007      	b.n	8005db2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	0018      	movs	r0, r3
 8005da6:	f000 f841 	bl	8005e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	0018      	movs	r0, r3
 8005dae:	f000 f84d 	bl	8005e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d10f      	bne.n	8005de6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	4013      	ands	r3, r2
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d108      	bne.n	8005de6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2202      	movs	r2, #2
 8005dda:	4252      	negs	r2, r2
 8005ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	0018      	movs	r0, r3
 8005de2:	f000 f81b 	bl	8005e1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	2240      	movs	r2, #64	; 0x40
 8005dee:	4013      	ands	r3, r2
 8005df0:	2b40      	cmp	r3, #64	; 0x40
 8005df2:	d10f      	bne.n	8005e14 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	2240      	movs	r2, #64	; 0x40
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	2b40      	cmp	r3, #64	; 0x40
 8005e00:	d108      	bne.n	8005e14 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2241      	movs	r2, #65	; 0x41
 8005e08:	4252      	negs	r2, r2
 8005e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	0018      	movs	r0, r3
 8005e10:	f000 f824 	bl	8005e5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e14:	46c0      	nop			; (mov r8, r8)
 8005e16:	46bd      	mov	sp, r7
 8005e18:	b002      	add	sp, #8
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005e24:	46c0      	nop			; (mov r8, r8)
 8005e26:	46bd      	mov	sp, r7
 8005e28:	b002      	add	sp, #8
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e34:	46c0      	nop			; (mov r8, r8)
 8005e36:	46bd      	mov	sp, r7
 8005e38:	b002      	add	sp, #8
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e44:	46c0      	nop			; (mov r8, r8)
 8005e46:	46bd      	mov	sp, r7
 8005e48:	b002      	add	sp, #8
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e54:	46c0      	nop			; (mov r8, r8)
 8005e56:	46bd      	mov	sp, r7
 8005e58:	b002      	add	sp, #8
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e64:	46c0      	nop			; (mov r8, r8)
 8005e66:	46bd      	mov	sp, r7
 8005e68:	b002      	add	sp, #8
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	2380      	movs	r3, #128	; 0x80
 8005e80:	05db      	lsls	r3, r3, #23
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d007      	beq.n	8005e96 <TIM_Base_SetConfig+0x2a>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a1f      	ldr	r2, [pc, #124]	; (8005f08 <TIM_Base_SetConfig+0x9c>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d003      	beq.n	8005e96 <TIM_Base_SetConfig+0x2a>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a1e      	ldr	r2, [pc, #120]	; (8005f0c <TIM_Base_SetConfig+0xa0>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d108      	bne.n	8005ea8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2270      	movs	r2, #112	; 0x70
 8005e9a:	4393      	bics	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	2380      	movs	r3, #128	; 0x80
 8005eac:	05db      	lsls	r3, r3, #23
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d007      	beq.n	8005ec2 <TIM_Base_SetConfig+0x56>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a14      	ldr	r2, [pc, #80]	; (8005f08 <TIM_Base_SetConfig+0x9c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d003      	beq.n	8005ec2 <TIM_Base_SetConfig+0x56>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a13      	ldr	r2, [pc, #76]	; (8005f0c <TIM_Base_SetConfig+0xa0>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d108      	bne.n	8005ed4 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	4a12      	ldr	r2, [pc, #72]	; (8005f10 <TIM_Base_SetConfig+0xa4>)
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2280      	movs	r2, #128	; 0x80
 8005ed8:	4393      	bics	r3, r2
 8005eda:	001a      	movs	r2, r3
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	689a      	ldr	r2, [r3, #8]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	615a      	str	r2, [r3, #20]
}
 8005f00:	46c0      	nop			; (mov r8, r8)
 8005f02:	46bd      	mov	sp, r7
 8005f04:	b004      	add	sp, #16
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	40010800 	.word	0x40010800
 8005f0c:	40011400 	.word	0x40011400
 8005f10:	fffffcff 	.word	0xfffffcff

08005f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2238      	movs	r2, #56	; 0x38
 8005f22:	5c9b      	ldrb	r3, [r3, r2]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e042      	b.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2238      	movs	r2, #56	; 0x38
 8005f30:	2101      	movs	r1, #1
 8005f32:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2239      	movs	r2, #57	; 0x39
 8005f38:	2102      	movs	r1, #2
 8005f3a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2270      	movs	r2, #112	; 0x70
 8005f50:	4393      	bics	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	2380      	movs	r3, #128	; 0x80
 8005f6c:	05db      	lsls	r3, r3, #23
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d009      	beq.n	8005f86 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a11      	ldr	r2, [pc, #68]	; (8005fbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d004      	beq.n	8005f86 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a0f      	ldr	r2, [pc, #60]	; (8005fc0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d10c      	bne.n	8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2280      	movs	r2, #128	; 0x80
 8005f8a:	4393      	bics	r3, r2
 8005f8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2239      	movs	r2, #57	; 0x39
 8005fa4:	2101      	movs	r1, #1
 8005fa6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2238      	movs	r2, #56	; 0x38
 8005fac:	2100      	movs	r1, #0
 8005fae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	b004      	add	sp, #16
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	46c0      	nop			; (mov r8, r8)
 8005fbc:	40010800 	.word	0x40010800
 8005fc0:	40011400 	.word	0x40011400

08005fc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e044      	b.n	8006060 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d107      	bne.n	8005fee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2278      	movs	r2, #120	; 0x78
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	0018      	movs	r0, r3
 8005fea:	f7fc fae3 	bl	80025b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2224      	movs	r2, #36	; 0x24
 8005ff2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2101      	movs	r1, #1
 8006000:	438a      	bics	r2, r1
 8006002:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	0018      	movs	r0, r3
 8006008:	f000 fbce 	bl	80067a8 <UART_SetConfig>
 800600c:	0003      	movs	r3, r0
 800600e:	2b01      	cmp	r3, #1
 8006010:	d101      	bne.n	8006016 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e024      	b.n	8006060 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	0018      	movs	r0, r3
 8006022:	f000 fe0b 	bl	8006c3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	490d      	ldr	r1, [pc, #52]	; (8006068 <HAL_UART_Init+0xa4>)
 8006032:	400a      	ands	r2, r1
 8006034:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	212a      	movs	r1, #42	; 0x2a
 8006042:	438a      	bics	r2, r1
 8006044:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2101      	movs	r1, #1
 8006052:	430a      	orrs	r2, r1
 8006054:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	0018      	movs	r0, r3
 800605a:	f000 fea3 	bl	8006da4 <UART_CheckIdleState>
 800605e:	0003      	movs	r3, r0
}
 8006060:	0018      	movs	r0, r3
 8006062:	46bd      	mov	sp, r7
 8006064:	b002      	add	sp, #8
 8006066:	bd80      	pop	{r7, pc}
 8006068:	ffffb7ff 	.word	0xffffb7ff

0800606c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b08a      	sub	sp, #40	; 0x28
 8006070:	af02      	add	r7, sp, #8
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	603b      	str	r3, [r7, #0]
 8006078:	1dbb      	adds	r3, r7, #6
 800607a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006080:	2b20      	cmp	r3, #32
 8006082:	d000      	beq.n	8006086 <HAL_UART_Transmit+0x1a>
 8006084:	e08c      	b.n	80061a0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d003      	beq.n	8006094 <HAL_UART_Transmit+0x28>
 800608c:	1dbb      	adds	r3, r7, #6
 800608e:	881b      	ldrh	r3, [r3, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e084      	b.n	80061a2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	689a      	ldr	r2, [r3, #8]
 800609c:	2380      	movs	r3, #128	; 0x80
 800609e:	015b      	lsls	r3, r3, #5
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d109      	bne.n	80060b8 <HAL_UART_Transmit+0x4c>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d105      	bne.n	80060b8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2201      	movs	r2, #1
 80060b0:	4013      	ands	r3, r2
 80060b2:	d001      	beq.n	80060b8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e074      	b.n	80061a2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2284      	movs	r2, #132	; 0x84
 80060bc:	2100      	movs	r1, #0
 80060be:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2221      	movs	r2, #33	; 0x21
 80060c4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060c6:	f7fc fc5f 	bl	8002988 <HAL_GetTick>
 80060ca:	0003      	movs	r3, r0
 80060cc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	1dba      	adds	r2, r7, #6
 80060d2:	2150      	movs	r1, #80	; 0x50
 80060d4:	8812      	ldrh	r2, [r2, #0]
 80060d6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	1dba      	adds	r2, r7, #6
 80060dc:	2152      	movs	r1, #82	; 0x52
 80060de:	8812      	ldrh	r2, [r2, #0]
 80060e0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	689a      	ldr	r2, [r3, #8]
 80060e6:	2380      	movs	r3, #128	; 0x80
 80060e8:	015b      	lsls	r3, r3, #5
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d108      	bne.n	8006100 <HAL_UART_Transmit+0x94>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d104      	bne.n	8006100 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	61bb      	str	r3, [r7, #24]
 80060fe:	e003      	b.n	8006108 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006104:	2300      	movs	r3, #0
 8006106:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006108:	e02f      	b.n	800616a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	0013      	movs	r3, r2
 8006114:	2200      	movs	r2, #0
 8006116:	2180      	movs	r1, #128	; 0x80
 8006118:	f000 feec 	bl	8006ef4 <UART_WaitOnFlagUntilTimeout>
 800611c:	1e03      	subs	r3, r0, #0
 800611e:	d004      	beq.n	800612a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2220      	movs	r2, #32
 8006124:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e03b      	b.n	80061a2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10b      	bne.n	8006148 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	001a      	movs	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	05d2      	lsls	r2, r2, #23
 800613c:	0dd2      	lsrs	r2, r2, #23
 800613e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	3302      	adds	r3, #2
 8006144:	61bb      	str	r3, [r7, #24]
 8006146:	e007      	b.n	8006158 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	781a      	ldrb	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	3301      	adds	r3, #1
 8006156:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2252      	movs	r2, #82	; 0x52
 800615c:	5a9b      	ldrh	r3, [r3, r2]
 800615e:	b29b      	uxth	r3, r3
 8006160:	3b01      	subs	r3, #1
 8006162:	b299      	uxth	r1, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2252      	movs	r2, #82	; 0x52
 8006168:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2252      	movs	r2, #82	; 0x52
 800616e:	5a9b      	ldrh	r3, [r3, r2]
 8006170:	b29b      	uxth	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1c9      	bne.n	800610a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	0013      	movs	r3, r2
 8006180:	2200      	movs	r2, #0
 8006182:	2140      	movs	r1, #64	; 0x40
 8006184:	f000 feb6 	bl	8006ef4 <UART_WaitOnFlagUntilTimeout>
 8006188:	1e03      	subs	r3, r0, #0
 800618a:	d004      	beq.n	8006196 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2220      	movs	r2, #32
 8006190:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e005      	b.n	80061a2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2220      	movs	r2, #32
 800619a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800619c:	2300      	movs	r3, #0
 800619e:	e000      	b.n	80061a2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80061a0:	2302      	movs	r3, #2
  }
}
 80061a2:	0018      	movs	r0, r3
 80061a4:	46bd      	mov	sp, r7
 80061a6:	b008      	add	sp, #32
 80061a8:	bd80      	pop	{r7, pc}
	...

080061ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061ac:	b590      	push	{r4, r7, lr}
 80061ae:	b0ab      	sub	sp, #172	; 0xac
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	22a4      	movs	r2, #164	; 0xa4
 80061bc:	18b9      	adds	r1, r7, r2
 80061be:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	20a0      	movs	r0, #160	; 0xa0
 80061c8:	1839      	adds	r1, r7, r0
 80061ca:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	219c      	movs	r1, #156	; 0x9c
 80061d4:	1879      	adds	r1, r7, r1
 80061d6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061d8:	0011      	movs	r1, r2
 80061da:	18bb      	adds	r3, r7, r2
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a99      	ldr	r2, [pc, #612]	; (8006444 <HAL_UART_IRQHandler+0x298>)
 80061e0:	4013      	ands	r3, r2
 80061e2:	2298      	movs	r2, #152	; 0x98
 80061e4:	18bc      	adds	r4, r7, r2
 80061e6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80061e8:	18bb      	adds	r3, r7, r2
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d114      	bne.n	800621a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80061f0:	187b      	adds	r3, r7, r1
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2220      	movs	r2, #32
 80061f6:	4013      	ands	r3, r2
 80061f8:	d00f      	beq.n	800621a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061fa:	183b      	adds	r3, r7, r0
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2220      	movs	r2, #32
 8006200:	4013      	ands	r3, r2
 8006202:	d00a      	beq.n	800621a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006208:	2b00      	cmp	r3, #0
 800620a:	d100      	bne.n	800620e <HAL_UART_IRQHandler+0x62>
 800620c:	e2a0      	b.n	8006750 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	0010      	movs	r0, r2
 8006216:	4798      	blx	r3
      }
      return;
 8006218:	e29a      	b.n	8006750 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800621a:	2398      	movs	r3, #152	; 0x98
 800621c:	18fb      	adds	r3, r7, r3
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d100      	bne.n	8006226 <HAL_UART_IRQHandler+0x7a>
 8006224:	e114      	b.n	8006450 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006226:	239c      	movs	r3, #156	; 0x9c
 8006228:	18fb      	adds	r3, r7, r3
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2201      	movs	r2, #1
 800622e:	4013      	ands	r3, r2
 8006230:	d106      	bne.n	8006240 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006232:	23a0      	movs	r3, #160	; 0xa0
 8006234:	18fb      	adds	r3, r7, r3
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a83      	ldr	r2, [pc, #524]	; (8006448 <HAL_UART_IRQHandler+0x29c>)
 800623a:	4013      	ands	r3, r2
 800623c:	d100      	bne.n	8006240 <HAL_UART_IRQHandler+0x94>
 800623e:	e107      	b.n	8006450 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006240:	23a4      	movs	r3, #164	; 0xa4
 8006242:	18fb      	adds	r3, r7, r3
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2201      	movs	r2, #1
 8006248:	4013      	ands	r3, r2
 800624a:	d012      	beq.n	8006272 <HAL_UART_IRQHandler+0xc6>
 800624c:	23a0      	movs	r3, #160	; 0xa0
 800624e:	18fb      	adds	r3, r7, r3
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	2380      	movs	r3, #128	; 0x80
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	4013      	ands	r3, r2
 8006258:	d00b      	beq.n	8006272 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2201      	movs	r2, #1
 8006260:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2284      	movs	r2, #132	; 0x84
 8006266:	589b      	ldr	r3, [r3, r2]
 8006268:	2201      	movs	r2, #1
 800626a:	431a      	orrs	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2184      	movs	r1, #132	; 0x84
 8006270:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006272:	23a4      	movs	r3, #164	; 0xa4
 8006274:	18fb      	adds	r3, r7, r3
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2202      	movs	r2, #2
 800627a:	4013      	ands	r3, r2
 800627c:	d011      	beq.n	80062a2 <HAL_UART_IRQHandler+0xf6>
 800627e:	239c      	movs	r3, #156	; 0x9c
 8006280:	18fb      	adds	r3, r7, r3
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2201      	movs	r2, #1
 8006286:	4013      	ands	r3, r2
 8006288:	d00b      	beq.n	80062a2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2202      	movs	r2, #2
 8006290:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2284      	movs	r2, #132	; 0x84
 8006296:	589b      	ldr	r3, [r3, r2]
 8006298:	2204      	movs	r2, #4
 800629a:	431a      	orrs	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2184      	movs	r1, #132	; 0x84
 80062a0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062a2:	23a4      	movs	r3, #164	; 0xa4
 80062a4:	18fb      	adds	r3, r7, r3
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2204      	movs	r2, #4
 80062aa:	4013      	ands	r3, r2
 80062ac:	d011      	beq.n	80062d2 <HAL_UART_IRQHandler+0x126>
 80062ae:	239c      	movs	r3, #156	; 0x9c
 80062b0:	18fb      	adds	r3, r7, r3
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2201      	movs	r2, #1
 80062b6:	4013      	ands	r3, r2
 80062b8:	d00b      	beq.n	80062d2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2204      	movs	r2, #4
 80062c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2284      	movs	r2, #132	; 0x84
 80062c6:	589b      	ldr	r3, [r3, r2]
 80062c8:	2202      	movs	r2, #2
 80062ca:	431a      	orrs	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2184      	movs	r1, #132	; 0x84
 80062d0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80062d2:	23a4      	movs	r3, #164	; 0xa4
 80062d4:	18fb      	adds	r3, r7, r3
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2208      	movs	r2, #8
 80062da:	4013      	ands	r3, r2
 80062dc:	d017      	beq.n	800630e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062de:	23a0      	movs	r3, #160	; 0xa0
 80062e0:	18fb      	adds	r3, r7, r3
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2220      	movs	r2, #32
 80062e6:	4013      	ands	r3, r2
 80062e8:	d105      	bne.n	80062f6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80062ea:	239c      	movs	r3, #156	; 0x9c
 80062ec:	18fb      	adds	r3, r7, r3
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2201      	movs	r2, #1
 80062f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062f4:	d00b      	beq.n	800630e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2208      	movs	r2, #8
 80062fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2284      	movs	r2, #132	; 0x84
 8006302:	589b      	ldr	r3, [r3, r2]
 8006304:	2208      	movs	r2, #8
 8006306:	431a      	orrs	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2184      	movs	r1, #132	; 0x84
 800630c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800630e:	23a4      	movs	r3, #164	; 0xa4
 8006310:	18fb      	adds	r3, r7, r3
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	2380      	movs	r3, #128	; 0x80
 8006316:	011b      	lsls	r3, r3, #4
 8006318:	4013      	ands	r3, r2
 800631a:	d013      	beq.n	8006344 <HAL_UART_IRQHandler+0x198>
 800631c:	23a0      	movs	r3, #160	; 0xa0
 800631e:	18fb      	adds	r3, r7, r3
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	2380      	movs	r3, #128	; 0x80
 8006324:	04db      	lsls	r3, r3, #19
 8006326:	4013      	ands	r3, r2
 8006328:	d00c      	beq.n	8006344 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2280      	movs	r2, #128	; 0x80
 8006330:	0112      	lsls	r2, r2, #4
 8006332:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2284      	movs	r2, #132	; 0x84
 8006338:	589b      	ldr	r3, [r3, r2]
 800633a:	2220      	movs	r2, #32
 800633c:	431a      	orrs	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2184      	movs	r1, #132	; 0x84
 8006342:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2284      	movs	r2, #132	; 0x84
 8006348:	589b      	ldr	r3, [r3, r2]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d100      	bne.n	8006350 <HAL_UART_IRQHandler+0x1a4>
 800634e:	e201      	b.n	8006754 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006350:	23a4      	movs	r3, #164	; 0xa4
 8006352:	18fb      	adds	r3, r7, r3
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2220      	movs	r2, #32
 8006358:	4013      	ands	r3, r2
 800635a:	d00e      	beq.n	800637a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800635c:	23a0      	movs	r3, #160	; 0xa0
 800635e:	18fb      	adds	r3, r7, r3
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2220      	movs	r2, #32
 8006364:	4013      	ands	r3, r2
 8006366:	d008      	beq.n	800637a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800636c:	2b00      	cmp	r3, #0
 800636e:	d004      	beq.n	800637a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	0010      	movs	r0, r2
 8006378:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2284      	movs	r2, #132	; 0x84
 800637e:	589b      	ldr	r3, [r3, r2]
 8006380:	2194      	movs	r1, #148	; 0x94
 8006382:	187a      	adds	r2, r7, r1
 8006384:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	2240      	movs	r2, #64	; 0x40
 800638e:	4013      	ands	r3, r2
 8006390:	2b40      	cmp	r3, #64	; 0x40
 8006392:	d004      	beq.n	800639e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006394:	187b      	adds	r3, r7, r1
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2228      	movs	r2, #40	; 0x28
 800639a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800639c:	d047      	beq.n	800642e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	0018      	movs	r0, r3
 80063a2:	f000 fe11 	bl	8006fc8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	2240      	movs	r2, #64	; 0x40
 80063ae:	4013      	ands	r3, r2
 80063b0:	2b40      	cmp	r3, #64	; 0x40
 80063b2:	d137      	bne.n	8006424 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063b4:	f3ef 8310 	mrs	r3, PRIMASK
 80063b8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80063ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063bc:	2090      	movs	r0, #144	; 0x90
 80063be:	183a      	adds	r2, r7, r0
 80063c0:	6013      	str	r3, [r2, #0]
 80063c2:	2301      	movs	r3, #1
 80063c4:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063c8:	f383 8810 	msr	PRIMASK, r3
}
 80063cc:	46c0      	nop			; (mov r8, r8)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2140      	movs	r1, #64	; 0x40
 80063da:	438a      	bics	r2, r1
 80063dc:	609a      	str	r2, [r3, #8]
 80063de:	183b      	adds	r3, r7, r0
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063e6:	f383 8810 	msr	PRIMASK, r3
}
 80063ea:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d012      	beq.n	800641a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063f8:	4a14      	ldr	r2, [pc, #80]	; (800644c <HAL_UART_IRQHandler+0x2a0>)
 80063fa:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006400:	0018      	movs	r0, r3
 8006402:	f7fc fc0d 	bl	8002c20 <HAL_DMA_Abort_IT>
 8006406:	1e03      	subs	r3, r0, #0
 8006408:	d01a      	beq.n	8006440 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800640e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006414:	0018      	movs	r0, r3
 8006416:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006418:	e012      	b.n	8006440 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	0018      	movs	r0, r3
 800641e:	f000 f9af 	bl	8006780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006422:	e00d      	b.n	8006440 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	0018      	movs	r0, r3
 8006428:	f000 f9aa 	bl	8006780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800642c:	e008      	b.n	8006440 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	0018      	movs	r0, r3
 8006432:	f000 f9a5 	bl	8006780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2284      	movs	r2, #132	; 0x84
 800643a:	2100      	movs	r1, #0
 800643c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800643e:	e189      	b.n	8006754 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006440:	46c0      	nop			; (mov r8, r8)
    return;
 8006442:	e187      	b.n	8006754 <HAL_UART_IRQHandler+0x5a8>
 8006444:	0000080f 	.word	0x0000080f
 8006448:	04000120 	.word	0x04000120
 800644c:	08007091 	.word	0x08007091

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006454:	2b01      	cmp	r3, #1
 8006456:	d000      	beq.n	800645a <HAL_UART_IRQHandler+0x2ae>
 8006458:	e13b      	b.n	80066d2 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800645a:	23a4      	movs	r3, #164	; 0xa4
 800645c:	18fb      	adds	r3, r7, r3
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2210      	movs	r2, #16
 8006462:	4013      	ands	r3, r2
 8006464:	d100      	bne.n	8006468 <HAL_UART_IRQHandler+0x2bc>
 8006466:	e134      	b.n	80066d2 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006468:	23a0      	movs	r3, #160	; 0xa0
 800646a:	18fb      	adds	r3, r7, r3
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2210      	movs	r2, #16
 8006470:	4013      	ands	r3, r2
 8006472:	d100      	bne.n	8006476 <HAL_UART_IRQHandler+0x2ca>
 8006474:	e12d      	b.n	80066d2 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2210      	movs	r2, #16
 800647c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	2240      	movs	r2, #64	; 0x40
 8006486:	4013      	ands	r3, r2
 8006488:	2b40      	cmp	r3, #64	; 0x40
 800648a:	d000      	beq.n	800648e <HAL_UART_IRQHandler+0x2e2>
 800648c:	e0a1      	b.n	80065d2 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	217e      	movs	r1, #126	; 0x7e
 8006498:	187b      	adds	r3, r7, r1
 800649a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800649c:	187b      	adds	r3, r7, r1
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d100      	bne.n	80064a6 <HAL_UART_IRQHandler+0x2fa>
 80064a4:	e158      	b.n	8006758 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2258      	movs	r2, #88	; 0x58
 80064aa:	5a9b      	ldrh	r3, [r3, r2]
 80064ac:	187a      	adds	r2, r7, r1
 80064ae:	8812      	ldrh	r2, [r2, #0]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d300      	bcc.n	80064b6 <HAL_UART_IRQHandler+0x30a>
 80064b4:	e150      	b.n	8006758 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	187a      	adds	r2, r7, r1
 80064ba:	215a      	movs	r1, #90	; 0x5a
 80064bc:	8812      	ldrh	r2, [r2, #0]
 80064be:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2220      	movs	r2, #32
 80064ca:	4013      	ands	r3, r2
 80064cc:	d16f      	bne.n	80065ae <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ce:	f3ef 8310 	mrs	r3, PRIMASK
 80064d2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80064d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80064d8:	2301      	movs	r3, #1
 80064da:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064de:	f383 8810 	msr	PRIMASK, r3
}
 80064e2:	46c0      	nop			; (mov r8, r8)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	499e      	ldr	r1, [pc, #632]	; (8006768 <HAL_UART_IRQHandler+0x5bc>)
 80064f0:	400a      	ands	r2, r1
 80064f2:	601a      	str	r2, [r3, #0]
 80064f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fa:	f383 8810 	msr	PRIMASK, r3
}
 80064fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006500:	f3ef 8310 	mrs	r3, PRIMASK
 8006504:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006508:	677b      	str	r3, [r7, #116]	; 0x74
 800650a:	2301      	movs	r3, #1
 800650c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800650e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006510:	f383 8810 	msr	PRIMASK, r3
}
 8006514:	46c0      	nop			; (mov r8, r8)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	689a      	ldr	r2, [r3, #8]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2101      	movs	r1, #1
 8006522:	438a      	bics	r2, r1
 8006524:	609a      	str	r2, [r3, #8]
 8006526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006528:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800652a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800652c:	f383 8810 	msr	PRIMASK, r3
}
 8006530:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006532:	f3ef 8310 	mrs	r3, PRIMASK
 8006536:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006538:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800653a:	673b      	str	r3, [r7, #112]	; 0x70
 800653c:	2301      	movs	r3, #1
 800653e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006542:	f383 8810 	msr	PRIMASK, r3
}
 8006546:	46c0      	nop			; (mov r8, r8)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689a      	ldr	r2, [r3, #8]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2140      	movs	r1, #64	; 0x40
 8006554:	438a      	bics	r2, r1
 8006556:	609a      	str	r2, [r3, #8]
 8006558:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800655a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800655c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800655e:	f383 8810 	msr	PRIMASK, r3
}
 8006562:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2280      	movs	r2, #128	; 0x80
 8006568:	2120      	movs	r1, #32
 800656a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006572:	f3ef 8310 	mrs	r3, PRIMASK
 8006576:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006578:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800657a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800657c:	2301      	movs	r3, #1
 800657e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006580:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006582:	f383 8810 	msr	PRIMASK, r3
}
 8006586:	46c0      	nop			; (mov r8, r8)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2110      	movs	r1, #16
 8006594:	438a      	bics	r2, r1
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800659a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800659c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800659e:	f383 8810 	msr	PRIMASK, r3
}
 80065a2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065a8:	0018      	movs	r0, r3
 80065aa:	f7fc faf9 	bl	8002ba0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2202      	movs	r2, #2
 80065b2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2258      	movs	r2, #88	; 0x58
 80065b8:	5a9a      	ldrh	r2, [r3, r2]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	215a      	movs	r1, #90	; 0x5a
 80065be:	5a5b      	ldrh	r3, [r3, r1]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	0011      	movs	r1, r2
 80065ca:	0018      	movs	r0, r3
 80065cc:	f000 f8e0 	bl	8006790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80065d0:	e0c2      	b.n	8006758 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2258      	movs	r2, #88	; 0x58
 80065d6:	5a99      	ldrh	r1, [r3, r2]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	225a      	movs	r2, #90	; 0x5a
 80065dc:	5a9b      	ldrh	r3, [r3, r2]
 80065de:	b29a      	uxth	r2, r3
 80065e0:	208e      	movs	r0, #142	; 0x8e
 80065e2:	183b      	adds	r3, r7, r0
 80065e4:	1a8a      	subs	r2, r1, r2
 80065e6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	225a      	movs	r2, #90	; 0x5a
 80065ec:	5a9b      	ldrh	r3, [r3, r2]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d100      	bne.n	80065f6 <HAL_UART_IRQHandler+0x44a>
 80065f4:	e0b2      	b.n	800675c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80065f6:	183b      	adds	r3, r7, r0
 80065f8:	881b      	ldrh	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d100      	bne.n	8006600 <HAL_UART_IRQHandler+0x454>
 80065fe:	e0ad      	b.n	800675c <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006600:	f3ef 8310 	mrs	r3, PRIMASK
 8006604:	60fb      	str	r3, [r7, #12]
  return(result);
 8006606:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006608:	2488      	movs	r4, #136	; 0x88
 800660a:	193a      	adds	r2, r7, r4
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	2301      	movs	r3, #1
 8006610:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	f383 8810 	msr	PRIMASK, r3
}
 8006618:	46c0      	nop			; (mov r8, r8)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4951      	ldr	r1, [pc, #324]	; (800676c <HAL_UART_IRQHandler+0x5c0>)
 8006626:	400a      	ands	r2, r1
 8006628:	601a      	str	r2, [r3, #0]
 800662a:	193b      	adds	r3, r7, r4
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	f383 8810 	msr	PRIMASK, r3
}
 8006636:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006638:	f3ef 8310 	mrs	r3, PRIMASK
 800663c:	61bb      	str	r3, [r7, #24]
  return(result);
 800663e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006640:	2484      	movs	r4, #132	; 0x84
 8006642:	193a      	adds	r2, r7, r4
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	2301      	movs	r3, #1
 8006648:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	f383 8810 	msr	PRIMASK, r3
}
 8006650:	46c0      	nop			; (mov r8, r8)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2101      	movs	r1, #1
 800665e:	438a      	bics	r2, r1
 8006660:	609a      	str	r2, [r3, #8]
 8006662:	193b      	adds	r3, r7, r4
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	f383 8810 	msr	PRIMASK, r3
}
 800666e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2280      	movs	r2, #128	; 0x80
 8006674:	2120      	movs	r1, #32
 8006676:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006684:	f3ef 8310 	mrs	r3, PRIMASK
 8006688:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800668c:	2480      	movs	r4, #128	; 0x80
 800668e:	193a      	adds	r2, r7, r4
 8006690:	6013      	str	r3, [r2, #0]
 8006692:	2301      	movs	r3, #1
 8006694:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006698:	f383 8810 	msr	PRIMASK, r3
}
 800669c:	46c0      	nop			; (mov r8, r8)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2110      	movs	r1, #16
 80066aa:	438a      	bics	r2, r1
 80066ac:	601a      	str	r2, [r3, #0]
 80066ae:	193b      	adds	r3, r7, r4
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b6:	f383 8810 	msr	PRIMASK, r3
}
 80066ba:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2202      	movs	r2, #2
 80066c0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066c2:	183b      	adds	r3, r7, r0
 80066c4:	881a      	ldrh	r2, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	0011      	movs	r1, r2
 80066ca:	0018      	movs	r0, r3
 80066cc:	f000 f860 	bl	8006790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066d0:	e044      	b.n	800675c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80066d2:	23a4      	movs	r3, #164	; 0xa4
 80066d4:	18fb      	adds	r3, r7, r3
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	2380      	movs	r3, #128	; 0x80
 80066da:	035b      	lsls	r3, r3, #13
 80066dc:	4013      	ands	r3, r2
 80066de:	d010      	beq.n	8006702 <HAL_UART_IRQHandler+0x556>
 80066e0:	239c      	movs	r3, #156	; 0x9c
 80066e2:	18fb      	adds	r3, r7, r3
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	2380      	movs	r3, #128	; 0x80
 80066e8:	03db      	lsls	r3, r3, #15
 80066ea:	4013      	ands	r3, r2
 80066ec:	d009      	beq.n	8006702 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2280      	movs	r2, #128	; 0x80
 80066f4:	0352      	lsls	r2, r2, #13
 80066f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	0018      	movs	r0, r3
 80066fc:	f000 fd0a 	bl	8007114 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006700:	e02f      	b.n	8006762 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006702:	23a4      	movs	r3, #164	; 0xa4
 8006704:	18fb      	adds	r3, r7, r3
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2280      	movs	r2, #128	; 0x80
 800670a:	4013      	ands	r3, r2
 800670c:	d00f      	beq.n	800672e <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800670e:	23a0      	movs	r3, #160	; 0xa0
 8006710:	18fb      	adds	r3, r7, r3
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2280      	movs	r2, #128	; 0x80
 8006716:	4013      	ands	r3, r2
 8006718:	d009      	beq.n	800672e <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800671e:	2b00      	cmp	r3, #0
 8006720:	d01e      	beq.n	8006760 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	0010      	movs	r0, r2
 800672a:	4798      	blx	r3
    }
    return;
 800672c:	e018      	b.n	8006760 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800672e:	23a4      	movs	r3, #164	; 0xa4
 8006730:	18fb      	adds	r3, r7, r3
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2240      	movs	r2, #64	; 0x40
 8006736:	4013      	ands	r3, r2
 8006738:	d013      	beq.n	8006762 <HAL_UART_IRQHandler+0x5b6>
 800673a:	23a0      	movs	r3, #160	; 0xa0
 800673c:	18fb      	adds	r3, r7, r3
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2240      	movs	r2, #64	; 0x40
 8006742:	4013      	ands	r3, r2
 8006744:	d00d      	beq.n	8006762 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	0018      	movs	r0, r3
 800674a:	f000 fcb8 	bl	80070be <UART_EndTransmit_IT>
    return;
 800674e:	e008      	b.n	8006762 <HAL_UART_IRQHandler+0x5b6>
      return;
 8006750:	46c0      	nop			; (mov r8, r8)
 8006752:	e006      	b.n	8006762 <HAL_UART_IRQHandler+0x5b6>
    return;
 8006754:	46c0      	nop			; (mov r8, r8)
 8006756:	e004      	b.n	8006762 <HAL_UART_IRQHandler+0x5b6>
      return;
 8006758:	46c0      	nop			; (mov r8, r8)
 800675a:	e002      	b.n	8006762 <HAL_UART_IRQHandler+0x5b6>
      return;
 800675c:	46c0      	nop			; (mov r8, r8)
 800675e:	e000      	b.n	8006762 <HAL_UART_IRQHandler+0x5b6>
    return;
 8006760:	46c0      	nop			; (mov r8, r8)
  }

}
 8006762:	46bd      	mov	sp, r7
 8006764:	b02b      	add	sp, #172	; 0xac
 8006766:	bd90      	pop	{r4, r7, pc}
 8006768:	fffffeff 	.word	0xfffffeff
 800676c:	fffffedf 	.word	0xfffffedf

08006770 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006778:	46c0      	nop			; (mov r8, r8)
 800677a:	46bd      	mov	sp, r7
 800677c:	b002      	add	sp, #8
 800677e:	bd80      	pop	{r7, pc}

08006780 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006788:	46c0      	nop			; (mov r8, r8)
 800678a:	46bd      	mov	sp, r7
 800678c:	b002      	add	sp, #8
 800678e:	bd80      	pop	{r7, pc}

08006790 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	000a      	movs	r2, r1
 800679a:	1cbb      	adds	r3, r7, #2
 800679c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800679e:	46c0      	nop			; (mov r8, r8)
 80067a0:	46bd      	mov	sp, r7
 80067a2:	b002      	add	sp, #8
 80067a4:	bd80      	pop	{r7, pc}
	...

080067a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067a8:	b5b0      	push	{r4, r5, r7, lr}
 80067aa:	b08e      	sub	sp, #56	; 0x38
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067b0:	231a      	movs	r3, #26
 80067b2:	2218      	movs	r2, #24
 80067b4:	189b      	adds	r3, r3, r2
 80067b6:	19db      	adds	r3, r3, r7
 80067b8:	2200      	movs	r2, #0
 80067ba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	689a      	ldr	r2, [r3, #8]
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	431a      	orrs	r2, r3
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	431a      	orrs	r2, r3
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4ab4      	ldr	r2, [pc, #720]	; (8006aac <UART_SetConfig+0x304>)
 80067dc:	4013      	ands	r3, r2
 80067de:	0019      	movs	r1, r3
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067e6:	430a      	orrs	r2, r1
 80067e8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	4aaf      	ldr	r2, [pc, #700]	; (8006ab0 <UART_SetConfig+0x308>)
 80067f2:	4013      	ands	r3, r2
 80067f4:	0019      	movs	r1, r3
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	68da      	ldr	r2, [r3, #12]
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	430a      	orrs	r2, r1
 8006800:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4aa9      	ldr	r2, [pc, #676]	; (8006ab4 <UART_SetConfig+0x30c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d004      	beq.n	800681c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006818:	4313      	orrs	r3, r2
 800681a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	4aa5      	ldr	r2, [pc, #660]	; (8006ab8 <UART_SetConfig+0x310>)
 8006824:	4013      	ands	r3, r2
 8006826:	0019      	movs	r1, r3
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800682e:	430a      	orrs	r2, r1
 8006830:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4aa1      	ldr	r2, [pc, #644]	; (8006abc <UART_SetConfig+0x314>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d131      	bne.n	80068a0 <UART_SetConfig+0xf8>
 800683c:	4ba0      	ldr	r3, [pc, #640]	; (8006ac0 <UART_SetConfig+0x318>)
 800683e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006840:	220c      	movs	r2, #12
 8006842:	4013      	ands	r3, r2
 8006844:	2b0c      	cmp	r3, #12
 8006846:	d01d      	beq.n	8006884 <UART_SetConfig+0xdc>
 8006848:	d823      	bhi.n	8006892 <UART_SetConfig+0xea>
 800684a:	2b08      	cmp	r3, #8
 800684c:	d00c      	beq.n	8006868 <UART_SetConfig+0xc0>
 800684e:	d820      	bhi.n	8006892 <UART_SetConfig+0xea>
 8006850:	2b00      	cmp	r3, #0
 8006852:	d002      	beq.n	800685a <UART_SetConfig+0xb2>
 8006854:	2b04      	cmp	r3, #4
 8006856:	d00e      	beq.n	8006876 <UART_SetConfig+0xce>
 8006858:	e01b      	b.n	8006892 <UART_SetConfig+0xea>
 800685a:	231b      	movs	r3, #27
 800685c:	2218      	movs	r2, #24
 800685e:	189b      	adds	r3, r3, r2
 8006860:	19db      	adds	r3, r3, r7
 8006862:	2200      	movs	r2, #0
 8006864:	701a      	strb	r2, [r3, #0]
 8006866:	e065      	b.n	8006934 <UART_SetConfig+0x18c>
 8006868:	231b      	movs	r3, #27
 800686a:	2218      	movs	r2, #24
 800686c:	189b      	adds	r3, r3, r2
 800686e:	19db      	adds	r3, r3, r7
 8006870:	2202      	movs	r2, #2
 8006872:	701a      	strb	r2, [r3, #0]
 8006874:	e05e      	b.n	8006934 <UART_SetConfig+0x18c>
 8006876:	231b      	movs	r3, #27
 8006878:	2218      	movs	r2, #24
 800687a:	189b      	adds	r3, r3, r2
 800687c:	19db      	adds	r3, r3, r7
 800687e:	2204      	movs	r2, #4
 8006880:	701a      	strb	r2, [r3, #0]
 8006882:	e057      	b.n	8006934 <UART_SetConfig+0x18c>
 8006884:	231b      	movs	r3, #27
 8006886:	2218      	movs	r2, #24
 8006888:	189b      	adds	r3, r3, r2
 800688a:	19db      	adds	r3, r3, r7
 800688c:	2208      	movs	r2, #8
 800688e:	701a      	strb	r2, [r3, #0]
 8006890:	e050      	b.n	8006934 <UART_SetConfig+0x18c>
 8006892:	231b      	movs	r3, #27
 8006894:	2218      	movs	r2, #24
 8006896:	189b      	adds	r3, r3, r2
 8006898:	19db      	adds	r3, r3, r7
 800689a:	2210      	movs	r2, #16
 800689c:	701a      	strb	r2, [r3, #0]
 800689e:	e049      	b.n	8006934 <UART_SetConfig+0x18c>
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a83      	ldr	r2, [pc, #524]	; (8006ab4 <UART_SetConfig+0x30c>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d13e      	bne.n	8006928 <UART_SetConfig+0x180>
 80068aa:	4b85      	ldr	r3, [pc, #532]	; (8006ac0 <UART_SetConfig+0x318>)
 80068ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068ae:	23c0      	movs	r3, #192	; 0xc0
 80068b0:	011b      	lsls	r3, r3, #4
 80068b2:	4013      	ands	r3, r2
 80068b4:	22c0      	movs	r2, #192	; 0xc0
 80068b6:	0112      	lsls	r2, r2, #4
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d027      	beq.n	800690c <UART_SetConfig+0x164>
 80068bc:	22c0      	movs	r2, #192	; 0xc0
 80068be:	0112      	lsls	r2, r2, #4
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d82a      	bhi.n	800691a <UART_SetConfig+0x172>
 80068c4:	2280      	movs	r2, #128	; 0x80
 80068c6:	0112      	lsls	r2, r2, #4
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d011      	beq.n	80068f0 <UART_SetConfig+0x148>
 80068cc:	2280      	movs	r2, #128	; 0x80
 80068ce:	0112      	lsls	r2, r2, #4
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d822      	bhi.n	800691a <UART_SetConfig+0x172>
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d004      	beq.n	80068e2 <UART_SetConfig+0x13a>
 80068d8:	2280      	movs	r2, #128	; 0x80
 80068da:	00d2      	lsls	r2, r2, #3
 80068dc:	4293      	cmp	r3, r2
 80068de:	d00e      	beq.n	80068fe <UART_SetConfig+0x156>
 80068e0:	e01b      	b.n	800691a <UART_SetConfig+0x172>
 80068e2:	231b      	movs	r3, #27
 80068e4:	2218      	movs	r2, #24
 80068e6:	189b      	adds	r3, r3, r2
 80068e8:	19db      	adds	r3, r3, r7
 80068ea:	2200      	movs	r2, #0
 80068ec:	701a      	strb	r2, [r3, #0]
 80068ee:	e021      	b.n	8006934 <UART_SetConfig+0x18c>
 80068f0:	231b      	movs	r3, #27
 80068f2:	2218      	movs	r2, #24
 80068f4:	189b      	adds	r3, r3, r2
 80068f6:	19db      	adds	r3, r3, r7
 80068f8:	2202      	movs	r2, #2
 80068fa:	701a      	strb	r2, [r3, #0]
 80068fc:	e01a      	b.n	8006934 <UART_SetConfig+0x18c>
 80068fe:	231b      	movs	r3, #27
 8006900:	2218      	movs	r2, #24
 8006902:	189b      	adds	r3, r3, r2
 8006904:	19db      	adds	r3, r3, r7
 8006906:	2204      	movs	r2, #4
 8006908:	701a      	strb	r2, [r3, #0]
 800690a:	e013      	b.n	8006934 <UART_SetConfig+0x18c>
 800690c:	231b      	movs	r3, #27
 800690e:	2218      	movs	r2, #24
 8006910:	189b      	adds	r3, r3, r2
 8006912:	19db      	adds	r3, r3, r7
 8006914:	2208      	movs	r2, #8
 8006916:	701a      	strb	r2, [r3, #0]
 8006918:	e00c      	b.n	8006934 <UART_SetConfig+0x18c>
 800691a:	231b      	movs	r3, #27
 800691c:	2218      	movs	r2, #24
 800691e:	189b      	adds	r3, r3, r2
 8006920:	19db      	adds	r3, r3, r7
 8006922:	2210      	movs	r2, #16
 8006924:	701a      	strb	r2, [r3, #0]
 8006926:	e005      	b.n	8006934 <UART_SetConfig+0x18c>
 8006928:	231b      	movs	r3, #27
 800692a:	2218      	movs	r2, #24
 800692c:	189b      	adds	r3, r3, r2
 800692e:	19db      	adds	r3, r3, r7
 8006930:	2210      	movs	r2, #16
 8006932:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a5e      	ldr	r2, [pc, #376]	; (8006ab4 <UART_SetConfig+0x30c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d000      	beq.n	8006940 <UART_SetConfig+0x198>
 800693e:	e084      	b.n	8006a4a <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006940:	231b      	movs	r3, #27
 8006942:	2218      	movs	r2, #24
 8006944:	189b      	adds	r3, r3, r2
 8006946:	19db      	adds	r3, r3, r7
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	2b08      	cmp	r3, #8
 800694c:	d01d      	beq.n	800698a <UART_SetConfig+0x1e2>
 800694e:	dc20      	bgt.n	8006992 <UART_SetConfig+0x1ea>
 8006950:	2b04      	cmp	r3, #4
 8006952:	d015      	beq.n	8006980 <UART_SetConfig+0x1d8>
 8006954:	dc1d      	bgt.n	8006992 <UART_SetConfig+0x1ea>
 8006956:	2b00      	cmp	r3, #0
 8006958:	d002      	beq.n	8006960 <UART_SetConfig+0x1b8>
 800695a:	2b02      	cmp	r3, #2
 800695c:	d005      	beq.n	800696a <UART_SetConfig+0x1c2>
 800695e:	e018      	b.n	8006992 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006960:	f7fe fcc2 	bl	80052e8 <HAL_RCC_GetPCLK1Freq>
 8006964:	0003      	movs	r3, r0
 8006966:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006968:	e01c      	b.n	80069a4 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800696a:	4b55      	ldr	r3, [pc, #340]	; (8006ac0 <UART_SetConfig+0x318>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2210      	movs	r2, #16
 8006970:	4013      	ands	r3, r2
 8006972:	d002      	beq.n	800697a <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006974:	4b53      	ldr	r3, [pc, #332]	; (8006ac4 <UART_SetConfig+0x31c>)
 8006976:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006978:	e014      	b.n	80069a4 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 800697a:	4b53      	ldr	r3, [pc, #332]	; (8006ac8 <UART_SetConfig+0x320>)
 800697c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800697e:	e011      	b.n	80069a4 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006980:	f7fe fc02 	bl	8005188 <HAL_RCC_GetSysClockFreq>
 8006984:	0003      	movs	r3, r0
 8006986:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006988:	e00c      	b.n	80069a4 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800698a:	2380      	movs	r3, #128	; 0x80
 800698c:	021b      	lsls	r3, r3, #8
 800698e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006990:	e008      	b.n	80069a4 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8006992:	2300      	movs	r3, #0
 8006994:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006996:	231a      	movs	r3, #26
 8006998:	2218      	movs	r2, #24
 800699a:	189b      	adds	r3, r3, r2
 800699c:	19db      	adds	r3, r3, r7
 800699e:	2201      	movs	r2, #1
 80069a0:	701a      	strb	r2, [r3, #0]
        break;
 80069a2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d100      	bne.n	80069ac <UART_SetConfig+0x204>
 80069aa:	e12f      	b.n	8006c0c <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	0013      	movs	r3, r2
 80069b2:	005b      	lsls	r3, r3, #1
 80069b4:	189b      	adds	r3, r3, r2
 80069b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d305      	bcc.n	80069c8 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d906      	bls.n	80069d6 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 80069c8:	231a      	movs	r3, #26
 80069ca:	2218      	movs	r2, #24
 80069cc:	189b      	adds	r3, r3, r2
 80069ce:	19db      	adds	r3, r3, r7
 80069d0:	2201      	movs	r2, #1
 80069d2:	701a      	strb	r2, [r3, #0]
 80069d4:	e11a      	b.n	8006c0c <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80069d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d8:	613b      	str	r3, [r7, #16]
 80069da:	2300      	movs	r3, #0
 80069dc:	617b      	str	r3, [r7, #20]
 80069de:	6939      	ldr	r1, [r7, #16]
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	000b      	movs	r3, r1
 80069e4:	0e1b      	lsrs	r3, r3, #24
 80069e6:	0010      	movs	r0, r2
 80069e8:	0205      	lsls	r5, r0, #8
 80069ea:	431d      	orrs	r5, r3
 80069ec:	000b      	movs	r3, r1
 80069ee:	021c      	lsls	r4, r3, #8
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	085b      	lsrs	r3, r3, #1
 80069f6:	60bb      	str	r3, [r7, #8]
 80069f8:	2300      	movs	r3, #0
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	68b8      	ldr	r0, [r7, #8]
 80069fe:	68f9      	ldr	r1, [r7, #12]
 8006a00:	1900      	adds	r0, r0, r4
 8006a02:	4169      	adcs	r1, r5
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	603b      	str	r3, [r7, #0]
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	607b      	str	r3, [r7, #4]
 8006a0e:	683a      	ldr	r2, [r7, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f7f9 fcf9 	bl	8000408 <__aeabi_uldivmod>
 8006a16:	0002      	movs	r2, r0
 8006a18:	000b      	movs	r3, r1
 8006a1a:	0013      	movs	r3, r2
 8006a1c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a20:	23c0      	movs	r3, #192	; 0xc0
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d309      	bcc.n	8006a3c <UART_SetConfig+0x294>
 8006a28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a2a:	2380      	movs	r3, #128	; 0x80
 8006a2c:	035b      	lsls	r3, r3, #13
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d204      	bcs.n	8006a3c <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a38:	60da      	str	r2, [r3, #12]
 8006a3a:	e0e7      	b.n	8006c0c <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8006a3c:	231a      	movs	r3, #26
 8006a3e:	2218      	movs	r2, #24
 8006a40:	189b      	adds	r3, r3, r2
 8006a42:	19db      	adds	r3, r3, r7
 8006a44:	2201      	movs	r2, #1
 8006a46:	701a      	strb	r2, [r3, #0]
 8006a48:	e0e0      	b.n	8006c0c <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	69da      	ldr	r2, [r3, #28]
 8006a4e:	2380      	movs	r3, #128	; 0x80
 8006a50:	021b      	lsls	r3, r3, #8
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d000      	beq.n	8006a58 <UART_SetConfig+0x2b0>
 8006a56:	e082      	b.n	8006b5e <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8006a58:	231b      	movs	r3, #27
 8006a5a:	2218      	movs	r2, #24
 8006a5c:	189b      	adds	r3, r3, r2
 8006a5e:	19db      	adds	r3, r3, r7
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	2b08      	cmp	r3, #8
 8006a64:	d834      	bhi.n	8006ad0 <UART_SetConfig+0x328>
 8006a66:	009a      	lsls	r2, r3, #2
 8006a68:	4b18      	ldr	r3, [pc, #96]	; (8006acc <UART_SetConfig+0x324>)
 8006a6a:	18d3      	adds	r3, r2, r3
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a70:	f7fe fc3a 	bl	80052e8 <HAL_RCC_GetPCLK1Freq>
 8006a74:	0003      	movs	r3, r0
 8006a76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a78:	e033      	b.n	8006ae2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a7a:	f7fe fc4b 	bl	8005314 <HAL_RCC_GetPCLK2Freq>
 8006a7e:	0003      	movs	r3, r0
 8006a80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a82:	e02e      	b.n	8006ae2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a84:	4b0e      	ldr	r3, [pc, #56]	; (8006ac0 <UART_SetConfig+0x318>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2210      	movs	r2, #16
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	d002      	beq.n	8006a94 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006a8e:	4b0d      	ldr	r3, [pc, #52]	; (8006ac4 <UART_SetConfig+0x31c>)
 8006a90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a92:	e026      	b.n	8006ae2 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8006a94:	4b0c      	ldr	r3, [pc, #48]	; (8006ac8 <UART_SetConfig+0x320>)
 8006a96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a98:	e023      	b.n	8006ae2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a9a:	f7fe fb75 	bl	8005188 <HAL_RCC_GetSysClockFreq>
 8006a9e:	0003      	movs	r3, r0
 8006aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006aa2:	e01e      	b.n	8006ae2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aa4:	2380      	movs	r3, #128	; 0x80
 8006aa6:	021b      	lsls	r3, r3, #8
 8006aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006aaa:	e01a      	b.n	8006ae2 <UART_SetConfig+0x33a>
 8006aac:	efff69f3 	.word	0xefff69f3
 8006ab0:	ffffcfff 	.word	0xffffcfff
 8006ab4:	40004800 	.word	0x40004800
 8006ab8:	fffff4ff 	.word	0xfffff4ff
 8006abc:	40004400 	.word	0x40004400
 8006ac0:	40021000 	.word	0x40021000
 8006ac4:	003d0900 	.word	0x003d0900
 8006ac8:	00f42400 	.word	0x00f42400
 8006acc:	08007b0c 	.word	0x08007b0c
      default:
        pclk = 0U;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006ad4:	231a      	movs	r3, #26
 8006ad6:	2218      	movs	r2, #24
 8006ad8:	189b      	adds	r3, r3, r2
 8006ada:	19db      	adds	r3, r3, r7
 8006adc:	2201      	movs	r2, #1
 8006ade:	701a      	strb	r2, [r3, #0]
        break;
 8006ae0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d100      	bne.n	8006aea <UART_SetConfig+0x342>
 8006ae8:	e090      	b.n	8006c0c <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aec:	005a      	lsls	r2, r3, #1
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	085b      	lsrs	r3, r3, #1
 8006af4:	18d2      	adds	r2, r2, r3
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	0019      	movs	r1, r3
 8006afc:	0010      	movs	r0, r2
 8006afe:	f7f9 fb0d 	bl	800011c <__udivsi3>
 8006b02:	0003      	movs	r3, r0
 8006b04:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b08:	2b0f      	cmp	r3, #15
 8006b0a:	d921      	bls.n	8006b50 <UART_SetConfig+0x3a8>
 8006b0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b0e:	2380      	movs	r3, #128	; 0x80
 8006b10:	025b      	lsls	r3, r3, #9
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d21c      	bcs.n	8006b50 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	200e      	movs	r0, #14
 8006b1c:	2418      	movs	r4, #24
 8006b1e:	1903      	adds	r3, r0, r4
 8006b20:	19db      	adds	r3, r3, r7
 8006b22:	210f      	movs	r1, #15
 8006b24:	438a      	bics	r2, r1
 8006b26:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2a:	085b      	lsrs	r3, r3, #1
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	2207      	movs	r2, #7
 8006b30:	4013      	ands	r3, r2
 8006b32:	b299      	uxth	r1, r3
 8006b34:	1903      	adds	r3, r0, r4
 8006b36:	19db      	adds	r3, r3, r7
 8006b38:	1902      	adds	r2, r0, r4
 8006b3a:	19d2      	adds	r2, r2, r7
 8006b3c:	8812      	ldrh	r2, [r2, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	1902      	adds	r2, r0, r4
 8006b48:	19d2      	adds	r2, r2, r7
 8006b4a:	8812      	ldrh	r2, [r2, #0]
 8006b4c:	60da      	str	r2, [r3, #12]
 8006b4e:	e05d      	b.n	8006c0c <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8006b50:	231a      	movs	r3, #26
 8006b52:	2218      	movs	r2, #24
 8006b54:	189b      	adds	r3, r3, r2
 8006b56:	19db      	adds	r3, r3, r7
 8006b58:	2201      	movs	r2, #1
 8006b5a:	701a      	strb	r2, [r3, #0]
 8006b5c:	e056      	b.n	8006c0c <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b5e:	231b      	movs	r3, #27
 8006b60:	2218      	movs	r2, #24
 8006b62:	189b      	adds	r3, r3, r2
 8006b64:	19db      	adds	r3, r3, r7
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	2b08      	cmp	r3, #8
 8006b6a:	d822      	bhi.n	8006bb2 <UART_SetConfig+0x40a>
 8006b6c:	009a      	lsls	r2, r3, #2
 8006b6e:	4b2f      	ldr	r3, [pc, #188]	; (8006c2c <UART_SetConfig+0x484>)
 8006b70:	18d3      	adds	r3, r2, r3
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b76:	f7fe fbb7 	bl	80052e8 <HAL_RCC_GetPCLK1Freq>
 8006b7a:	0003      	movs	r3, r0
 8006b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b7e:	e021      	b.n	8006bc4 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b80:	f7fe fbc8 	bl	8005314 <HAL_RCC_GetPCLK2Freq>
 8006b84:	0003      	movs	r3, r0
 8006b86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b88:	e01c      	b.n	8006bc4 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b8a:	4b29      	ldr	r3, [pc, #164]	; (8006c30 <UART_SetConfig+0x488>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2210      	movs	r2, #16
 8006b90:	4013      	ands	r3, r2
 8006b92:	d002      	beq.n	8006b9a <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006b94:	4b27      	ldr	r3, [pc, #156]	; (8006c34 <UART_SetConfig+0x48c>)
 8006b96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b98:	e014      	b.n	8006bc4 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8006b9a:	4b27      	ldr	r3, [pc, #156]	; (8006c38 <UART_SetConfig+0x490>)
 8006b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b9e:	e011      	b.n	8006bc4 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ba0:	f7fe faf2 	bl	8005188 <HAL_RCC_GetSysClockFreq>
 8006ba4:	0003      	movs	r3, r0
 8006ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ba8:	e00c      	b.n	8006bc4 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006baa:	2380      	movs	r3, #128	; 0x80
 8006bac:	021b      	lsls	r3, r3, #8
 8006bae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bb0:	e008      	b.n	8006bc4 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006bb6:	231a      	movs	r3, #26
 8006bb8:	2218      	movs	r2, #24
 8006bba:	189b      	adds	r3, r3, r2
 8006bbc:	19db      	adds	r3, r3, r7
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	701a      	strb	r2, [r3, #0]
        break;
 8006bc2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d020      	beq.n	8006c0c <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	085a      	lsrs	r2, r3, #1
 8006bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd2:	18d2      	adds	r2, r2, r3
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	0019      	movs	r1, r3
 8006bda:	0010      	movs	r0, r2
 8006bdc:	f7f9 fa9e 	bl	800011c <__udivsi3>
 8006be0:	0003      	movs	r3, r0
 8006be2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be6:	2b0f      	cmp	r3, #15
 8006be8:	d90a      	bls.n	8006c00 <UART_SetConfig+0x458>
 8006bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bec:	2380      	movs	r3, #128	; 0x80
 8006bee:	025b      	lsls	r3, r3, #9
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d205      	bcs.n	8006c00 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	60da      	str	r2, [r3, #12]
 8006bfe:	e005      	b.n	8006c0c <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8006c00:	231a      	movs	r3, #26
 8006c02:	2218      	movs	r2, #24
 8006c04:	189b      	adds	r3, r3, r2
 8006c06:	19db      	adds	r3, r3, r7
 8006c08:	2201      	movs	r2, #1
 8006c0a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	2200      	movs	r2, #0
 8006c16:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006c18:	231a      	movs	r3, #26
 8006c1a:	2218      	movs	r2, #24
 8006c1c:	189b      	adds	r3, r3, r2
 8006c1e:	19db      	adds	r3, r3, r7
 8006c20:	781b      	ldrb	r3, [r3, #0]
}
 8006c22:	0018      	movs	r0, r3
 8006c24:	46bd      	mov	sp, r7
 8006c26:	b00e      	add	sp, #56	; 0x38
 8006c28:	bdb0      	pop	{r4, r5, r7, pc}
 8006c2a:	46c0      	nop			; (mov r8, r8)
 8006c2c:	08007b30 	.word	0x08007b30
 8006c30:	40021000 	.word	0x40021000
 8006c34:	003d0900 	.word	0x003d0900
 8006c38:	00f42400 	.word	0x00f42400

08006c3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c48:	2201      	movs	r2, #1
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	d00b      	beq.n	8006c66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	4a4a      	ldr	r2, [pc, #296]	; (8006d80 <UART_AdvFeatureConfig+0x144>)
 8006c56:	4013      	ands	r3, r2
 8006c58:	0019      	movs	r1, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	430a      	orrs	r2, r1
 8006c64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	d00b      	beq.n	8006c88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	4a43      	ldr	r2, [pc, #268]	; (8006d84 <UART_AdvFeatureConfig+0x148>)
 8006c78:	4013      	ands	r3, r2
 8006c7a:	0019      	movs	r1, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	430a      	orrs	r2, r1
 8006c86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8c:	2204      	movs	r2, #4
 8006c8e:	4013      	ands	r3, r2
 8006c90:	d00b      	beq.n	8006caa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	4a3b      	ldr	r2, [pc, #236]	; (8006d88 <UART_AdvFeatureConfig+0x14c>)
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	0019      	movs	r1, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	2208      	movs	r2, #8
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	d00b      	beq.n	8006ccc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	4a34      	ldr	r2, [pc, #208]	; (8006d8c <UART_AdvFeatureConfig+0x150>)
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	0019      	movs	r1, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	430a      	orrs	r2, r1
 8006cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd0:	2210      	movs	r2, #16
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	d00b      	beq.n	8006cee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	4a2c      	ldr	r2, [pc, #176]	; (8006d90 <UART_AdvFeatureConfig+0x154>)
 8006cde:	4013      	ands	r3, r2
 8006ce0:	0019      	movs	r1, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	d00b      	beq.n	8006d10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	4a25      	ldr	r2, [pc, #148]	; (8006d94 <UART_AdvFeatureConfig+0x158>)
 8006d00:	4013      	ands	r3, r2
 8006d02:	0019      	movs	r1, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d14:	2240      	movs	r2, #64	; 0x40
 8006d16:	4013      	ands	r3, r2
 8006d18:	d01d      	beq.n	8006d56 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	4a1d      	ldr	r2, [pc, #116]	; (8006d98 <UART_AdvFeatureConfig+0x15c>)
 8006d22:	4013      	ands	r3, r2
 8006d24:	0019      	movs	r1, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d36:	2380      	movs	r3, #128	; 0x80
 8006d38:	035b      	lsls	r3, r3, #13
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d10b      	bne.n	8006d56 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	4a15      	ldr	r2, [pc, #84]	; (8006d9c <UART_AdvFeatureConfig+0x160>)
 8006d46:	4013      	ands	r3, r2
 8006d48:	0019      	movs	r1, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	430a      	orrs	r2, r1
 8006d54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5a:	2280      	movs	r2, #128	; 0x80
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	d00b      	beq.n	8006d78 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	4a0e      	ldr	r2, [pc, #56]	; (8006da0 <UART_AdvFeatureConfig+0x164>)
 8006d68:	4013      	ands	r3, r2
 8006d6a:	0019      	movs	r1, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	430a      	orrs	r2, r1
 8006d76:	605a      	str	r2, [r3, #4]
  }
}
 8006d78:	46c0      	nop			; (mov r8, r8)
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	b002      	add	sp, #8
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	fffdffff 	.word	0xfffdffff
 8006d84:	fffeffff 	.word	0xfffeffff
 8006d88:	fffbffff 	.word	0xfffbffff
 8006d8c:	ffff7fff 	.word	0xffff7fff
 8006d90:	ffffefff 	.word	0xffffefff
 8006d94:	ffffdfff 	.word	0xffffdfff
 8006d98:	ffefffff 	.word	0xffefffff
 8006d9c:	ff9fffff 	.word	0xff9fffff
 8006da0:	fff7ffff 	.word	0xfff7ffff

08006da4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b092      	sub	sp, #72	; 0x48
 8006da8:	af02      	add	r7, sp, #8
 8006daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2284      	movs	r2, #132	; 0x84
 8006db0:	2100      	movs	r1, #0
 8006db2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006db4:	f7fb fde8 	bl	8002988 <HAL_GetTick>
 8006db8:	0003      	movs	r3, r0
 8006dba:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2208      	movs	r2, #8
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	2b08      	cmp	r3, #8
 8006dc8:	d12c      	bne.n	8006e24 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dcc:	2280      	movs	r2, #128	; 0x80
 8006dce:	0391      	lsls	r1, r2, #14
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	4a46      	ldr	r2, [pc, #280]	; (8006eec <UART_CheckIdleState+0x148>)
 8006dd4:	9200      	str	r2, [sp, #0]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f000 f88c 	bl	8006ef4 <UART_WaitOnFlagUntilTimeout>
 8006ddc:	1e03      	subs	r3, r0, #0
 8006dde:	d021      	beq.n	8006e24 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006de0:	f3ef 8310 	mrs	r3, PRIMASK
 8006de4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006de8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dea:	2301      	movs	r3, #1
 8006dec:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df0:	f383 8810 	msr	PRIMASK, r3
}
 8006df4:	46c0      	nop			; (mov r8, r8)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2180      	movs	r1, #128	; 0x80
 8006e02:	438a      	bics	r2, r1
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0c:	f383 8810 	msr	PRIMASK, r3
}
 8006e10:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2220      	movs	r2, #32
 8006e16:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2278      	movs	r2, #120	; 0x78
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e05f      	b.n	8006ee4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2204      	movs	r2, #4
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	2b04      	cmp	r3, #4
 8006e30:	d146      	bne.n	8006ec0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e34:	2280      	movs	r2, #128	; 0x80
 8006e36:	03d1      	lsls	r1, r2, #15
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	4a2c      	ldr	r2, [pc, #176]	; (8006eec <UART_CheckIdleState+0x148>)
 8006e3c:	9200      	str	r2, [sp, #0]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f000 f858 	bl	8006ef4 <UART_WaitOnFlagUntilTimeout>
 8006e44:	1e03      	subs	r3, r0, #0
 8006e46:	d03b      	beq.n	8006ec0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e48:	f3ef 8310 	mrs	r3, PRIMASK
 8006e4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e50:	637b      	str	r3, [r7, #52]	; 0x34
 8006e52:	2301      	movs	r3, #1
 8006e54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	f383 8810 	msr	PRIMASK, r3
}
 8006e5c:	46c0      	nop			; (mov r8, r8)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4921      	ldr	r1, [pc, #132]	; (8006ef0 <UART_CheckIdleState+0x14c>)
 8006e6a:	400a      	ands	r2, r1
 8006e6c:	601a      	str	r2, [r3, #0]
 8006e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f383 8810 	msr	PRIMASK, r3
}
 8006e78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8006e7e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006e80:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e82:	633b      	str	r3, [r7, #48]	; 0x30
 8006e84:	2301      	movs	r3, #1
 8006e86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	f383 8810 	msr	PRIMASK, r3
}
 8006e8e:	46c0      	nop			; (mov r8, r8)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689a      	ldr	r2, [r3, #8]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	438a      	bics	r2, r1
 8006e9e:	609a      	str	r2, [r3, #8]
 8006ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ea4:	6a3b      	ldr	r3, [r7, #32]
 8006ea6:	f383 8810 	msr	PRIMASK, r3
}
 8006eaa:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2280      	movs	r2, #128	; 0x80
 8006eb0:	2120      	movs	r1, #32
 8006eb2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2278      	movs	r2, #120	; 0x78
 8006eb8:	2100      	movs	r1, #0
 8006eba:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e011      	b.n	8006ee4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2280      	movs	r2, #128	; 0x80
 8006eca:	2120      	movs	r1, #32
 8006ecc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2278      	movs	r2, #120	; 0x78
 8006ede:	2100      	movs	r1, #0
 8006ee0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	0018      	movs	r0, r3
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	b010      	add	sp, #64	; 0x40
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	01ffffff 	.word	0x01ffffff
 8006ef0:	fffffedf 	.word	0xfffffedf

08006ef4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	603b      	str	r3, [r7, #0]
 8006f00:	1dfb      	adds	r3, r7, #7
 8006f02:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f04:	e04b      	b.n	8006f9e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	d048      	beq.n	8006f9e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f0c:	f7fb fd3c 	bl	8002988 <HAL_GetTick>
 8006f10:	0002      	movs	r2, r0
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	69ba      	ldr	r2, [r7, #24]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d302      	bcc.n	8006f22 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e04b      	b.n	8006fbe <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2204      	movs	r2, #4
 8006f2e:	4013      	ands	r3, r2
 8006f30:	d035      	beq.n	8006f9e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69db      	ldr	r3, [r3, #28]
 8006f38:	2208      	movs	r2, #8
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d111      	bne.n	8006f64 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2208      	movs	r2, #8
 8006f46:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	0018      	movs	r0, r3
 8006f4c:	f000 f83c 	bl	8006fc8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2284      	movs	r2, #132	; 0x84
 8006f54:	2108      	movs	r1, #8
 8006f56:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2278      	movs	r2, #120	; 0x78
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e02c      	b.n	8006fbe <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	69da      	ldr	r2, [r3, #28]
 8006f6a:	2380      	movs	r3, #128	; 0x80
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	401a      	ands	r2, r3
 8006f70:	2380      	movs	r3, #128	; 0x80
 8006f72:	011b      	lsls	r3, r3, #4
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d112      	bne.n	8006f9e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2280      	movs	r2, #128	; 0x80
 8006f7e:	0112      	lsls	r2, r2, #4
 8006f80:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	0018      	movs	r0, r3
 8006f86:	f000 f81f 	bl	8006fc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2284      	movs	r2, #132	; 0x84
 8006f8e:	2120      	movs	r1, #32
 8006f90:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2278      	movs	r2, #120	; 0x78
 8006f96:	2100      	movs	r1, #0
 8006f98:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e00f      	b.n	8006fbe <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	69db      	ldr	r3, [r3, #28]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	425a      	negs	r2, r3
 8006fae:	4153      	adcs	r3, r2
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	001a      	movs	r2, r3
 8006fb4:	1dfb      	adds	r3, r7, #7
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d0a4      	beq.n	8006f06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	0018      	movs	r0, r3
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	b004      	add	sp, #16
 8006fc4:	bd80      	pop	{r7, pc}
	...

08006fc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b08e      	sub	sp, #56	; 0x38
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8006fd4:	617b      	str	r3, [r7, #20]
  return(result);
 8006fd6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8006fda:	2301      	movs	r3, #1
 8006fdc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	f383 8810 	msr	PRIMASK, r3
}
 8006fe4:	46c0      	nop			; (mov r8, r8)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4926      	ldr	r1, [pc, #152]	; (800708c <UART_EndRxTransfer+0xc4>)
 8006ff2:	400a      	ands	r2, r1
 8006ff4:	601a      	str	r2, [r3, #0]
 8006ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	f383 8810 	msr	PRIMASK, r3
}
 8007000:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007002:	f3ef 8310 	mrs	r3, PRIMASK
 8007006:	623b      	str	r3, [r7, #32]
  return(result);
 8007008:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700a:	633b      	str	r3, [r7, #48]	; 0x30
 800700c:	2301      	movs	r3, #1
 800700e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007012:	f383 8810 	msr	PRIMASK, r3
}
 8007016:	46c0      	nop			; (mov r8, r8)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689a      	ldr	r2, [r3, #8]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2101      	movs	r1, #1
 8007024:	438a      	bics	r2, r1
 8007026:	609a      	str	r2, [r3, #8]
 8007028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800702c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702e:	f383 8810 	msr	PRIMASK, r3
}
 8007032:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007038:	2b01      	cmp	r3, #1
 800703a:	d118      	bne.n	800706e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800703c:	f3ef 8310 	mrs	r3, PRIMASK
 8007040:	60bb      	str	r3, [r7, #8]
  return(result);
 8007042:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007046:	2301      	movs	r3, #1
 8007048:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f383 8810 	msr	PRIMASK, r3
}
 8007050:	46c0      	nop			; (mov r8, r8)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2110      	movs	r1, #16
 800705e:	438a      	bics	r2, r1
 8007060:	601a      	str	r2, [r3, #0]
 8007062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007064:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	f383 8810 	msr	PRIMASK, r3
}
 800706c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2280      	movs	r2, #128	; 0x80
 8007072:	2120      	movs	r1, #32
 8007074:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007082:	46c0      	nop			; (mov r8, r8)
 8007084:	46bd      	mov	sp, r7
 8007086:	b00e      	add	sp, #56	; 0x38
 8007088:	bd80      	pop	{r7, pc}
 800708a:	46c0      	nop			; (mov r8, r8)
 800708c:	fffffedf 	.word	0xfffffedf

08007090 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	225a      	movs	r2, #90	; 0x5a
 80070a2:	2100      	movs	r1, #0
 80070a4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2252      	movs	r2, #82	; 0x52
 80070aa:	2100      	movs	r1, #0
 80070ac:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	0018      	movs	r0, r3
 80070b2:	f7ff fb65 	bl	8006780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070b6:	46c0      	nop			; (mov r8, r8)
 80070b8:	46bd      	mov	sp, r7
 80070ba:	b004      	add	sp, #16
 80070bc:	bd80      	pop	{r7, pc}

080070be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b086      	sub	sp, #24
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070c6:	f3ef 8310 	mrs	r3, PRIMASK
 80070ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80070cc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070ce:	617b      	str	r3, [r7, #20]
 80070d0:	2301      	movs	r3, #1
 80070d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f383 8810 	msr	PRIMASK, r3
}
 80070da:	46c0      	nop			; (mov r8, r8)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2140      	movs	r1, #64	; 0x40
 80070e8:	438a      	bics	r2, r1
 80070ea:	601a      	str	r2, [r3, #0]
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	f383 8810 	msr	PRIMASK, r3
}
 80070f6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2220      	movs	r2, #32
 80070fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	0018      	movs	r0, r3
 8007108:	f7ff fb32 	bl	8006770 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800710c:	46c0      	nop			; (mov r8, r8)
 800710e:	46bd      	mov	sp, r7
 8007110:	b006      	add	sp, #24
 8007112:	bd80      	pop	{r7, pc}

08007114 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800711c:	46c0      	nop			; (mov r8, r8)
 800711e:	46bd      	mov	sp, r7
 8007120:	b002      	add	sp, #8
 8007122:	bd80      	pop	{r7, pc}

08007124 <siprintf>:
 8007124:	b40e      	push	{r1, r2, r3}
 8007126:	b500      	push	{lr}
 8007128:	490b      	ldr	r1, [pc, #44]	; (8007158 <siprintf+0x34>)
 800712a:	b09c      	sub	sp, #112	; 0x70
 800712c:	ab1d      	add	r3, sp, #116	; 0x74
 800712e:	9002      	str	r0, [sp, #8]
 8007130:	9006      	str	r0, [sp, #24]
 8007132:	9107      	str	r1, [sp, #28]
 8007134:	9104      	str	r1, [sp, #16]
 8007136:	4809      	ldr	r0, [pc, #36]	; (800715c <siprintf+0x38>)
 8007138:	4909      	ldr	r1, [pc, #36]	; (8007160 <siprintf+0x3c>)
 800713a:	cb04      	ldmia	r3!, {r2}
 800713c:	9105      	str	r1, [sp, #20]
 800713e:	6800      	ldr	r0, [r0, #0]
 8007140:	a902      	add	r1, sp, #8
 8007142:	9301      	str	r3, [sp, #4]
 8007144:	f000 f9ac 	bl	80074a0 <_svfiprintf_r>
 8007148:	2200      	movs	r2, #0
 800714a:	9b02      	ldr	r3, [sp, #8]
 800714c:	701a      	strb	r2, [r3, #0]
 800714e:	b01c      	add	sp, #112	; 0x70
 8007150:	bc08      	pop	{r3}
 8007152:	b003      	add	sp, #12
 8007154:	4718      	bx	r3
 8007156:	46c0      	nop			; (mov r8, r8)
 8007158:	7fffffff 	.word	0x7fffffff
 800715c:	20000058 	.word	0x20000058
 8007160:	ffff0208 	.word	0xffff0208

08007164 <memset>:
 8007164:	0003      	movs	r3, r0
 8007166:	1882      	adds	r2, r0, r2
 8007168:	4293      	cmp	r3, r2
 800716a:	d100      	bne.n	800716e <memset+0xa>
 800716c:	4770      	bx	lr
 800716e:	7019      	strb	r1, [r3, #0]
 8007170:	3301      	adds	r3, #1
 8007172:	e7f9      	b.n	8007168 <memset+0x4>

08007174 <__errno>:
 8007174:	4b01      	ldr	r3, [pc, #4]	; (800717c <__errno+0x8>)
 8007176:	6818      	ldr	r0, [r3, #0]
 8007178:	4770      	bx	lr
 800717a:	46c0      	nop			; (mov r8, r8)
 800717c:	20000058 	.word	0x20000058

08007180 <__libc_init_array>:
 8007180:	b570      	push	{r4, r5, r6, lr}
 8007182:	2600      	movs	r6, #0
 8007184:	4c0c      	ldr	r4, [pc, #48]	; (80071b8 <__libc_init_array+0x38>)
 8007186:	4d0d      	ldr	r5, [pc, #52]	; (80071bc <__libc_init_array+0x3c>)
 8007188:	1b64      	subs	r4, r4, r5
 800718a:	10a4      	asrs	r4, r4, #2
 800718c:	42a6      	cmp	r6, r4
 800718e:	d109      	bne.n	80071a4 <__libc_init_array+0x24>
 8007190:	2600      	movs	r6, #0
 8007192:	f000 fc6d 	bl	8007a70 <_init>
 8007196:	4c0a      	ldr	r4, [pc, #40]	; (80071c0 <__libc_init_array+0x40>)
 8007198:	4d0a      	ldr	r5, [pc, #40]	; (80071c4 <__libc_init_array+0x44>)
 800719a:	1b64      	subs	r4, r4, r5
 800719c:	10a4      	asrs	r4, r4, #2
 800719e:	42a6      	cmp	r6, r4
 80071a0:	d105      	bne.n	80071ae <__libc_init_array+0x2e>
 80071a2:	bd70      	pop	{r4, r5, r6, pc}
 80071a4:	00b3      	lsls	r3, r6, #2
 80071a6:	58eb      	ldr	r3, [r5, r3]
 80071a8:	4798      	blx	r3
 80071aa:	3601      	adds	r6, #1
 80071ac:	e7ee      	b.n	800718c <__libc_init_array+0xc>
 80071ae:	00b3      	lsls	r3, r6, #2
 80071b0:	58eb      	ldr	r3, [r5, r3]
 80071b2:	4798      	blx	r3
 80071b4:	3601      	adds	r6, #1
 80071b6:	e7f2      	b.n	800719e <__libc_init_array+0x1e>
 80071b8:	08007b90 	.word	0x08007b90
 80071bc:	08007b90 	.word	0x08007b90
 80071c0:	08007b94 	.word	0x08007b94
 80071c4:	08007b90 	.word	0x08007b90

080071c8 <__retarget_lock_acquire_recursive>:
 80071c8:	4770      	bx	lr

080071ca <__retarget_lock_release_recursive>:
 80071ca:	4770      	bx	lr

080071cc <memcpy>:
 80071cc:	2300      	movs	r3, #0
 80071ce:	b510      	push	{r4, lr}
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d100      	bne.n	80071d6 <memcpy+0xa>
 80071d4:	bd10      	pop	{r4, pc}
 80071d6:	5ccc      	ldrb	r4, [r1, r3]
 80071d8:	54c4      	strb	r4, [r0, r3]
 80071da:	3301      	adds	r3, #1
 80071dc:	e7f8      	b.n	80071d0 <memcpy+0x4>
	...

080071e0 <_free_r>:
 80071e0:	b570      	push	{r4, r5, r6, lr}
 80071e2:	0005      	movs	r5, r0
 80071e4:	2900      	cmp	r1, #0
 80071e6:	d010      	beq.n	800720a <_free_r+0x2a>
 80071e8:	1f0c      	subs	r4, r1, #4
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	da00      	bge.n	80071f2 <_free_r+0x12>
 80071f0:	18e4      	adds	r4, r4, r3
 80071f2:	0028      	movs	r0, r5
 80071f4:	f000 f8e2 	bl	80073bc <__malloc_lock>
 80071f8:	4a1d      	ldr	r2, [pc, #116]	; (8007270 <_free_r+0x90>)
 80071fa:	6813      	ldr	r3, [r2, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d105      	bne.n	800720c <_free_r+0x2c>
 8007200:	6063      	str	r3, [r4, #4]
 8007202:	6014      	str	r4, [r2, #0]
 8007204:	0028      	movs	r0, r5
 8007206:	f000 f8e1 	bl	80073cc <__malloc_unlock>
 800720a:	bd70      	pop	{r4, r5, r6, pc}
 800720c:	42a3      	cmp	r3, r4
 800720e:	d908      	bls.n	8007222 <_free_r+0x42>
 8007210:	6820      	ldr	r0, [r4, #0]
 8007212:	1821      	adds	r1, r4, r0
 8007214:	428b      	cmp	r3, r1
 8007216:	d1f3      	bne.n	8007200 <_free_r+0x20>
 8007218:	6819      	ldr	r1, [r3, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	1809      	adds	r1, r1, r0
 800721e:	6021      	str	r1, [r4, #0]
 8007220:	e7ee      	b.n	8007200 <_free_r+0x20>
 8007222:	001a      	movs	r2, r3
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d001      	beq.n	800722e <_free_r+0x4e>
 800722a:	42a3      	cmp	r3, r4
 800722c:	d9f9      	bls.n	8007222 <_free_r+0x42>
 800722e:	6811      	ldr	r1, [r2, #0]
 8007230:	1850      	adds	r0, r2, r1
 8007232:	42a0      	cmp	r0, r4
 8007234:	d10b      	bne.n	800724e <_free_r+0x6e>
 8007236:	6820      	ldr	r0, [r4, #0]
 8007238:	1809      	adds	r1, r1, r0
 800723a:	1850      	adds	r0, r2, r1
 800723c:	6011      	str	r1, [r2, #0]
 800723e:	4283      	cmp	r3, r0
 8007240:	d1e0      	bne.n	8007204 <_free_r+0x24>
 8007242:	6818      	ldr	r0, [r3, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	1841      	adds	r1, r0, r1
 8007248:	6011      	str	r1, [r2, #0]
 800724a:	6053      	str	r3, [r2, #4]
 800724c:	e7da      	b.n	8007204 <_free_r+0x24>
 800724e:	42a0      	cmp	r0, r4
 8007250:	d902      	bls.n	8007258 <_free_r+0x78>
 8007252:	230c      	movs	r3, #12
 8007254:	602b      	str	r3, [r5, #0]
 8007256:	e7d5      	b.n	8007204 <_free_r+0x24>
 8007258:	6820      	ldr	r0, [r4, #0]
 800725a:	1821      	adds	r1, r4, r0
 800725c:	428b      	cmp	r3, r1
 800725e:	d103      	bne.n	8007268 <_free_r+0x88>
 8007260:	6819      	ldr	r1, [r3, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	1809      	adds	r1, r1, r0
 8007266:	6021      	str	r1, [r4, #0]
 8007268:	6063      	str	r3, [r4, #4]
 800726a:	6054      	str	r4, [r2, #4]
 800726c:	e7ca      	b.n	8007204 <_free_r+0x24>
 800726e:	46c0      	nop			; (mov r8, r8)
 8007270:	20000740 	.word	0x20000740

08007274 <sbrk_aligned>:
 8007274:	b570      	push	{r4, r5, r6, lr}
 8007276:	4e0f      	ldr	r6, [pc, #60]	; (80072b4 <sbrk_aligned+0x40>)
 8007278:	000d      	movs	r5, r1
 800727a:	6831      	ldr	r1, [r6, #0]
 800727c:	0004      	movs	r4, r0
 800727e:	2900      	cmp	r1, #0
 8007280:	d102      	bne.n	8007288 <sbrk_aligned+0x14>
 8007282:	f000 fba1 	bl	80079c8 <_sbrk_r>
 8007286:	6030      	str	r0, [r6, #0]
 8007288:	0029      	movs	r1, r5
 800728a:	0020      	movs	r0, r4
 800728c:	f000 fb9c 	bl	80079c8 <_sbrk_r>
 8007290:	1c43      	adds	r3, r0, #1
 8007292:	d00a      	beq.n	80072aa <sbrk_aligned+0x36>
 8007294:	2303      	movs	r3, #3
 8007296:	1cc5      	adds	r5, r0, #3
 8007298:	439d      	bics	r5, r3
 800729a:	42a8      	cmp	r0, r5
 800729c:	d007      	beq.n	80072ae <sbrk_aligned+0x3a>
 800729e:	1a29      	subs	r1, r5, r0
 80072a0:	0020      	movs	r0, r4
 80072a2:	f000 fb91 	bl	80079c8 <_sbrk_r>
 80072a6:	3001      	adds	r0, #1
 80072a8:	d101      	bne.n	80072ae <sbrk_aligned+0x3a>
 80072aa:	2501      	movs	r5, #1
 80072ac:	426d      	negs	r5, r5
 80072ae:	0028      	movs	r0, r5
 80072b0:	bd70      	pop	{r4, r5, r6, pc}
 80072b2:	46c0      	nop			; (mov r8, r8)
 80072b4:	20000744 	.word	0x20000744

080072b8 <_malloc_r>:
 80072b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072ba:	2203      	movs	r2, #3
 80072bc:	1ccb      	adds	r3, r1, #3
 80072be:	4393      	bics	r3, r2
 80072c0:	3308      	adds	r3, #8
 80072c2:	0006      	movs	r6, r0
 80072c4:	001f      	movs	r7, r3
 80072c6:	2b0c      	cmp	r3, #12
 80072c8:	d238      	bcs.n	800733c <_malloc_r+0x84>
 80072ca:	270c      	movs	r7, #12
 80072cc:	42b9      	cmp	r1, r7
 80072ce:	d837      	bhi.n	8007340 <_malloc_r+0x88>
 80072d0:	0030      	movs	r0, r6
 80072d2:	f000 f873 	bl	80073bc <__malloc_lock>
 80072d6:	4b38      	ldr	r3, [pc, #224]	; (80073b8 <_malloc_r+0x100>)
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	001c      	movs	r4, r3
 80072de:	2c00      	cmp	r4, #0
 80072e0:	d133      	bne.n	800734a <_malloc_r+0x92>
 80072e2:	0039      	movs	r1, r7
 80072e4:	0030      	movs	r0, r6
 80072e6:	f7ff ffc5 	bl	8007274 <sbrk_aligned>
 80072ea:	0004      	movs	r4, r0
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	d15e      	bne.n	80073ae <_malloc_r+0xf6>
 80072f0:	9b00      	ldr	r3, [sp, #0]
 80072f2:	681c      	ldr	r4, [r3, #0]
 80072f4:	0025      	movs	r5, r4
 80072f6:	2d00      	cmp	r5, #0
 80072f8:	d14e      	bne.n	8007398 <_malloc_r+0xe0>
 80072fa:	2c00      	cmp	r4, #0
 80072fc:	d051      	beq.n	80073a2 <_malloc_r+0xea>
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	0029      	movs	r1, r5
 8007302:	18e3      	adds	r3, r4, r3
 8007304:	0030      	movs	r0, r6
 8007306:	9301      	str	r3, [sp, #4]
 8007308:	f000 fb5e 	bl	80079c8 <_sbrk_r>
 800730c:	9b01      	ldr	r3, [sp, #4]
 800730e:	4283      	cmp	r3, r0
 8007310:	d147      	bne.n	80073a2 <_malloc_r+0xea>
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	0030      	movs	r0, r6
 8007316:	1aff      	subs	r7, r7, r3
 8007318:	0039      	movs	r1, r7
 800731a:	f7ff ffab 	bl	8007274 <sbrk_aligned>
 800731e:	3001      	adds	r0, #1
 8007320:	d03f      	beq.n	80073a2 <_malloc_r+0xea>
 8007322:	6823      	ldr	r3, [r4, #0]
 8007324:	19db      	adds	r3, r3, r7
 8007326:	6023      	str	r3, [r4, #0]
 8007328:	9b00      	ldr	r3, [sp, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d040      	beq.n	80073b2 <_malloc_r+0xfa>
 8007330:	685a      	ldr	r2, [r3, #4]
 8007332:	42a2      	cmp	r2, r4
 8007334:	d133      	bne.n	800739e <_malloc_r+0xe6>
 8007336:	2200      	movs	r2, #0
 8007338:	605a      	str	r2, [r3, #4]
 800733a:	e014      	b.n	8007366 <_malloc_r+0xae>
 800733c:	2b00      	cmp	r3, #0
 800733e:	dac5      	bge.n	80072cc <_malloc_r+0x14>
 8007340:	230c      	movs	r3, #12
 8007342:	2500      	movs	r5, #0
 8007344:	6033      	str	r3, [r6, #0]
 8007346:	0028      	movs	r0, r5
 8007348:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800734a:	6821      	ldr	r1, [r4, #0]
 800734c:	1bc9      	subs	r1, r1, r7
 800734e:	d420      	bmi.n	8007392 <_malloc_r+0xda>
 8007350:	290b      	cmp	r1, #11
 8007352:	d918      	bls.n	8007386 <_malloc_r+0xce>
 8007354:	19e2      	adds	r2, r4, r7
 8007356:	6027      	str	r7, [r4, #0]
 8007358:	42a3      	cmp	r3, r4
 800735a:	d112      	bne.n	8007382 <_malloc_r+0xca>
 800735c:	9b00      	ldr	r3, [sp, #0]
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	6863      	ldr	r3, [r4, #4]
 8007362:	6011      	str	r1, [r2, #0]
 8007364:	6053      	str	r3, [r2, #4]
 8007366:	0030      	movs	r0, r6
 8007368:	0025      	movs	r5, r4
 800736a:	f000 f82f 	bl	80073cc <__malloc_unlock>
 800736e:	2207      	movs	r2, #7
 8007370:	350b      	adds	r5, #11
 8007372:	1d23      	adds	r3, r4, #4
 8007374:	4395      	bics	r5, r2
 8007376:	1aea      	subs	r2, r5, r3
 8007378:	429d      	cmp	r5, r3
 800737a:	d0e4      	beq.n	8007346 <_malloc_r+0x8e>
 800737c:	1b5b      	subs	r3, r3, r5
 800737e:	50a3      	str	r3, [r4, r2]
 8007380:	e7e1      	b.n	8007346 <_malloc_r+0x8e>
 8007382:	605a      	str	r2, [r3, #4]
 8007384:	e7ec      	b.n	8007360 <_malloc_r+0xa8>
 8007386:	6862      	ldr	r2, [r4, #4]
 8007388:	42a3      	cmp	r3, r4
 800738a:	d1d5      	bne.n	8007338 <_malloc_r+0x80>
 800738c:	9b00      	ldr	r3, [sp, #0]
 800738e:	601a      	str	r2, [r3, #0]
 8007390:	e7e9      	b.n	8007366 <_malloc_r+0xae>
 8007392:	0023      	movs	r3, r4
 8007394:	6864      	ldr	r4, [r4, #4]
 8007396:	e7a2      	b.n	80072de <_malloc_r+0x26>
 8007398:	002c      	movs	r4, r5
 800739a:	686d      	ldr	r5, [r5, #4]
 800739c:	e7ab      	b.n	80072f6 <_malloc_r+0x3e>
 800739e:	0013      	movs	r3, r2
 80073a0:	e7c4      	b.n	800732c <_malloc_r+0x74>
 80073a2:	230c      	movs	r3, #12
 80073a4:	0030      	movs	r0, r6
 80073a6:	6033      	str	r3, [r6, #0]
 80073a8:	f000 f810 	bl	80073cc <__malloc_unlock>
 80073ac:	e7cb      	b.n	8007346 <_malloc_r+0x8e>
 80073ae:	6027      	str	r7, [r4, #0]
 80073b0:	e7d9      	b.n	8007366 <_malloc_r+0xae>
 80073b2:	605b      	str	r3, [r3, #4]
 80073b4:	deff      	udf	#255	; 0xff
 80073b6:	46c0      	nop			; (mov r8, r8)
 80073b8:	20000740 	.word	0x20000740

080073bc <__malloc_lock>:
 80073bc:	b510      	push	{r4, lr}
 80073be:	4802      	ldr	r0, [pc, #8]	; (80073c8 <__malloc_lock+0xc>)
 80073c0:	f7ff ff02 	bl	80071c8 <__retarget_lock_acquire_recursive>
 80073c4:	bd10      	pop	{r4, pc}
 80073c6:	46c0      	nop			; (mov r8, r8)
 80073c8:	2000073c 	.word	0x2000073c

080073cc <__malloc_unlock>:
 80073cc:	b510      	push	{r4, lr}
 80073ce:	4802      	ldr	r0, [pc, #8]	; (80073d8 <__malloc_unlock+0xc>)
 80073d0:	f7ff fefb 	bl	80071ca <__retarget_lock_release_recursive>
 80073d4:	bd10      	pop	{r4, pc}
 80073d6:	46c0      	nop			; (mov r8, r8)
 80073d8:	2000073c 	.word	0x2000073c

080073dc <__ssputs_r>:
 80073dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073de:	b085      	sub	sp, #20
 80073e0:	9301      	str	r3, [sp, #4]
 80073e2:	9203      	str	r2, [sp, #12]
 80073e4:	688e      	ldr	r6, [r1, #8]
 80073e6:	9a01      	ldr	r2, [sp, #4]
 80073e8:	0007      	movs	r7, r0
 80073ea:	000c      	movs	r4, r1
 80073ec:	680b      	ldr	r3, [r1, #0]
 80073ee:	4296      	cmp	r6, r2
 80073f0:	d831      	bhi.n	8007456 <__ssputs_r+0x7a>
 80073f2:	898a      	ldrh	r2, [r1, #12]
 80073f4:	2190      	movs	r1, #144	; 0x90
 80073f6:	00c9      	lsls	r1, r1, #3
 80073f8:	420a      	tst	r2, r1
 80073fa:	d029      	beq.n	8007450 <__ssputs_r+0x74>
 80073fc:	2003      	movs	r0, #3
 80073fe:	6921      	ldr	r1, [r4, #16]
 8007400:	1a5b      	subs	r3, r3, r1
 8007402:	9302      	str	r3, [sp, #8]
 8007404:	6963      	ldr	r3, [r4, #20]
 8007406:	4343      	muls	r3, r0
 8007408:	0fdd      	lsrs	r5, r3, #31
 800740a:	18ed      	adds	r5, r5, r3
 800740c:	9b01      	ldr	r3, [sp, #4]
 800740e:	9802      	ldr	r0, [sp, #8]
 8007410:	3301      	adds	r3, #1
 8007412:	181b      	adds	r3, r3, r0
 8007414:	106d      	asrs	r5, r5, #1
 8007416:	42ab      	cmp	r3, r5
 8007418:	d900      	bls.n	800741c <__ssputs_r+0x40>
 800741a:	001d      	movs	r5, r3
 800741c:	0552      	lsls	r2, r2, #21
 800741e:	d529      	bpl.n	8007474 <__ssputs_r+0x98>
 8007420:	0029      	movs	r1, r5
 8007422:	0038      	movs	r0, r7
 8007424:	f7ff ff48 	bl	80072b8 <_malloc_r>
 8007428:	1e06      	subs	r6, r0, #0
 800742a:	d02d      	beq.n	8007488 <__ssputs_r+0xac>
 800742c:	9a02      	ldr	r2, [sp, #8]
 800742e:	6921      	ldr	r1, [r4, #16]
 8007430:	f7ff fecc 	bl	80071cc <memcpy>
 8007434:	89a2      	ldrh	r2, [r4, #12]
 8007436:	4b19      	ldr	r3, [pc, #100]	; (800749c <__ssputs_r+0xc0>)
 8007438:	401a      	ands	r2, r3
 800743a:	2380      	movs	r3, #128	; 0x80
 800743c:	4313      	orrs	r3, r2
 800743e:	81a3      	strh	r3, [r4, #12]
 8007440:	9b02      	ldr	r3, [sp, #8]
 8007442:	6126      	str	r6, [r4, #16]
 8007444:	18f6      	adds	r6, r6, r3
 8007446:	6026      	str	r6, [r4, #0]
 8007448:	6165      	str	r5, [r4, #20]
 800744a:	9e01      	ldr	r6, [sp, #4]
 800744c:	1aed      	subs	r5, r5, r3
 800744e:	60a5      	str	r5, [r4, #8]
 8007450:	9b01      	ldr	r3, [sp, #4]
 8007452:	429e      	cmp	r6, r3
 8007454:	d900      	bls.n	8007458 <__ssputs_r+0x7c>
 8007456:	9e01      	ldr	r6, [sp, #4]
 8007458:	0032      	movs	r2, r6
 800745a:	9903      	ldr	r1, [sp, #12]
 800745c:	6820      	ldr	r0, [r4, #0]
 800745e:	f000 fa9f 	bl	80079a0 <memmove>
 8007462:	2000      	movs	r0, #0
 8007464:	68a3      	ldr	r3, [r4, #8]
 8007466:	1b9b      	subs	r3, r3, r6
 8007468:	60a3      	str	r3, [r4, #8]
 800746a:	6823      	ldr	r3, [r4, #0]
 800746c:	199b      	adds	r3, r3, r6
 800746e:	6023      	str	r3, [r4, #0]
 8007470:	b005      	add	sp, #20
 8007472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007474:	002a      	movs	r2, r5
 8007476:	0038      	movs	r0, r7
 8007478:	f000 fac3 	bl	8007a02 <_realloc_r>
 800747c:	1e06      	subs	r6, r0, #0
 800747e:	d1df      	bne.n	8007440 <__ssputs_r+0x64>
 8007480:	0038      	movs	r0, r7
 8007482:	6921      	ldr	r1, [r4, #16]
 8007484:	f7ff feac 	bl	80071e0 <_free_r>
 8007488:	230c      	movs	r3, #12
 800748a:	2001      	movs	r0, #1
 800748c:	603b      	str	r3, [r7, #0]
 800748e:	89a2      	ldrh	r2, [r4, #12]
 8007490:	3334      	adds	r3, #52	; 0x34
 8007492:	4313      	orrs	r3, r2
 8007494:	81a3      	strh	r3, [r4, #12]
 8007496:	4240      	negs	r0, r0
 8007498:	e7ea      	b.n	8007470 <__ssputs_r+0x94>
 800749a:	46c0      	nop			; (mov r8, r8)
 800749c:	fffffb7f 	.word	0xfffffb7f

080074a0 <_svfiprintf_r>:
 80074a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074a2:	b0a1      	sub	sp, #132	; 0x84
 80074a4:	9003      	str	r0, [sp, #12]
 80074a6:	001d      	movs	r5, r3
 80074a8:	898b      	ldrh	r3, [r1, #12]
 80074aa:	000f      	movs	r7, r1
 80074ac:	0016      	movs	r6, r2
 80074ae:	061b      	lsls	r3, r3, #24
 80074b0:	d511      	bpl.n	80074d6 <_svfiprintf_r+0x36>
 80074b2:	690b      	ldr	r3, [r1, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10e      	bne.n	80074d6 <_svfiprintf_r+0x36>
 80074b8:	2140      	movs	r1, #64	; 0x40
 80074ba:	f7ff fefd 	bl	80072b8 <_malloc_r>
 80074be:	6038      	str	r0, [r7, #0]
 80074c0:	6138      	str	r0, [r7, #16]
 80074c2:	2800      	cmp	r0, #0
 80074c4:	d105      	bne.n	80074d2 <_svfiprintf_r+0x32>
 80074c6:	230c      	movs	r3, #12
 80074c8:	9a03      	ldr	r2, [sp, #12]
 80074ca:	3801      	subs	r0, #1
 80074cc:	6013      	str	r3, [r2, #0]
 80074ce:	b021      	add	sp, #132	; 0x84
 80074d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074d2:	2340      	movs	r3, #64	; 0x40
 80074d4:	617b      	str	r3, [r7, #20]
 80074d6:	2300      	movs	r3, #0
 80074d8:	ac08      	add	r4, sp, #32
 80074da:	6163      	str	r3, [r4, #20]
 80074dc:	3320      	adds	r3, #32
 80074de:	7663      	strb	r3, [r4, #25]
 80074e0:	3310      	adds	r3, #16
 80074e2:	76a3      	strb	r3, [r4, #26]
 80074e4:	9507      	str	r5, [sp, #28]
 80074e6:	0035      	movs	r5, r6
 80074e8:	782b      	ldrb	r3, [r5, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <_svfiprintf_r+0x52>
 80074ee:	2b25      	cmp	r3, #37	; 0x25
 80074f0:	d148      	bne.n	8007584 <_svfiprintf_r+0xe4>
 80074f2:	1bab      	subs	r3, r5, r6
 80074f4:	9305      	str	r3, [sp, #20]
 80074f6:	42b5      	cmp	r5, r6
 80074f8:	d00b      	beq.n	8007512 <_svfiprintf_r+0x72>
 80074fa:	0032      	movs	r2, r6
 80074fc:	0039      	movs	r1, r7
 80074fe:	9803      	ldr	r0, [sp, #12]
 8007500:	f7ff ff6c 	bl	80073dc <__ssputs_r>
 8007504:	3001      	adds	r0, #1
 8007506:	d100      	bne.n	800750a <_svfiprintf_r+0x6a>
 8007508:	e0af      	b.n	800766a <_svfiprintf_r+0x1ca>
 800750a:	6963      	ldr	r3, [r4, #20]
 800750c:	9a05      	ldr	r2, [sp, #20]
 800750e:	189b      	adds	r3, r3, r2
 8007510:	6163      	str	r3, [r4, #20]
 8007512:	782b      	ldrb	r3, [r5, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d100      	bne.n	800751a <_svfiprintf_r+0x7a>
 8007518:	e0a7      	b.n	800766a <_svfiprintf_r+0x1ca>
 800751a:	2201      	movs	r2, #1
 800751c:	2300      	movs	r3, #0
 800751e:	4252      	negs	r2, r2
 8007520:	6062      	str	r2, [r4, #4]
 8007522:	a904      	add	r1, sp, #16
 8007524:	3254      	adds	r2, #84	; 0x54
 8007526:	1852      	adds	r2, r2, r1
 8007528:	1c6e      	adds	r6, r5, #1
 800752a:	6023      	str	r3, [r4, #0]
 800752c:	60e3      	str	r3, [r4, #12]
 800752e:	60a3      	str	r3, [r4, #8]
 8007530:	7013      	strb	r3, [r2, #0]
 8007532:	65a3      	str	r3, [r4, #88]	; 0x58
 8007534:	4b55      	ldr	r3, [pc, #340]	; (800768c <_svfiprintf_r+0x1ec>)
 8007536:	2205      	movs	r2, #5
 8007538:	0018      	movs	r0, r3
 800753a:	7831      	ldrb	r1, [r6, #0]
 800753c:	9305      	str	r3, [sp, #20]
 800753e:	f000 fa55 	bl	80079ec <memchr>
 8007542:	1c75      	adds	r5, r6, #1
 8007544:	2800      	cmp	r0, #0
 8007546:	d11f      	bne.n	8007588 <_svfiprintf_r+0xe8>
 8007548:	6822      	ldr	r2, [r4, #0]
 800754a:	06d3      	lsls	r3, r2, #27
 800754c:	d504      	bpl.n	8007558 <_svfiprintf_r+0xb8>
 800754e:	2353      	movs	r3, #83	; 0x53
 8007550:	a904      	add	r1, sp, #16
 8007552:	185b      	adds	r3, r3, r1
 8007554:	2120      	movs	r1, #32
 8007556:	7019      	strb	r1, [r3, #0]
 8007558:	0713      	lsls	r3, r2, #28
 800755a:	d504      	bpl.n	8007566 <_svfiprintf_r+0xc6>
 800755c:	2353      	movs	r3, #83	; 0x53
 800755e:	a904      	add	r1, sp, #16
 8007560:	185b      	adds	r3, r3, r1
 8007562:	212b      	movs	r1, #43	; 0x2b
 8007564:	7019      	strb	r1, [r3, #0]
 8007566:	7833      	ldrb	r3, [r6, #0]
 8007568:	2b2a      	cmp	r3, #42	; 0x2a
 800756a:	d016      	beq.n	800759a <_svfiprintf_r+0xfa>
 800756c:	0035      	movs	r5, r6
 800756e:	2100      	movs	r1, #0
 8007570:	200a      	movs	r0, #10
 8007572:	68e3      	ldr	r3, [r4, #12]
 8007574:	782a      	ldrb	r2, [r5, #0]
 8007576:	1c6e      	adds	r6, r5, #1
 8007578:	3a30      	subs	r2, #48	; 0x30
 800757a:	2a09      	cmp	r2, #9
 800757c:	d94e      	bls.n	800761c <_svfiprintf_r+0x17c>
 800757e:	2900      	cmp	r1, #0
 8007580:	d111      	bne.n	80075a6 <_svfiprintf_r+0x106>
 8007582:	e017      	b.n	80075b4 <_svfiprintf_r+0x114>
 8007584:	3501      	adds	r5, #1
 8007586:	e7af      	b.n	80074e8 <_svfiprintf_r+0x48>
 8007588:	9b05      	ldr	r3, [sp, #20]
 800758a:	6822      	ldr	r2, [r4, #0]
 800758c:	1ac0      	subs	r0, r0, r3
 800758e:	2301      	movs	r3, #1
 8007590:	4083      	lsls	r3, r0
 8007592:	4313      	orrs	r3, r2
 8007594:	002e      	movs	r6, r5
 8007596:	6023      	str	r3, [r4, #0]
 8007598:	e7cc      	b.n	8007534 <_svfiprintf_r+0x94>
 800759a:	9b07      	ldr	r3, [sp, #28]
 800759c:	1d19      	adds	r1, r3, #4
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	9107      	str	r1, [sp, #28]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	db01      	blt.n	80075aa <_svfiprintf_r+0x10a>
 80075a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80075a8:	e004      	b.n	80075b4 <_svfiprintf_r+0x114>
 80075aa:	425b      	negs	r3, r3
 80075ac:	60e3      	str	r3, [r4, #12]
 80075ae:	2302      	movs	r3, #2
 80075b0:	4313      	orrs	r3, r2
 80075b2:	6023      	str	r3, [r4, #0]
 80075b4:	782b      	ldrb	r3, [r5, #0]
 80075b6:	2b2e      	cmp	r3, #46	; 0x2e
 80075b8:	d10a      	bne.n	80075d0 <_svfiprintf_r+0x130>
 80075ba:	786b      	ldrb	r3, [r5, #1]
 80075bc:	2b2a      	cmp	r3, #42	; 0x2a
 80075be:	d135      	bne.n	800762c <_svfiprintf_r+0x18c>
 80075c0:	9b07      	ldr	r3, [sp, #28]
 80075c2:	3502      	adds	r5, #2
 80075c4:	1d1a      	adds	r2, r3, #4
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	9207      	str	r2, [sp, #28]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	db2b      	blt.n	8007626 <_svfiprintf_r+0x186>
 80075ce:	9309      	str	r3, [sp, #36]	; 0x24
 80075d0:	4e2f      	ldr	r6, [pc, #188]	; (8007690 <_svfiprintf_r+0x1f0>)
 80075d2:	2203      	movs	r2, #3
 80075d4:	0030      	movs	r0, r6
 80075d6:	7829      	ldrb	r1, [r5, #0]
 80075d8:	f000 fa08 	bl	80079ec <memchr>
 80075dc:	2800      	cmp	r0, #0
 80075de:	d006      	beq.n	80075ee <_svfiprintf_r+0x14e>
 80075e0:	2340      	movs	r3, #64	; 0x40
 80075e2:	1b80      	subs	r0, r0, r6
 80075e4:	4083      	lsls	r3, r0
 80075e6:	6822      	ldr	r2, [r4, #0]
 80075e8:	3501      	adds	r5, #1
 80075ea:	4313      	orrs	r3, r2
 80075ec:	6023      	str	r3, [r4, #0]
 80075ee:	7829      	ldrb	r1, [r5, #0]
 80075f0:	2206      	movs	r2, #6
 80075f2:	4828      	ldr	r0, [pc, #160]	; (8007694 <_svfiprintf_r+0x1f4>)
 80075f4:	1c6e      	adds	r6, r5, #1
 80075f6:	7621      	strb	r1, [r4, #24]
 80075f8:	f000 f9f8 	bl	80079ec <memchr>
 80075fc:	2800      	cmp	r0, #0
 80075fe:	d03c      	beq.n	800767a <_svfiprintf_r+0x1da>
 8007600:	4b25      	ldr	r3, [pc, #148]	; (8007698 <_svfiprintf_r+0x1f8>)
 8007602:	2b00      	cmp	r3, #0
 8007604:	d125      	bne.n	8007652 <_svfiprintf_r+0x1b2>
 8007606:	2207      	movs	r2, #7
 8007608:	9b07      	ldr	r3, [sp, #28]
 800760a:	3307      	adds	r3, #7
 800760c:	4393      	bics	r3, r2
 800760e:	3308      	adds	r3, #8
 8007610:	9307      	str	r3, [sp, #28]
 8007612:	6963      	ldr	r3, [r4, #20]
 8007614:	9a04      	ldr	r2, [sp, #16]
 8007616:	189b      	adds	r3, r3, r2
 8007618:	6163      	str	r3, [r4, #20]
 800761a:	e764      	b.n	80074e6 <_svfiprintf_r+0x46>
 800761c:	4343      	muls	r3, r0
 800761e:	0035      	movs	r5, r6
 8007620:	2101      	movs	r1, #1
 8007622:	189b      	adds	r3, r3, r2
 8007624:	e7a6      	b.n	8007574 <_svfiprintf_r+0xd4>
 8007626:	2301      	movs	r3, #1
 8007628:	425b      	negs	r3, r3
 800762a:	e7d0      	b.n	80075ce <_svfiprintf_r+0x12e>
 800762c:	2300      	movs	r3, #0
 800762e:	200a      	movs	r0, #10
 8007630:	001a      	movs	r2, r3
 8007632:	3501      	adds	r5, #1
 8007634:	6063      	str	r3, [r4, #4]
 8007636:	7829      	ldrb	r1, [r5, #0]
 8007638:	1c6e      	adds	r6, r5, #1
 800763a:	3930      	subs	r1, #48	; 0x30
 800763c:	2909      	cmp	r1, #9
 800763e:	d903      	bls.n	8007648 <_svfiprintf_r+0x1a8>
 8007640:	2b00      	cmp	r3, #0
 8007642:	d0c5      	beq.n	80075d0 <_svfiprintf_r+0x130>
 8007644:	9209      	str	r2, [sp, #36]	; 0x24
 8007646:	e7c3      	b.n	80075d0 <_svfiprintf_r+0x130>
 8007648:	4342      	muls	r2, r0
 800764a:	0035      	movs	r5, r6
 800764c:	2301      	movs	r3, #1
 800764e:	1852      	adds	r2, r2, r1
 8007650:	e7f1      	b.n	8007636 <_svfiprintf_r+0x196>
 8007652:	aa07      	add	r2, sp, #28
 8007654:	9200      	str	r2, [sp, #0]
 8007656:	0021      	movs	r1, r4
 8007658:	003a      	movs	r2, r7
 800765a:	4b10      	ldr	r3, [pc, #64]	; (800769c <_svfiprintf_r+0x1fc>)
 800765c:	9803      	ldr	r0, [sp, #12]
 800765e:	e000      	b.n	8007662 <_svfiprintf_r+0x1c2>
 8007660:	bf00      	nop
 8007662:	9004      	str	r0, [sp, #16]
 8007664:	9b04      	ldr	r3, [sp, #16]
 8007666:	3301      	adds	r3, #1
 8007668:	d1d3      	bne.n	8007612 <_svfiprintf_r+0x172>
 800766a:	89bb      	ldrh	r3, [r7, #12]
 800766c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800766e:	065b      	lsls	r3, r3, #25
 8007670:	d400      	bmi.n	8007674 <_svfiprintf_r+0x1d4>
 8007672:	e72c      	b.n	80074ce <_svfiprintf_r+0x2e>
 8007674:	2001      	movs	r0, #1
 8007676:	4240      	negs	r0, r0
 8007678:	e729      	b.n	80074ce <_svfiprintf_r+0x2e>
 800767a:	aa07      	add	r2, sp, #28
 800767c:	9200      	str	r2, [sp, #0]
 800767e:	0021      	movs	r1, r4
 8007680:	003a      	movs	r2, r7
 8007682:	4b06      	ldr	r3, [pc, #24]	; (800769c <_svfiprintf_r+0x1fc>)
 8007684:	9803      	ldr	r0, [sp, #12]
 8007686:	f000 f87b 	bl	8007780 <_printf_i>
 800768a:	e7ea      	b.n	8007662 <_svfiprintf_r+0x1c2>
 800768c:	08007b54 	.word	0x08007b54
 8007690:	08007b5a 	.word	0x08007b5a
 8007694:	08007b5e 	.word	0x08007b5e
 8007698:	00000000 	.word	0x00000000
 800769c:	080073dd 	.word	0x080073dd

080076a0 <_printf_common>:
 80076a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076a2:	0016      	movs	r6, r2
 80076a4:	9301      	str	r3, [sp, #4]
 80076a6:	688a      	ldr	r2, [r1, #8]
 80076a8:	690b      	ldr	r3, [r1, #16]
 80076aa:	000c      	movs	r4, r1
 80076ac:	9000      	str	r0, [sp, #0]
 80076ae:	4293      	cmp	r3, r2
 80076b0:	da00      	bge.n	80076b4 <_printf_common+0x14>
 80076b2:	0013      	movs	r3, r2
 80076b4:	0022      	movs	r2, r4
 80076b6:	6033      	str	r3, [r6, #0]
 80076b8:	3243      	adds	r2, #67	; 0x43
 80076ba:	7812      	ldrb	r2, [r2, #0]
 80076bc:	2a00      	cmp	r2, #0
 80076be:	d001      	beq.n	80076c4 <_printf_common+0x24>
 80076c0:	3301      	adds	r3, #1
 80076c2:	6033      	str	r3, [r6, #0]
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	069b      	lsls	r3, r3, #26
 80076c8:	d502      	bpl.n	80076d0 <_printf_common+0x30>
 80076ca:	6833      	ldr	r3, [r6, #0]
 80076cc:	3302      	adds	r3, #2
 80076ce:	6033      	str	r3, [r6, #0]
 80076d0:	6822      	ldr	r2, [r4, #0]
 80076d2:	2306      	movs	r3, #6
 80076d4:	0015      	movs	r5, r2
 80076d6:	401d      	ands	r5, r3
 80076d8:	421a      	tst	r2, r3
 80076da:	d027      	beq.n	800772c <_printf_common+0x8c>
 80076dc:	0023      	movs	r3, r4
 80076de:	3343      	adds	r3, #67	; 0x43
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	1e5a      	subs	r2, r3, #1
 80076e4:	4193      	sbcs	r3, r2
 80076e6:	6822      	ldr	r2, [r4, #0]
 80076e8:	0692      	lsls	r2, r2, #26
 80076ea:	d430      	bmi.n	800774e <_printf_common+0xae>
 80076ec:	0022      	movs	r2, r4
 80076ee:	9901      	ldr	r1, [sp, #4]
 80076f0:	9800      	ldr	r0, [sp, #0]
 80076f2:	9d08      	ldr	r5, [sp, #32]
 80076f4:	3243      	adds	r2, #67	; 0x43
 80076f6:	47a8      	blx	r5
 80076f8:	3001      	adds	r0, #1
 80076fa:	d025      	beq.n	8007748 <_printf_common+0xa8>
 80076fc:	2206      	movs	r2, #6
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	2500      	movs	r5, #0
 8007702:	4013      	ands	r3, r2
 8007704:	2b04      	cmp	r3, #4
 8007706:	d105      	bne.n	8007714 <_printf_common+0x74>
 8007708:	6833      	ldr	r3, [r6, #0]
 800770a:	68e5      	ldr	r5, [r4, #12]
 800770c:	1aed      	subs	r5, r5, r3
 800770e:	43eb      	mvns	r3, r5
 8007710:	17db      	asrs	r3, r3, #31
 8007712:	401d      	ands	r5, r3
 8007714:	68a3      	ldr	r3, [r4, #8]
 8007716:	6922      	ldr	r2, [r4, #16]
 8007718:	4293      	cmp	r3, r2
 800771a:	dd01      	ble.n	8007720 <_printf_common+0x80>
 800771c:	1a9b      	subs	r3, r3, r2
 800771e:	18ed      	adds	r5, r5, r3
 8007720:	2600      	movs	r6, #0
 8007722:	42b5      	cmp	r5, r6
 8007724:	d120      	bne.n	8007768 <_printf_common+0xc8>
 8007726:	2000      	movs	r0, #0
 8007728:	e010      	b.n	800774c <_printf_common+0xac>
 800772a:	3501      	adds	r5, #1
 800772c:	68e3      	ldr	r3, [r4, #12]
 800772e:	6832      	ldr	r2, [r6, #0]
 8007730:	1a9b      	subs	r3, r3, r2
 8007732:	42ab      	cmp	r3, r5
 8007734:	ddd2      	ble.n	80076dc <_printf_common+0x3c>
 8007736:	0022      	movs	r2, r4
 8007738:	2301      	movs	r3, #1
 800773a:	9901      	ldr	r1, [sp, #4]
 800773c:	9800      	ldr	r0, [sp, #0]
 800773e:	9f08      	ldr	r7, [sp, #32]
 8007740:	3219      	adds	r2, #25
 8007742:	47b8      	blx	r7
 8007744:	3001      	adds	r0, #1
 8007746:	d1f0      	bne.n	800772a <_printf_common+0x8a>
 8007748:	2001      	movs	r0, #1
 800774a:	4240      	negs	r0, r0
 800774c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800774e:	2030      	movs	r0, #48	; 0x30
 8007750:	18e1      	adds	r1, r4, r3
 8007752:	3143      	adds	r1, #67	; 0x43
 8007754:	7008      	strb	r0, [r1, #0]
 8007756:	0021      	movs	r1, r4
 8007758:	1c5a      	adds	r2, r3, #1
 800775a:	3145      	adds	r1, #69	; 0x45
 800775c:	7809      	ldrb	r1, [r1, #0]
 800775e:	18a2      	adds	r2, r4, r2
 8007760:	3243      	adds	r2, #67	; 0x43
 8007762:	3302      	adds	r3, #2
 8007764:	7011      	strb	r1, [r2, #0]
 8007766:	e7c1      	b.n	80076ec <_printf_common+0x4c>
 8007768:	0022      	movs	r2, r4
 800776a:	2301      	movs	r3, #1
 800776c:	9901      	ldr	r1, [sp, #4]
 800776e:	9800      	ldr	r0, [sp, #0]
 8007770:	9f08      	ldr	r7, [sp, #32]
 8007772:	321a      	adds	r2, #26
 8007774:	47b8      	blx	r7
 8007776:	3001      	adds	r0, #1
 8007778:	d0e6      	beq.n	8007748 <_printf_common+0xa8>
 800777a:	3601      	adds	r6, #1
 800777c:	e7d1      	b.n	8007722 <_printf_common+0x82>
	...

08007780 <_printf_i>:
 8007780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007782:	b08b      	sub	sp, #44	; 0x2c
 8007784:	9206      	str	r2, [sp, #24]
 8007786:	000a      	movs	r2, r1
 8007788:	3243      	adds	r2, #67	; 0x43
 800778a:	9307      	str	r3, [sp, #28]
 800778c:	9005      	str	r0, [sp, #20]
 800778e:	9204      	str	r2, [sp, #16]
 8007790:	7e0a      	ldrb	r2, [r1, #24]
 8007792:	000c      	movs	r4, r1
 8007794:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007796:	2a78      	cmp	r2, #120	; 0x78
 8007798:	d809      	bhi.n	80077ae <_printf_i+0x2e>
 800779a:	2a62      	cmp	r2, #98	; 0x62
 800779c:	d80b      	bhi.n	80077b6 <_printf_i+0x36>
 800779e:	2a00      	cmp	r2, #0
 80077a0:	d100      	bne.n	80077a4 <_printf_i+0x24>
 80077a2:	e0be      	b.n	8007922 <_printf_i+0x1a2>
 80077a4:	497c      	ldr	r1, [pc, #496]	; (8007998 <_printf_i+0x218>)
 80077a6:	9103      	str	r1, [sp, #12]
 80077a8:	2a58      	cmp	r2, #88	; 0x58
 80077aa:	d100      	bne.n	80077ae <_printf_i+0x2e>
 80077ac:	e093      	b.n	80078d6 <_printf_i+0x156>
 80077ae:	0026      	movs	r6, r4
 80077b0:	3642      	adds	r6, #66	; 0x42
 80077b2:	7032      	strb	r2, [r6, #0]
 80077b4:	e022      	b.n	80077fc <_printf_i+0x7c>
 80077b6:	0010      	movs	r0, r2
 80077b8:	3863      	subs	r0, #99	; 0x63
 80077ba:	2815      	cmp	r0, #21
 80077bc:	d8f7      	bhi.n	80077ae <_printf_i+0x2e>
 80077be:	f7f8 fca3 	bl	8000108 <__gnu_thumb1_case_shi>
 80077c2:	0016      	.short	0x0016
 80077c4:	fff6001f 	.word	0xfff6001f
 80077c8:	fff6fff6 	.word	0xfff6fff6
 80077cc:	001ffff6 	.word	0x001ffff6
 80077d0:	fff6fff6 	.word	0xfff6fff6
 80077d4:	fff6fff6 	.word	0xfff6fff6
 80077d8:	003600a3 	.word	0x003600a3
 80077dc:	fff60083 	.word	0xfff60083
 80077e0:	00b4fff6 	.word	0x00b4fff6
 80077e4:	0036fff6 	.word	0x0036fff6
 80077e8:	fff6fff6 	.word	0xfff6fff6
 80077ec:	0087      	.short	0x0087
 80077ee:	0026      	movs	r6, r4
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	3642      	adds	r6, #66	; 0x42
 80077f4:	1d11      	adds	r1, r2, #4
 80077f6:	6019      	str	r1, [r3, #0]
 80077f8:	6813      	ldr	r3, [r2, #0]
 80077fa:	7033      	strb	r3, [r6, #0]
 80077fc:	2301      	movs	r3, #1
 80077fe:	e0a2      	b.n	8007946 <_printf_i+0x1c6>
 8007800:	6818      	ldr	r0, [r3, #0]
 8007802:	6809      	ldr	r1, [r1, #0]
 8007804:	1d02      	adds	r2, r0, #4
 8007806:	060d      	lsls	r5, r1, #24
 8007808:	d50b      	bpl.n	8007822 <_printf_i+0xa2>
 800780a:	6805      	ldr	r5, [r0, #0]
 800780c:	601a      	str	r2, [r3, #0]
 800780e:	2d00      	cmp	r5, #0
 8007810:	da03      	bge.n	800781a <_printf_i+0x9a>
 8007812:	232d      	movs	r3, #45	; 0x2d
 8007814:	9a04      	ldr	r2, [sp, #16]
 8007816:	426d      	negs	r5, r5
 8007818:	7013      	strb	r3, [r2, #0]
 800781a:	4b5f      	ldr	r3, [pc, #380]	; (8007998 <_printf_i+0x218>)
 800781c:	270a      	movs	r7, #10
 800781e:	9303      	str	r3, [sp, #12]
 8007820:	e01b      	b.n	800785a <_printf_i+0xda>
 8007822:	6805      	ldr	r5, [r0, #0]
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	0649      	lsls	r1, r1, #25
 8007828:	d5f1      	bpl.n	800780e <_printf_i+0x8e>
 800782a:	b22d      	sxth	r5, r5
 800782c:	e7ef      	b.n	800780e <_printf_i+0x8e>
 800782e:	680d      	ldr	r5, [r1, #0]
 8007830:	6819      	ldr	r1, [r3, #0]
 8007832:	1d08      	adds	r0, r1, #4
 8007834:	6018      	str	r0, [r3, #0]
 8007836:	062e      	lsls	r6, r5, #24
 8007838:	d501      	bpl.n	800783e <_printf_i+0xbe>
 800783a:	680d      	ldr	r5, [r1, #0]
 800783c:	e003      	b.n	8007846 <_printf_i+0xc6>
 800783e:	066d      	lsls	r5, r5, #25
 8007840:	d5fb      	bpl.n	800783a <_printf_i+0xba>
 8007842:	680d      	ldr	r5, [r1, #0]
 8007844:	b2ad      	uxth	r5, r5
 8007846:	4b54      	ldr	r3, [pc, #336]	; (8007998 <_printf_i+0x218>)
 8007848:	2708      	movs	r7, #8
 800784a:	9303      	str	r3, [sp, #12]
 800784c:	2a6f      	cmp	r2, #111	; 0x6f
 800784e:	d000      	beq.n	8007852 <_printf_i+0xd2>
 8007850:	3702      	adds	r7, #2
 8007852:	0023      	movs	r3, r4
 8007854:	2200      	movs	r2, #0
 8007856:	3343      	adds	r3, #67	; 0x43
 8007858:	701a      	strb	r2, [r3, #0]
 800785a:	6863      	ldr	r3, [r4, #4]
 800785c:	60a3      	str	r3, [r4, #8]
 800785e:	2b00      	cmp	r3, #0
 8007860:	db03      	blt.n	800786a <_printf_i+0xea>
 8007862:	2104      	movs	r1, #4
 8007864:	6822      	ldr	r2, [r4, #0]
 8007866:	438a      	bics	r2, r1
 8007868:	6022      	str	r2, [r4, #0]
 800786a:	2d00      	cmp	r5, #0
 800786c:	d102      	bne.n	8007874 <_printf_i+0xf4>
 800786e:	9e04      	ldr	r6, [sp, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00c      	beq.n	800788e <_printf_i+0x10e>
 8007874:	9e04      	ldr	r6, [sp, #16]
 8007876:	0028      	movs	r0, r5
 8007878:	0039      	movs	r1, r7
 800787a:	f7f8 fcd5 	bl	8000228 <__aeabi_uidivmod>
 800787e:	9b03      	ldr	r3, [sp, #12]
 8007880:	3e01      	subs	r6, #1
 8007882:	5c5b      	ldrb	r3, [r3, r1]
 8007884:	7033      	strb	r3, [r6, #0]
 8007886:	002b      	movs	r3, r5
 8007888:	0005      	movs	r5, r0
 800788a:	429f      	cmp	r7, r3
 800788c:	d9f3      	bls.n	8007876 <_printf_i+0xf6>
 800788e:	2f08      	cmp	r7, #8
 8007890:	d109      	bne.n	80078a6 <_printf_i+0x126>
 8007892:	6823      	ldr	r3, [r4, #0]
 8007894:	07db      	lsls	r3, r3, #31
 8007896:	d506      	bpl.n	80078a6 <_printf_i+0x126>
 8007898:	6862      	ldr	r2, [r4, #4]
 800789a:	6923      	ldr	r3, [r4, #16]
 800789c:	429a      	cmp	r2, r3
 800789e:	dc02      	bgt.n	80078a6 <_printf_i+0x126>
 80078a0:	2330      	movs	r3, #48	; 0x30
 80078a2:	3e01      	subs	r6, #1
 80078a4:	7033      	strb	r3, [r6, #0]
 80078a6:	9b04      	ldr	r3, [sp, #16]
 80078a8:	1b9b      	subs	r3, r3, r6
 80078aa:	6123      	str	r3, [r4, #16]
 80078ac:	9b07      	ldr	r3, [sp, #28]
 80078ae:	0021      	movs	r1, r4
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	9805      	ldr	r0, [sp, #20]
 80078b4:	9b06      	ldr	r3, [sp, #24]
 80078b6:	aa09      	add	r2, sp, #36	; 0x24
 80078b8:	f7ff fef2 	bl	80076a0 <_printf_common>
 80078bc:	3001      	adds	r0, #1
 80078be:	d147      	bne.n	8007950 <_printf_i+0x1d0>
 80078c0:	2001      	movs	r0, #1
 80078c2:	4240      	negs	r0, r0
 80078c4:	b00b      	add	sp, #44	; 0x2c
 80078c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078c8:	2220      	movs	r2, #32
 80078ca:	6809      	ldr	r1, [r1, #0]
 80078cc:	430a      	orrs	r2, r1
 80078ce:	6022      	str	r2, [r4, #0]
 80078d0:	2278      	movs	r2, #120	; 0x78
 80078d2:	4932      	ldr	r1, [pc, #200]	; (800799c <_printf_i+0x21c>)
 80078d4:	9103      	str	r1, [sp, #12]
 80078d6:	0021      	movs	r1, r4
 80078d8:	3145      	adds	r1, #69	; 0x45
 80078da:	700a      	strb	r2, [r1, #0]
 80078dc:	6819      	ldr	r1, [r3, #0]
 80078de:	6822      	ldr	r2, [r4, #0]
 80078e0:	c920      	ldmia	r1!, {r5}
 80078e2:	0610      	lsls	r0, r2, #24
 80078e4:	d402      	bmi.n	80078ec <_printf_i+0x16c>
 80078e6:	0650      	lsls	r0, r2, #25
 80078e8:	d500      	bpl.n	80078ec <_printf_i+0x16c>
 80078ea:	b2ad      	uxth	r5, r5
 80078ec:	6019      	str	r1, [r3, #0]
 80078ee:	07d3      	lsls	r3, r2, #31
 80078f0:	d502      	bpl.n	80078f8 <_printf_i+0x178>
 80078f2:	2320      	movs	r3, #32
 80078f4:	4313      	orrs	r3, r2
 80078f6:	6023      	str	r3, [r4, #0]
 80078f8:	2710      	movs	r7, #16
 80078fa:	2d00      	cmp	r5, #0
 80078fc:	d1a9      	bne.n	8007852 <_printf_i+0xd2>
 80078fe:	2220      	movs	r2, #32
 8007900:	6823      	ldr	r3, [r4, #0]
 8007902:	4393      	bics	r3, r2
 8007904:	6023      	str	r3, [r4, #0]
 8007906:	e7a4      	b.n	8007852 <_printf_i+0xd2>
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	680d      	ldr	r5, [r1, #0]
 800790c:	1d10      	adds	r0, r2, #4
 800790e:	6949      	ldr	r1, [r1, #20]
 8007910:	6018      	str	r0, [r3, #0]
 8007912:	6813      	ldr	r3, [r2, #0]
 8007914:	062e      	lsls	r6, r5, #24
 8007916:	d501      	bpl.n	800791c <_printf_i+0x19c>
 8007918:	6019      	str	r1, [r3, #0]
 800791a:	e002      	b.n	8007922 <_printf_i+0x1a2>
 800791c:	066d      	lsls	r5, r5, #25
 800791e:	d5fb      	bpl.n	8007918 <_printf_i+0x198>
 8007920:	8019      	strh	r1, [r3, #0]
 8007922:	2300      	movs	r3, #0
 8007924:	9e04      	ldr	r6, [sp, #16]
 8007926:	6123      	str	r3, [r4, #16]
 8007928:	e7c0      	b.n	80078ac <_printf_i+0x12c>
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	1d11      	adds	r1, r2, #4
 800792e:	6019      	str	r1, [r3, #0]
 8007930:	6816      	ldr	r6, [r2, #0]
 8007932:	2100      	movs	r1, #0
 8007934:	0030      	movs	r0, r6
 8007936:	6862      	ldr	r2, [r4, #4]
 8007938:	f000 f858 	bl	80079ec <memchr>
 800793c:	2800      	cmp	r0, #0
 800793e:	d001      	beq.n	8007944 <_printf_i+0x1c4>
 8007940:	1b80      	subs	r0, r0, r6
 8007942:	6060      	str	r0, [r4, #4]
 8007944:	6863      	ldr	r3, [r4, #4]
 8007946:	6123      	str	r3, [r4, #16]
 8007948:	2300      	movs	r3, #0
 800794a:	9a04      	ldr	r2, [sp, #16]
 800794c:	7013      	strb	r3, [r2, #0]
 800794e:	e7ad      	b.n	80078ac <_printf_i+0x12c>
 8007950:	0032      	movs	r2, r6
 8007952:	6923      	ldr	r3, [r4, #16]
 8007954:	9906      	ldr	r1, [sp, #24]
 8007956:	9805      	ldr	r0, [sp, #20]
 8007958:	9d07      	ldr	r5, [sp, #28]
 800795a:	47a8      	blx	r5
 800795c:	3001      	adds	r0, #1
 800795e:	d0af      	beq.n	80078c0 <_printf_i+0x140>
 8007960:	6823      	ldr	r3, [r4, #0]
 8007962:	079b      	lsls	r3, r3, #30
 8007964:	d415      	bmi.n	8007992 <_printf_i+0x212>
 8007966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007968:	68e0      	ldr	r0, [r4, #12]
 800796a:	4298      	cmp	r0, r3
 800796c:	daaa      	bge.n	80078c4 <_printf_i+0x144>
 800796e:	0018      	movs	r0, r3
 8007970:	e7a8      	b.n	80078c4 <_printf_i+0x144>
 8007972:	0022      	movs	r2, r4
 8007974:	2301      	movs	r3, #1
 8007976:	9906      	ldr	r1, [sp, #24]
 8007978:	9805      	ldr	r0, [sp, #20]
 800797a:	9e07      	ldr	r6, [sp, #28]
 800797c:	3219      	adds	r2, #25
 800797e:	47b0      	blx	r6
 8007980:	3001      	adds	r0, #1
 8007982:	d09d      	beq.n	80078c0 <_printf_i+0x140>
 8007984:	3501      	adds	r5, #1
 8007986:	68e3      	ldr	r3, [r4, #12]
 8007988:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800798a:	1a9b      	subs	r3, r3, r2
 800798c:	42ab      	cmp	r3, r5
 800798e:	dcf0      	bgt.n	8007972 <_printf_i+0x1f2>
 8007990:	e7e9      	b.n	8007966 <_printf_i+0x1e6>
 8007992:	2500      	movs	r5, #0
 8007994:	e7f7      	b.n	8007986 <_printf_i+0x206>
 8007996:	46c0      	nop			; (mov r8, r8)
 8007998:	08007b65 	.word	0x08007b65
 800799c:	08007b76 	.word	0x08007b76

080079a0 <memmove>:
 80079a0:	b510      	push	{r4, lr}
 80079a2:	4288      	cmp	r0, r1
 80079a4:	d902      	bls.n	80079ac <memmove+0xc>
 80079a6:	188b      	adds	r3, r1, r2
 80079a8:	4298      	cmp	r0, r3
 80079aa:	d303      	bcc.n	80079b4 <memmove+0x14>
 80079ac:	2300      	movs	r3, #0
 80079ae:	e007      	b.n	80079c0 <memmove+0x20>
 80079b0:	5c8b      	ldrb	r3, [r1, r2]
 80079b2:	5483      	strb	r3, [r0, r2]
 80079b4:	3a01      	subs	r2, #1
 80079b6:	d2fb      	bcs.n	80079b0 <memmove+0x10>
 80079b8:	bd10      	pop	{r4, pc}
 80079ba:	5ccc      	ldrb	r4, [r1, r3]
 80079bc:	54c4      	strb	r4, [r0, r3]
 80079be:	3301      	adds	r3, #1
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d1fa      	bne.n	80079ba <memmove+0x1a>
 80079c4:	e7f8      	b.n	80079b8 <memmove+0x18>
	...

080079c8 <_sbrk_r>:
 80079c8:	2300      	movs	r3, #0
 80079ca:	b570      	push	{r4, r5, r6, lr}
 80079cc:	4d06      	ldr	r5, [pc, #24]	; (80079e8 <_sbrk_r+0x20>)
 80079ce:	0004      	movs	r4, r0
 80079d0:	0008      	movs	r0, r1
 80079d2:	602b      	str	r3, [r5, #0]
 80079d4:	f7fa fcd6 	bl	8002384 <_sbrk>
 80079d8:	1c43      	adds	r3, r0, #1
 80079da:	d103      	bne.n	80079e4 <_sbrk_r+0x1c>
 80079dc:	682b      	ldr	r3, [r5, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d000      	beq.n	80079e4 <_sbrk_r+0x1c>
 80079e2:	6023      	str	r3, [r4, #0]
 80079e4:	bd70      	pop	{r4, r5, r6, pc}
 80079e6:	46c0      	nop			; (mov r8, r8)
 80079e8:	20000738 	.word	0x20000738

080079ec <memchr>:
 80079ec:	b2c9      	uxtb	r1, r1
 80079ee:	1882      	adds	r2, r0, r2
 80079f0:	4290      	cmp	r0, r2
 80079f2:	d101      	bne.n	80079f8 <memchr+0xc>
 80079f4:	2000      	movs	r0, #0
 80079f6:	4770      	bx	lr
 80079f8:	7803      	ldrb	r3, [r0, #0]
 80079fa:	428b      	cmp	r3, r1
 80079fc:	d0fb      	beq.n	80079f6 <memchr+0xa>
 80079fe:	3001      	adds	r0, #1
 8007a00:	e7f6      	b.n	80079f0 <memchr+0x4>

08007a02 <_realloc_r>:
 8007a02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a04:	0007      	movs	r7, r0
 8007a06:	000e      	movs	r6, r1
 8007a08:	0014      	movs	r4, r2
 8007a0a:	2900      	cmp	r1, #0
 8007a0c:	d105      	bne.n	8007a1a <_realloc_r+0x18>
 8007a0e:	0011      	movs	r1, r2
 8007a10:	f7ff fc52 	bl	80072b8 <_malloc_r>
 8007a14:	0005      	movs	r5, r0
 8007a16:	0028      	movs	r0, r5
 8007a18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a1a:	2a00      	cmp	r2, #0
 8007a1c:	d103      	bne.n	8007a26 <_realloc_r+0x24>
 8007a1e:	f7ff fbdf 	bl	80071e0 <_free_r>
 8007a22:	0025      	movs	r5, r4
 8007a24:	e7f7      	b.n	8007a16 <_realloc_r+0x14>
 8007a26:	f000 f81b 	bl	8007a60 <_malloc_usable_size_r>
 8007a2a:	9001      	str	r0, [sp, #4]
 8007a2c:	4284      	cmp	r4, r0
 8007a2e:	d803      	bhi.n	8007a38 <_realloc_r+0x36>
 8007a30:	0035      	movs	r5, r6
 8007a32:	0843      	lsrs	r3, r0, #1
 8007a34:	42a3      	cmp	r3, r4
 8007a36:	d3ee      	bcc.n	8007a16 <_realloc_r+0x14>
 8007a38:	0021      	movs	r1, r4
 8007a3a:	0038      	movs	r0, r7
 8007a3c:	f7ff fc3c 	bl	80072b8 <_malloc_r>
 8007a40:	1e05      	subs	r5, r0, #0
 8007a42:	d0e8      	beq.n	8007a16 <_realloc_r+0x14>
 8007a44:	9b01      	ldr	r3, [sp, #4]
 8007a46:	0022      	movs	r2, r4
 8007a48:	429c      	cmp	r4, r3
 8007a4a:	d900      	bls.n	8007a4e <_realloc_r+0x4c>
 8007a4c:	001a      	movs	r2, r3
 8007a4e:	0031      	movs	r1, r6
 8007a50:	0028      	movs	r0, r5
 8007a52:	f7ff fbbb 	bl	80071cc <memcpy>
 8007a56:	0031      	movs	r1, r6
 8007a58:	0038      	movs	r0, r7
 8007a5a:	f7ff fbc1 	bl	80071e0 <_free_r>
 8007a5e:	e7da      	b.n	8007a16 <_realloc_r+0x14>

08007a60 <_malloc_usable_size_r>:
 8007a60:	1f0b      	subs	r3, r1, #4
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	1f18      	subs	r0, r3, #4
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	da01      	bge.n	8007a6e <_malloc_usable_size_r+0xe>
 8007a6a:	580b      	ldr	r3, [r1, r0]
 8007a6c:	18c0      	adds	r0, r0, r3
 8007a6e:	4770      	bx	lr

08007a70 <_init>:
 8007a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a72:	46c0      	nop			; (mov r8, r8)
 8007a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a76:	bc08      	pop	{r3}
 8007a78:	469e      	mov	lr, r3
 8007a7a:	4770      	bx	lr

08007a7c <_fini>:
 8007a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7e:	46c0      	nop			; (mov r8, r8)
 8007a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a82:	bc08      	pop	{r3}
 8007a84:	469e      	mov	lr, r3
 8007a86:	4770      	bx	lr
